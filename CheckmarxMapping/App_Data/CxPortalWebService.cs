//O2Ref:System.Web.Services.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="CxPortalWebServiceSoap", Namespace="http://Checkmarx.com/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(WebClientUser))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxPivotRow[]))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
public partial class CxPortalWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetQueryCollectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPresetDetailsOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateNewPresetOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdatePresetOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeletePresetOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsValidPresetNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetQueriesForScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetQueriesForScanByRunIdOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultsForQueryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultsForQueryQroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultsForScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultPathOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetFileNamesForPathOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultPathsForQueryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultsBySeverityOperationCompleted;
    
    private System.Threading.SendOrPostCallback SavePredefinedCommandsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPredefinedCommandsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetExecutableListOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdatePermissionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectAssignUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsAllowAutoSignInOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPivotDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPivotLayoutsOperationCompleted;
    
    private System.Threading.SendOrPostCallback SavePivotLayoutOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeletePivotLayoutOperationCompleted;
    
    private System.Threading.SendOrPostCallback RegisterSaasPendingUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback ActivateSaasUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSaasPackagesOperationCompleted;
    
    private System.Threading.SendOrPostCallback SaasLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetEngineServersOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateEngineServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateEngineServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteEngineServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback ScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectsWithScansOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadProjectWithDefaultSettingsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSourceCodeForScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetQueryCollectionForLanguageOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadQueriesOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddScanResultsToProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultSummaryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCacheOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback SsoLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogoutOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAssociatedGroupsListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetConfigurationSetListOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsValidProjectNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSharedFileSystemLayerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRepositoryFileSystemLayerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSourceControlActionListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPostScanActionListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateNewProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateAndRunProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunScanAndAddToProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback CountLinesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScansStatusesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetStatusOfSingleScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback PostponeScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback CancelScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateProjectUserCredentialsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectsWithUserCredentialsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectsCredentialUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectsDisplayDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunProjectImmediatelyOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunProjectIncrementallyOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectPropertiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateProjectConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateProjectIncrementalConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProjectChartsOperationCompleted;
    
    private System.Threading.SendOrPostCallback ResetIgnorePathOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetFalsePositiveFlagOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateResultCommentOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateResultStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateSetOfResultStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunScanWithExistingProjectOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScansDisplayDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteScanOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanPropertiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateScanCommentOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScansDisplayDataForAllProjectsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanSummaryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanCompareSummaryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanCompareReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompareScanResultsOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateScanPDFReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateScannedFilesReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanPDFReportStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScannedFilesReportStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanPDFReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScannedFilesReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateScanExcelReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanExcelReportStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanExcelReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateScanXMLReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanXMLReportStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanXMLReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanXMLReportByRunIdOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanPDFReportByRunIdOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateScanRTFReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanRTFReportStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetScanRTFReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetQueryDescriptionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSourceByScanIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetResultStateListOperationCompleted;
    
    private System.Threading.SendOrPostCallback ForgotPasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback ResetPasswordByEmailOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckChangePasswordTokenOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordWithTokenOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompaniesOperationCompleted;
    
    private System.Threading.SendOrPostCallback RegisterPendingUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPendingUsersListOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeletePendingUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback ApprovePendingUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserProfileDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserProfileDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUsersInGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetHierarchyGroupTreeOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserActivationStateOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddNewUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServerLicenseDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUsersLicenseDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompaniesLicenseDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSPLicenseDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserGroupsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompaniesListOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsValidUserNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAvailbleDomainNamesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUsersFromDomainOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateNewTeamOperationCompleted;
    
    private System.Threading.SendOrPostCallback RenameTeamOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllTeamsOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteTeamOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateNewCompanyOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateNewServiceProviderOperationCompleted;
    
    private System.Threading.SendOrPostCallback RenameCompanyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllCompaniesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllSPsOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteCompanyOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteSPOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsValidCompanyNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompanyTeamsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServiceProviderTeamsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServiceProviderCompaniesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompanyPropertiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserAsCompanyManagerOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserAsServiceProviderManagerOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsValidServiceProviderNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCompanyPropertiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetSystemSettingsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetServerLanguageListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSystemSettingsOperationCompleted;
    
    private System.Threading.SendOrPostCallback VerifySupportedVersionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetInstallationSettingsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPresetListOperationCompleted;
    
    /// <remarks/>
    public CxPortalWebService() {
        this.Url = "http://checkmarx.teammentor.net/CxWebInterface/CxWebService.asmx";
    }
    
    /// <remarks/>
    public event GetQueryCollectionCompletedEventHandler GetQueryCollectionCompleted;
    
    /// <remarks/>
    public event GetPresetDetailsCompletedEventHandler GetPresetDetailsCompleted;
    
    /// <remarks/>
    public event CreateNewPresetCompletedEventHandler CreateNewPresetCompleted;
    
    /// <remarks/>
    public event UpdatePresetCompletedEventHandler UpdatePresetCompleted;
    
    /// <remarks/>
    public event DeletePresetCompletedEventHandler DeletePresetCompleted;
    
    /// <remarks/>
    public event IsValidPresetNameCompletedEventHandler IsValidPresetNameCompleted;
    
    /// <remarks/>
    public event GetQueriesForScanCompletedEventHandler GetQueriesForScanCompleted;
    
    /// <remarks/>
    public event GetQueriesForScanByRunIdCompletedEventHandler GetQueriesForScanByRunIdCompleted;
    
    /// <remarks/>
    public event GetResultsForQueryCompletedEventHandler GetResultsForQueryCompleted;
    
    /// <remarks/>
    public event GetResultsForQueryQroupCompletedEventHandler GetResultsForQueryQroupCompleted;
    
    /// <remarks/>
    public event GetResultsForScanCompletedEventHandler GetResultsForScanCompleted;
    
    /// <remarks/>
    public event GetResultPathCompletedEventHandler GetResultPathCompleted;
    
    /// <remarks/>
    public event GetFileNamesForPathCompletedEventHandler GetFileNamesForPathCompleted;
    
    /// <remarks/>
    public event GetResultPathsForQueryCompletedEventHandler GetResultPathsForQueryCompleted;
    
    /// <remarks/>
    public event GetResultsBySeverityCompletedEventHandler GetResultsBySeverityCompleted;
    
    /// <remarks/>
    public event SavePredefinedCommandsCompletedEventHandler SavePredefinedCommandsCompleted;
    
    /// <remarks/>
    public event GetPredefinedCommandsCompletedEventHandler GetPredefinedCommandsCompleted;
    
    /// <remarks/>
    public event GetExecutableListCompletedEventHandler GetExecutableListCompleted;
    
    /// <remarks/>
    public event UpdatePermissionCompletedEventHandler UpdatePermissionCompleted;
    
    /// <remarks/>
    public event GetProjectAssignUsersCompletedEventHandler GetProjectAssignUsersCompleted;
    
    /// <remarks/>
    public event IsAllowAutoSignInCompletedEventHandler IsAllowAutoSignInCompleted;
    
    /// <remarks/>
    public event GetPivotDataCompletedEventHandler GetPivotDataCompleted;
    
    /// <remarks/>
    public event GetPivotLayoutsCompletedEventHandler GetPivotLayoutsCompleted;
    
    /// <remarks/>
    public event SavePivotLayoutCompletedEventHandler SavePivotLayoutCompleted;
    
    /// <remarks/>
    public event DeletePivotLayoutCompletedEventHandler DeletePivotLayoutCompleted;
    
    /// <remarks/>
    public event RegisterSaasPendingUserCompletedEventHandler RegisterSaasPendingUserCompleted;
    
    /// <remarks/>
    public event ActivateSaasUserCompletedEventHandler ActivateSaasUserCompleted;
    
    /// <remarks/>
    public event GetSaasPackagesCompletedEventHandler GetSaasPackagesCompleted;
    
    /// <remarks/>
    public event SaasLoginCompletedEventHandler SaasLoginCompleted;
    
    /// <remarks/>
    public event GetEngineServersCompletedEventHandler GetEngineServersCompleted;
    
    /// <remarks/>
    public event UpdateEngineServerCompletedEventHandler UpdateEngineServerCompleted;
    
    /// <remarks/>
    public event CreateEngineServerCompletedEventHandler CreateEngineServerCompleted;
    
    /// <remarks/>
    public event DeleteEngineServerCompletedEventHandler DeleteEngineServerCompleted;
    
    /// <remarks/>
    public event ScanCompletedEventHandler ScanCompleted;
    
    /// <remarks/>
    public event GetProjectsWithScansCompletedEventHandler GetProjectsWithScansCompleted;
    
    /// <remarks/>
    public event UploadProjectWithDefaultSettingsCompletedEventHandler UploadProjectWithDefaultSettingsCompleted;
    
    /// <remarks/>
    public event GetSourceCodeForScanCompletedEventHandler GetSourceCodeForScanCompleted;
    
    /// <remarks/>
    public event GetQueryCollectionForLanguageCompletedEventHandler GetQueryCollectionForLanguageCompleted;
    
    /// <remarks/>
    public event UploadQueriesCompletedEventHandler UploadQueriesCompleted;
    
    /// <remarks/>
    public event AddScanResultsToProjectCompletedEventHandler AddScanResultsToProjectCompleted;
    
    /// <remarks/>
    public event GetResultsCompletedEventHandler GetResultsCompleted;
    
    /// <remarks/>
    public event GetResultSummaryCompletedEventHandler GetResultSummaryCompleted;
    
    /// <remarks/>
    public event GetCacheCompletedEventHandler GetCacheCompleted;
    
    /// <remarks/>
    public event LoginCompletedEventHandler LoginCompleted;
    
    /// <remarks/>
    public event SsoLoginCompletedEventHandler SsoLoginCompleted;
    
    /// <remarks/>
    public event LogoutCompletedEventHandler LogoutCompleted;
    
    /// <remarks/>
    public event GetAssociatedGroupsListCompletedEventHandler GetAssociatedGroupsListCompleted;
    
    /// <remarks/>
    public event GetConfigurationSetListCompletedEventHandler GetConfigurationSetListCompleted;
    
    /// <remarks/>
    public event IsValidProjectNameCompletedEventHandler IsValidProjectNameCompleted;
    
    /// <remarks/>
    public event GetSharedFileSystemLayerCompletedEventHandler GetSharedFileSystemLayerCompleted;
    
    /// <remarks/>
    public event GetRepositoryFileSystemLayerCompletedEventHandler GetRepositoryFileSystemLayerCompleted;
    
    /// <remarks/>
    public event GetSourceControlActionListCompletedEventHandler GetSourceControlActionListCompleted;
    
    /// <remarks/>
    public event GetPostScanActionListCompletedEventHandler GetPostScanActionListCompleted;
    
    /// <remarks/>
    public event CreateNewProjectCompletedEventHandler CreateNewProjectCompleted;
    
    /// <remarks/>
    public event CreateAndRunProjectCompletedEventHandler CreateAndRunProjectCompleted;
    
    /// <remarks/>
    public event RunScanAndAddToProjectCompletedEventHandler RunScanAndAddToProjectCompleted;
    
    /// <remarks/>
    public event CountLinesCompletedEventHandler CountLinesCompleted;
    
    /// <remarks/>
    public event GetScansStatusesCompletedEventHandler GetScansStatusesCompleted;
    
    /// <remarks/>
    public event GetStatusOfSingleScanCompletedEventHandler GetStatusOfSingleScanCompleted;
    
    /// <remarks/>
    public event PostponeScanCompletedEventHandler PostponeScanCompleted;
    
    /// <remarks/>
    public event CancelScanCompletedEventHandler CancelScanCompleted;
    
    /// <remarks/>
    public event UpdateProjectUserCredentialsCompletedEventHandler UpdateProjectUserCredentialsCompleted;
    
    /// <remarks/>
    public event GetProjectsWithUserCredentialsCompletedEventHandler GetProjectsWithUserCredentialsCompleted;
    
    /// <remarks/>
    public event GetProjectsCredentialUsersCompletedEventHandler GetProjectsCredentialUsersCompleted;
    
    /// <remarks/>
    public event GetProjectsDisplayDataCompletedEventHandler GetProjectsDisplayDataCompleted;
    
    /// <remarks/>
    public event RunProjectImmediatelyCompletedEventHandler RunProjectImmediatelyCompleted;
    
    /// <remarks/>
    public event RunProjectIncrementallyCompletedEventHandler RunProjectIncrementallyCompleted;
    
    /// <remarks/>
    public event DeleteProjectCompletedEventHandler DeleteProjectCompleted;
    
    /// <remarks/>
    public event GetProjectConfigurationCompletedEventHandler GetProjectConfigurationCompleted;
    
    /// <remarks/>
    public event GetProjectPropertiesCompletedEventHandler GetProjectPropertiesCompleted;
    
    /// <remarks/>
    public event UpdateProjectConfigurationCompletedEventHandler UpdateProjectConfigurationCompleted;
    
    /// <remarks/>
    public event UpdateProjectIncrementalConfigurationCompletedEventHandler UpdateProjectIncrementalConfigurationCompleted;
    
    /// <remarks/>
    public event GetProjectChartsCompletedEventHandler GetProjectChartsCompleted;
    
    /// <remarks/>
    public event ResetIgnorePathCompletedEventHandler ResetIgnorePathCompleted;
    
    /// <remarks/>
    public event SetFalsePositiveFlagCompletedEventHandler SetFalsePositiveFlagCompleted;
    
    /// <remarks/>
    public event UpdateResultCommentCompletedEventHandler UpdateResultCommentCompleted;
    
    /// <remarks/>
    public event UpdateResultStateCompletedEventHandler UpdateResultStateCompleted;
    
    /// <remarks/>
    public event UpdateSetOfResultStateCompletedEventHandler UpdateSetOfResultStateCompleted;
    
    /// <remarks/>
    public event RunScanWithExistingProjectCompletedEventHandler RunScanWithExistingProjectCompleted;
    
    /// <remarks/>
    public event GetScansDisplayDataCompletedEventHandler GetScansDisplayDataCompleted;
    
    /// <remarks/>
    public event DeleteScanCompletedEventHandler DeleteScanCompleted;
    
    /// <remarks/>
    public event GetScanPropertiesCompletedEventHandler GetScanPropertiesCompleted;
    
    /// <remarks/>
    public event UpdateScanCommentCompletedEventHandler UpdateScanCommentCompleted;
    
    /// <remarks/>
    public event GetScansDisplayDataForAllProjectsCompletedEventHandler GetScansDisplayDataForAllProjectsCompleted;
    
    /// <remarks/>
    public event GetScanSummaryCompletedEventHandler GetScanSummaryCompleted;
    
    /// <remarks/>
    public event GetScanCompareSummaryCompletedEventHandler GetScanCompareSummaryCompleted;
    
    /// <remarks/>
    public event GetScanCompareReportCompletedEventHandler GetScanCompareReportCompleted;
    
    /// <remarks/>
    public event GetCompareScanResultsCompletedEventHandler GetCompareScanResultsCompleted;
    
    /// <remarks/>
    public event CreateScanPDFReportCompletedEventHandler CreateScanPDFReportCompleted;
    
    /// <remarks/>
    public event CreateScannedFilesReportCompletedEventHandler CreateScannedFilesReportCompleted;
    
    /// <remarks/>
    public event GetScanPDFReportStatusCompletedEventHandler GetScanPDFReportStatusCompleted;
    
    /// <remarks/>
    public event GetScannedFilesReportStatusCompletedEventHandler GetScannedFilesReportStatusCompleted;
    
    /// <remarks/>
    public event GetScanPDFReportCompletedEventHandler GetScanPDFReportCompleted;
    
    /// <remarks/>
    public event GetScannedFilesReportCompletedEventHandler GetScannedFilesReportCompleted;
    
    /// <remarks/>
    public event CreateScanExcelReportCompletedEventHandler CreateScanExcelReportCompleted;
    
    /// <remarks/>
    public event GetScanExcelReportStatusCompletedEventHandler GetScanExcelReportStatusCompleted;
    
    /// <remarks/>
    public event GetScanExcelReportCompletedEventHandler GetScanExcelReportCompleted;
    
    /// <remarks/>
    public event CreateScanXMLReportCompletedEventHandler CreateScanXMLReportCompleted;
    
    /// <remarks/>
    public event GetScanXMLReportStatusCompletedEventHandler GetScanXMLReportStatusCompleted;
    
    /// <remarks/>
    public event GetScanXMLReportCompletedEventHandler GetScanXMLReportCompleted;
    
    /// <remarks/>
    public event GetScanXMLReportByRunIdCompletedEventHandler GetScanXMLReportByRunIdCompleted;
    
    /// <remarks/>
    public event GetScanPDFReportByRunIdCompletedEventHandler GetScanPDFReportByRunIdCompleted;
    
    /// <remarks/>
    public event CreateScanRTFReportCompletedEventHandler CreateScanRTFReportCompleted;
    
    /// <remarks/>
    public event GetScanRTFReportStatusCompletedEventHandler GetScanRTFReportStatusCompleted;
    
    /// <remarks/>
    public event GetScanRTFReportCompletedEventHandler GetScanRTFReportCompleted;
    
    /// <remarks/>
    public event GetQueryDescriptionCompletedEventHandler GetQueryDescriptionCompleted;
    
    /// <remarks/>
    public event GetSourceByScanIDCompletedEventHandler GetSourceByScanIDCompleted;
    
    /// <remarks/>
    public event GetResultStateListCompletedEventHandler GetResultStateListCompleted;
    
    /// <remarks/>
    public event ForgotPasswordCompletedEventHandler ForgotPasswordCompleted;
    
    /// <remarks/>
    public event ResetPasswordByEmailCompletedEventHandler ResetPasswordByEmailCompleted;
    
    /// <remarks/>
    public event CheckChangePasswordTokenCompletedEventHandler CheckChangePasswordTokenCompleted;
    
    /// <remarks/>
    public event ChangePasswordWithTokenCompletedEventHandler ChangePasswordWithTokenCompleted;
    
    /// <remarks/>
    public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
    
    /// <remarks/>
    public event GetCompaniesCompletedEventHandler GetCompaniesCompleted;
    
    /// <remarks/>
    public event RegisterPendingUserCompletedEventHandler RegisterPendingUserCompleted;
    
    /// <remarks/>
    public event GetPendingUsersListCompletedEventHandler GetPendingUsersListCompleted;
    
    /// <remarks/>
    public event DeletePendingUsersCompletedEventHandler DeletePendingUsersCompleted;
    
    /// <remarks/>
    public event ApprovePendingUsersCompletedEventHandler ApprovePendingUsersCompleted;
    
    /// <remarks/>
    public event GetUserProfileDataCompletedEventHandler GetUserProfileDataCompleted;
    
    /// <remarks/>
    public event UpdateUserProfileDataCompletedEventHandler UpdateUserProfileDataCompleted;
    
    /// <remarks/>
    public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
    
    /// <remarks/>
    public event GetAllUsersInGroupCompletedEventHandler GetAllUsersInGroupCompleted;
    
    /// <remarks/>
    public event DeleteUserCompletedEventHandler DeleteUserCompleted;
    
    /// <remarks/>
    public event GetHierarchyGroupTreeCompletedEventHandler GetHierarchyGroupTreeCompleted;
    
    /// <remarks/>
    public event SetUserActivationStateCompletedEventHandler SetUserActivationStateCompleted;
    
    /// <remarks/>
    public event AddNewUserCompletedEventHandler AddNewUserCompleted;
    
    /// <remarks/>
    public event UpdateUserDataCompletedEventHandler UpdateUserDataCompleted;
    
    /// <remarks/>
    public event GetServerLicenseDataCompletedEventHandler GetServerLicenseDataCompleted;
    
    /// <remarks/>
    public event GetUsersLicenseDataCompletedEventHandler GetUsersLicenseDataCompleted;
    
    /// <remarks/>
    public event GetCompaniesLicenseDataCompletedEventHandler GetCompaniesLicenseDataCompleted;
    
    /// <remarks/>
    public event GetSPLicenseDataCompletedEventHandler GetSPLicenseDataCompleted;
    
    /// <remarks/>
    public event UpdateUserGroupsCompletedEventHandler UpdateUserGroupsCompleted;
    
    /// <remarks/>
    public event GetCompaniesListCompletedEventHandler GetCompaniesListCompleted;
    
    /// <remarks/>
    public event IsValidUserNameCompletedEventHandler IsValidUserNameCompleted;
    
    /// <remarks/>
    public event GetAvailbleDomainNamesCompletedEventHandler GetAvailbleDomainNamesCompleted;
    
    /// <remarks/>
    public event GetAllUsersFromDomainCompletedEventHandler GetAllUsersFromDomainCompleted;
    
    /// <remarks/>
    public event CreateNewTeamCompletedEventHandler CreateNewTeamCompleted;
    
    /// <remarks/>
    public event RenameTeamCompletedEventHandler RenameTeamCompleted;
    
    /// <remarks/>
    public event GetAllTeamsCompletedEventHandler GetAllTeamsCompleted;
    
    /// <remarks/>
    public event DeleteTeamCompletedEventHandler DeleteTeamCompleted;
    
    /// <remarks/>
    public event CreateNewCompanyCompletedEventHandler CreateNewCompanyCompleted;
    
    /// <remarks/>
    public event CreateNewServiceProviderCompletedEventHandler CreateNewServiceProviderCompleted;
    
    /// <remarks/>
    public event RenameCompanyCompletedEventHandler RenameCompanyCompleted;
    
    /// <remarks/>
    public event GetAllCompaniesCompletedEventHandler GetAllCompaniesCompleted;
    
    /// <remarks/>
    public event GetAllSPsCompletedEventHandler GetAllSPsCompleted;
    
    /// <remarks/>
    public event DeleteCompanyCompletedEventHandler DeleteCompanyCompleted;
    
    /// <remarks/>
    public event DeleteSPCompletedEventHandler DeleteSPCompleted;
    
    /// <remarks/>
    public event IsValidCompanyNameCompletedEventHandler IsValidCompanyNameCompleted;
    
    /// <remarks/>
    public event GetCompanyTeamsCompletedEventHandler GetCompanyTeamsCompleted;
    
    /// <remarks/>
    public event GetServiceProviderTeamsCompletedEventHandler GetServiceProviderTeamsCompleted;
    
    /// <remarks/>
    public event GetServiceProviderCompaniesCompletedEventHandler GetServiceProviderCompaniesCompleted;
    
    /// <remarks/>
    public event GetCompanyPropertiesCompletedEventHandler GetCompanyPropertiesCompleted;
    
    /// <remarks/>
    public event SetUserAsCompanyManagerCompletedEventHandler SetUserAsCompanyManagerCompleted;
    
    /// <remarks/>
    public event SetUserAsServiceProviderManagerCompletedEventHandler SetUserAsServiceProviderManagerCompleted;
    
    /// <remarks/>
    public event IsValidServiceProviderNameCompletedEventHandler IsValidServiceProviderNameCompleted;
    
    /// <remarks/>
    public event UpdateCompanyPropertiesCompletedEventHandler UpdateCompanyPropertiesCompleted;
    
    /// <remarks/>
    public event SetSystemSettingsCompletedEventHandler SetSystemSettingsCompleted;
    
    /// <remarks/>
    public event GetServerLanguageListCompletedEventHandler GetServerLanguageListCompleted;
    
    /// <remarks/>
    public event GetSystemSettingsCompletedEventHandler GetSystemSettingsCompleted;
    
    /// <remarks/>
    public event VerifySupportedVersionCompletedEventHandler VerifySupportedVersionCompleted;
    
    /// <remarks/>
    public event GetInstallationSettingsCompletedEventHandler GetInstallationSettingsCompleted;
    
    /// <remarks/>
    public event GetPresetListCompletedEventHandler GetPresetListCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryCollection", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxQueryCollectionResponse GetQueryCollection(string sessionId) {
        object[] results = this.Invoke("GetQueryCollection", new object[] {
                    sessionId});
        return ((CxQueryCollectionResponse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueryCollection(string sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueryCollection", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxQueryCollectionResponse EndGetQueryCollection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxQueryCollectionResponse)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueryCollectionAsync(string sessionId) {
        this.GetQueryCollectionAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void GetQueryCollectionAsync(string sessionId, object userState) {
        if ((this.GetQueryCollectionOperationCompleted == null)) {
            this.GetQueryCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryCollectionOperationCompleted);
        }
        this.InvokeAsync("GetQueryCollection", new object[] {
                    sessionId}, this.GetQueryCollectionOperationCompleted, userState);
    }
    
    private void OnGetQueryCollectionOperationCompleted(object arg) {
        if ((this.GetQueryCollectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueryCollectionCompleted(this, new GetQueryCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPresetDetails", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePresetDetails GetPresetDetails(string sessionId, long id) {
        object[] results = this.Invoke("GetPresetDetails", new object[] {
                    sessionId,
                    id});
        return ((CxWSResponsePresetDetails)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPresetDetails(string sessionId, long id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPresetDetails", new object[] {
                    sessionId,
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePresetDetails EndGetPresetDetails(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePresetDetails)(results[0]));
    }
    
    /// <remarks/>
    public void GetPresetDetailsAsync(string sessionId, long id) {
        this.GetPresetDetailsAsync(sessionId, id, null);
    }
    
    /// <remarks/>
    public void GetPresetDetailsAsync(string sessionId, long id, object userState) {
        if ((this.GetPresetDetailsOperationCompleted == null)) {
            this.GetPresetDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresetDetailsOperationCompleted);
        }
        this.InvokeAsync("GetPresetDetails", new object[] {
                    sessionId,
                    id}, this.GetPresetDetailsOperationCompleted, userState);
    }
    
    private void OnGetPresetDetailsOperationCompleted(object arg) {
        if ((this.GetPresetDetailsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPresetDetailsCompleted(this, new GetPresetDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewPreset", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePresetDetails CreateNewPreset(string sessionId, CxPresetDetails presrt) {
        object[] results = this.Invoke("CreateNewPreset", new object[] {
                    sessionId,
                    presrt});
        return ((CxWSResponsePresetDetails)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateNewPreset(string sessionId, CxPresetDetails presrt, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateNewPreset", new object[] {
                    sessionId,
                    presrt}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePresetDetails EndCreateNewPreset(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePresetDetails)(results[0]));
    }
    
    /// <remarks/>
    public void CreateNewPresetAsync(string sessionId, CxPresetDetails presrt) {
        this.CreateNewPresetAsync(sessionId, presrt, null);
    }
    
    /// <remarks/>
    public void CreateNewPresetAsync(string sessionId, CxPresetDetails presrt, object userState) {
        if ((this.CreateNewPresetOperationCompleted == null)) {
            this.CreateNewPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewPresetOperationCompleted);
        }
        this.InvokeAsync("CreateNewPreset", new object[] {
                    sessionId,
                    presrt}, this.CreateNewPresetOperationCompleted, userState);
    }
    
    private void OnCreateNewPresetOperationCompleted(object arg) {
        if ((this.CreateNewPresetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateNewPresetCompleted(this, new CreateNewPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdatePreset", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePresetDetails UpdatePreset(string sessionId, CxPresetDetails presrt) {
        object[] results = this.Invoke("UpdatePreset", new object[] {
                    sessionId,
                    presrt});
        return ((CxWSResponsePresetDetails)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdatePreset(string sessionId, CxPresetDetails presrt, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePreset", new object[] {
                    sessionId,
                    presrt}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePresetDetails EndUpdatePreset(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePresetDetails)(results[0]));
    }
    
    /// <remarks/>
    public void UpdatePresetAsync(string sessionId, CxPresetDetails presrt) {
        this.UpdatePresetAsync(sessionId, presrt, null);
    }
    
    /// <remarks/>
    public void UpdatePresetAsync(string sessionId, CxPresetDetails presrt, object userState) {
        if ((this.UpdatePresetOperationCompleted == null)) {
            this.UpdatePresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePresetOperationCompleted);
        }
        this.InvokeAsync("UpdatePreset", new object[] {
                    sessionId,
                    presrt}, this.UpdatePresetOperationCompleted, userState);
    }
    
    private void OnUpdatePresetOperationCompleted(object arg) {
        if ((this.UpdatePresetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdatePresetCompleted(this, new UpdatePresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeletePreset", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeletePreset(string sessionId, long id) {
        object[] results = this.Invoke("DeletePreset", new object[] {
                    sessionId,
                    id});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeletePreset(string sessionId, long id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeletePreset", new object[] {
                    sessionId,
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeletePreset(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeletePresetAsync(string sessionId, long id) {
        this.DeletePresetAsync(sessionId, id, null);
    }
    
    /// <remarks/>
    public void DeletePresetAsync(string sessionId, long id, object userState) {
        if ((this.DeletePresetOperationCompleted == null)) {
            this.DeletePresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePresetOperationCompleted);
        }
        this.InvokeAsync("DeletePreset", new object[] {
                    sessionId,
                    id}, this.DeletePresetOperationCompleted, userState);
    }
    
    private void OnDeletePresetOperationCompleted(object arg) {
        if ((this.DeletePresetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeletePresetCompleted(this, new DeletePresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidPresetName", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse IsValidPresetName(string sessionID, string presetName) {
        object[] results = this.Invoke("IsValidPresetName", new object[] {
                    sessionID,
                    presetName});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsValidPresetName(string sessionID, string presetName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsValidPresetName", new object[] {
                    sessionID,
                    presetName}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndIsValidPresetName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void IsValidPresetNameAsync(string sessionID, string presetName) {
        this.IsValidPresetNameAsync(sessionID, presetName, null);
    }
    
    /// <remarks/>
    public void IsValidPresetNameAsync(string sessionID, string presetName, object userState) {
        if ((this.IsValidPresetNameOperationCompleted == null)) {
            this.IsValidPresetNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidPresetNameOperationCompleted);
        }
        this.InvokeAsync("IsValidPresetName", new object[] {
                    sessionID,
                    presetName}, this.IsValidPresetNameOperationCompleted, userState);
    }
    
    private void OnIsValidPresetNameOperationCompleted(object arg) {
        if ((this.IsValidPresetNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsValidPresetNameCompleted(this, new IsValidPresetNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueriesForScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceQuerisForScan GetQueriesForScan(string sessionID, long scanId) {
        object[] results = this.Invoke("GetQueriesForScan", new object[] {
                    sessionID,
                    scanId});
        return ((CxWSResponceQuerisForScan)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueriesForScan(string sessionID, long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueriesForScan", new object[] {
                    sessionID,
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceQuerisForScan EndGetQueriesForScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceQuerisForScan)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueriesForScanAsync(string sessionID, long scanId) {
        this.GetQueriesForScanAsync(sessionID, scanId, null);
    }
    
    /// <remarks/>
    public void GetQueriesForScanAsync(string sessionID, long scanId, object userState) {
        if ((this.GetQueriesForScanOperationCompleted == null)) {
            this.GetQueriesForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueriesForScanOperationCompleted);
        }
        this.InvokeAsync("GetQueriesForScan", new object[] {
                    sessionID,
                    scanId}, this.GetQueriesForScanOperationCompleted, userState);
    }
    
    private void OnGetQueriesForScanOperationCompleted(object arg) {
        if ((this.GetQueriesForScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueriesForScanCompleted(this, new GetQueriesForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueriesForScanByRunId", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceQuerisForScanAndId GetQueriesForScanByRunId(string sessionID, string runId) {
        object[] results = this.Invoke("GetQueriesForScanByRunId", new object[] {
                    sessionID,
                    runId});
        return ((CxWSResponceQuerisForScanAndId)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueriesForScanByRunId(string sessionID, string runId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueriesForScanByRunId", new object[] {
                    sessionID,
                    runId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceQuerisForScanAndId EndGetQueriesForScanByRunId(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceQuerisForScanAndId)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueriesForScanByRunIdAsync(string sessionID, string runId) {
        this.GetQueriesForScanByRunIdAsync(sessionID, runId, null);
    }
    
    /// <remarks/>
    public void GetQueriesForScanByRunIdAsync(string sessionID, string runId, object userState) {
        if ((this.GetQueriesForScanByRunIdOperationCompleted == null)) {
            this.GetQueriesForScanByRunIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueriesForScanByRunIdOperationCompleted);
        }
        this.InvokeAsync("GetQueriesForScanByRunId", new object[] {
                    sessionID,
                    runId}, this.GetQueriesForScanByRunIdOperationCompleted, userState);
    }
    
    private void OnGetQueriesForScanByRunIdOperationCompleted(object arg) {
        if ((this.GetQueriesForScanByRunIdCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueriesForScanByRunIdCompleted(this, new GetQueriesForScanByRunIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForQuery", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceScanResults GetResultsForQuery(string sessionID, long scanId, long queryId) {
        object[] results = this.Invoke("GetResultsForQuery", new object[] {
                    sessionID,
                    scanId,
                    queryId});
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultsForQuery(string sessionID, long scanId, long queryId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultsForQuery", new object[] {
                    sessionID,
                    scanId,
                    queryId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceScanResults EndGetResultsForQuery(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultsForQueryAsync(string sessionID, long scanId, long queryId) {
        this.GetResultsForQueryAsync(sessionID, scanId, queryId, null);
    }
    
    /// <remarks/>
    public void GetResultsForQueryAsync(string sessionID, long scanId, long queryId, object userState) {
        if ((this.GetResultsForQueryOperationCompleted == null)) {
            this.GetResultsForQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForQueryOperationCompleted);
        }
        this.InvokeAsync("GetResultsForQuery", new object[] {
                    sessionID,
                    scanId,
                    queryId}, this.GetResultsForQueryOperationCompleted, userState);
    }
    
    private void OnGetResultsForQueryOperationCompleted(object arg) {
        if ((this.GetResultsForQueryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultsForQueryCompleted(this, new GetResultsForQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForQueryQroup", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceScanResults GetResultsForQueryQroup(string sessionID, long scanId, long queryGroupId) {
        object[] results = this.Invoke("GetResultsForQueryQroup", new object[] {
                    sessionID,
                    scanId,
                    queryGroupId});
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultsForQueryQroup(string sessionID, long scanId, long queryGroupId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultsForQueryQroup", new object[] {
                    sessionID,
                    scanId,
                    queryGroupId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceScanResults EndGetResultsForQueryQroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultsForQueryQroupAsync(string sessionID, long scanId, long queryGroupId) {
        this.GetResultsForQueryQroupAsync(sessionID, scanId, queryGroupId, null);
    }
    
    /// <remarks/>
    public void GetResultsForQueryQroupAsync(string sessionID, long scanId, long queryGroupId, object userState) {
        if ((this.GetResultsForQueryQroupOperationCompleted == null)) {
            this.GetResultsForQueryQroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForQueryQroupOperationCompleted);
        }
        this.InvokeAsync("GetResultsForQueryQroup", new object[] {
                    sessionID,
                    scanId,
                    queryGroupId}, this.GetResultsForQueryQroupOperationCompleted, userState);
    }
    
    private void OnGetResultsForQueryQroupOperationCompleted(object arg) {
        if ((this.GetResultsForQueryQroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultsForQueryQroupCompleted(this, new GetResultsForQueryQroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceScanResults GetResultsForScan(string sessionID, long scanId) {
        object[] results = this.Invoke("GetResultsForScan", new object[] {
                    sessionID,
                    scanId});
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultsForScan(string sessionID, long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultsForScan", new object[] {
                    sessionID,
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceScanResults EndGetResultsForScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultsForScanAsync(string sessionID, long scanId) {
        this.GetResultsForScanAsync(sessionID, scanId, null);
    }
    
    /// <remarks/>
    public void GetResultsForScanAsync(string sessionID, long scanId, object userState) {
        if ((this.GetResultsForScanOperationCompleted == null)) {
            this.GetResultsForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForScanOperationCompleted);
        }
        this.InvokeAsync("GetResultsForScan", new object[] {
                    sessionID,
                    scanId}, this.GetResultsForScanOperationCompleted, userState);
    }
    
    private void OnGetResultsForScanOperationCompleted(object arg) {
        if ((this.GetResultsForScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultsForScanCompleted(this, new GetResultsForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultPath", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceResultPath GetResultPath(string sessionId, long scanId, long pathId) {
        object[] results = this.Invoke("GetResultPath", new object[] {
                    sessionId,
                    scanId,
                    pathId});
        return ((CxWSResponceResultPath)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultPath(string sessionId, long scanId, long pathId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultPath", new object[] {
                    sessionId,
                    scanId,
                    pathId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceResultPath EndGetResultPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceResultPath)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultPathAsync(string sessionId, long scanId, long pathId) {
        this.GetResultPathAsync(sessionId, scanId, pathId, null);
    }
    
    /// <remarks/>
    public void GetResultPathAsync(string sessionId, long scanId, long pathId, object userState) {
        if ((this.GetResultPathOperationCompleted == null)) {
            this.GetResultPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultPathOperationCompleted);
        }
        this.InvokeAsync("GetResultPath", new object[] {
                    sessionId,
                    scanId,
                    pathId}, this.GetResultPathOperationCompleted, userState);
    }
    
    private void OnGetResultPathOperationCompleted(object arg) {
        if ((this.GetResultPathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultPathCompleted(this, new GetResultPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetFileNamesForPath", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceFileNames GetFileNamesForPath(string sessionId, long scanId, long pathId) {
        object[] results = this.Invoke("GetFileNamesForPath", new object[] {
                    sessionId,
                    scanId,
                    pathId});
        return ((CxWSResponceFileNames)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetFileNamesForPath(string sessionId, long scanId, long pathId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetFileNamesForPath", new object[] {
                    sessionId,
                    scanId,
                    pathId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceFileNames EndGetFileNamesForPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceFileNames)(results[0]));
    }
    
    /// <remarks/>
    public void GetFileNamesForPathAsync(string sessionId, long scanId, long pathId) {
        this.GetFileNamesForPathAsync(sessionId, scanId, pathId, null);
    }
    
    /// <remarks/>
    public void GetFileNamesForPathAsync(string sessionId, long scanId, long pathId, object userState) {
        if ((this.GetFileNamesForPathOperationCompleted == null)) {
            this.GetFileNamesForPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNamesForPathOperationCompleted);
        }
        this.InvokeAsync("GetFileNamesForPath", new object[] {
                    sessionId,
                    scanId,
                    pathId}, this.GetFileNamesForPathOperationCompleted, userState);
    }
    
    private void OnGetFileNamesForPathOperationCompleted(object arg) {
        if ((this.GetFileNamesForPathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetFileNamesForPathCompleted(this, new GetFileNamesForPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultPathsForQuery", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseResultPaths GetResultPathsForQuery(string sessionId, long scanId, long queryId) {
        object[] results = this.Invoke("GetResultPathsForQuery", new object[] {
                    sessionId,
                    scanId,
                    queryId});
        return ((CxWSResponseResultPaths)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultPathsForQuery(string sessionId, long scanId, long queryId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultPathsForQuery", new object[] {
                    sessionId,
                    scanId,
                    queryId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseResultPaths EndGetResultPathsForQuery(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseResultPaths)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultPathsForQueryAsync(string sessionId, long scanId, long queryId) {
        this.GetResultPathsForQueryAsync(sessionId, scanId, queryId, null);
    }
    
    /// <remarks/>
    public void GetResultPathsForQueryAsync(string sessionId, long scanId, long queryId, object userState) {
        if ((this.GetResultPathsForQueryOperationCompleted == null)) {
            this.GetResultPathsForQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultPathsForQueryOperationCompleted);
        }
        this.InvokeAsync("GetResultPathsForQuery", new object[] {
                    sessionId,
                    scanId,
                    queryId}, this.GetResultPathsForQueryOperationCompleted, userState);
    }
    
    private void OnGetResultPathsForQueryOperationCompleted(object arg) {
        if ((this.GetResultPathsForQueryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultPathsForQueryCompleted(this, new GetResultPathsForQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsBySeverity", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceScanResults GetResultsBySeverity(string sessionId, long scanId, int Severity) {
        object[] results = this.Invoke("GetResultsBySeverity", new object[] {
                    sessionId,
                    scanId,
                    Severity});
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultsBySeverity(string sessionId, long scanId, int Severity, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultsBySeverity", new object[] {
                    sessionId,
                    scanId,
                    Severity}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceScanResults EndGetResultsBySeverity(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultsBySeverityAsync(string sessionId, long scanId, int Severity) {
        this.GetResultsBySeverityAsync(sessionId, scanId, Severity, null);
    }
    
    /// <remarks/>
    public void GetResultsBySeverityAsync(string sessionId, long scanId, int Severity, object userState) {
        if ((this.GetResultsBySeverityOperationCompleted == null)) {
            this.GetResultsBySeverityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsBySeverityOperationCompleted);
        }
        this.InvokeAsync("GetResultsBySeverity", new object[] {
                    sessionId,
                    scanId,
                    Severity}, this.GetResultsBySeverityOperationCompleted, userState);
    }
    
    private void OnGetResultsBySeverityOperationCompleted(object arg) {
        if ((this.GetResultsBySeverityCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultsBySeverityCompleted(this, new GetResultsBySeverityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SavePredefinedCommands", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SavePredefinedCommands(string sessionID, CxPredefinedCommand[] predefinedCommands) {
        object[] results = this.Invoke("SavePredefinedCommands", new object[] {
                    sessionID,
                    predefinedCommands});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSavePredefinedCommands(string sessionID, CxPredefinedCommand[] predefinedCommands, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SavePredefinedCommands", new object[] {
                    sessionID,
                    predefinedCommands}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSavePredefinedCommands(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SavePredefinedCommandsAsync(string sessionID, CxPredefinedCommand[] predefinedCommands) {
        this.SavePredefinedCommandsAsync(sessionID, predefinedCommands, null);
    }
    
    /// <remarks/>
    public void SavePredefinedCommandsAsync(string sessionID, CxPredefinedCommand[] predefinedCommands, object userState) {
        if ((this.SavePredefinedCommandsOperationCompleted == null)) {
            this.SavePredefinedCommandsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePredefinedCommandsOperationCompleted);
        }
        this.InvokeAsync("SavePredefinedCommands", new object[] {
                    sessionID,
                    predefinedCommands}, this.SavePredefinedCommandsOperationCompleted, userState);
    }
    
    private void OnSavePredefinedCommandsOperationCompleted(object arg) {
        if ((this.SavePredefinedCommandsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SavePredefinedCommandsCompleted(this, new SavePredefinedCommandsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPredefinedCommands", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePredefinedCommands GetPredefinedCommands(string sessionId) {
        object[] results = this.Invoke("GetPredefinedCommands", new object[] {
                    sessionId});
        return ((CxWSResponsePredefinedCommands)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPredefinedCommands(string sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPredefinedCommands", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePredefinedCommands EndGetPredefinedCommands(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePredefinedCommands)(results[0]));
    }
    
    /// <remarks/>
    public void GetPredefinedCommandsAsync(string sessionId) {
        this.GetPredefinedCommandsAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void GetPredefinedCommandsAsync(string sessionId, object userState) {
        if ((this.GetPredefinedCommandsOperationCompleted == null)) {
            this.GetPredefinedCommandsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPredefinedCommandsOperationCompleted);
        }
        this.InvokeAsync("GetPredefinedCommands", new object[] {
                    sessionId}, this.GetPredefinedCommandsOperationCompleted, userState);
    }
    
    private void OnGetPredefinedCommandsOperationCompleted(object arg) {
        if ((this.GetPredefinedCommandsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPredefinedCommandsCompleted(this, new GetPredefinedCommandsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetExecutableList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseNameList GetExecutableList(string sessionId) {
        object[] results = this.Invoke("GetExecutableList", new object[] {
                    sessionId});
        return ((CxWSResponseNameList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetExecutableList(string sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetExecutableList", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseNameList EndGetExecutableList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseNameList)(results[0]));
    }
    
    /// <remarks/>
    public void GetExecutableListAsync(string sessionId) {
        this.GetExecutableListAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void GetExecutableListAsync(string sessionId, object userState) {
        if ((this.GetExecutableListOperationCompleted == null)) {
            this.GetExecutableListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExecutableListOperationCompleted);
        }
        this.InvokeAsync("GetExecutableList", new object[] {
                    sessionId}, this.GetExecutableListOperationCompleted, userState);
    }
    
    private void OnGetExecutableListOperationCompleted(object arg) {
        if ((this.GetExecutableListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetExecutableListCompleted(this, new GetExecutableListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdatePermission", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdatePermission(string sessionID, CxPermission permission, string teamId) {
        object[] results = this.Invoke("UpdatePermission", new object[] {
                    sessionID,
                    permission,
                    teamId});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdatePermission(string sessionID, CxPermission permission, string teamId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePermission", new object[] {
                    sessionID,
                    permission,
                    teamId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdatePermission(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdatePermissionAsync(string sessionID, CxPermission permission, string teamId) {
        this.UpdatePermissionAsync(sessionID, permission, teamId, null);
    }
    
    /// <remarks/>
    public void UpdatePermissionAsync(string sessionID, CxPermission permission, string teamId, object userState) {
        if ((this.UpdatePermissionOperationCompleted == null)) {
            this.UpdatePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePermissionOperationCompleted);
        }
        this.InvokeAsync("UpdatePermission", new object[] {
                    sessionID,
                    permission,
                    teamId}, this.UpdatePermissionOperationCompleted, userState);
    }
    
    private void OnUpdatePermissionOperationCompleted(object arg) {
        if ((this.UpdatePermissionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdatePermissionCompleted(this, new UpdatePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectAssignUsers", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseUserData GetProjectAssignUsers(string sessionID, long projectId) {
        object[] results = this.Invoke("GetProjectAssignUsers", new object[] {
                    sessionID,
                    projectId});
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectAssignUsers(string sessionID, long projectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectAssignUsers", new object[] {
                    sessionID,
                    projectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseUserData EndGetProjectAssignUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectAssignUsersAsync(string sessionID, long projectId) {
        this.GetProjectAssignUsersAsync(sessionID, projectId, null);
    }
    
    /// <remarks/>
    public void GetProjectAssignUsersAsync(string sessionID, long projectId, object userState) {
        if ((this.GetProjectAssignUsersOperationCompleted == null)) {
            this.GetProjectAssignUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectAssignUsersOperationCompleted);
        }
        this.InvokeAsync("GetProjectAssignUsers", new object[] {
                    sessionID,
                    projectId}, this.GetProjectAssignUsersOperationCompleted, userState);
    }
    
    private void OnGetProjectAssignUsersOperationCompleted(object arg) {
        if ((this.GetProjectAssignUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectAssignUsersCompleted(this, new GetProjectAssignUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsAllowAutoSignIn", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseBool IsAllowAutoSignIn() {
        object[] results = this.Invoke("IsAllowAutoSignIn", new object[0]);
        return ((CxWSResponseBool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsAllowAutoSignIn(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsAllowAutoSignIn", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseBool EndIsAllowAutoSignIn(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseBool)(results[0]));
    }
    
    /// <remarks/>
    public void IsAllowAutoSignInAsync() {
        this.IsAllowAutoSignInAsync(null);
    }
    
    /// <remarks/>
    public void IsAllowAutoSignInAsync(object userState) {
        if ((this.IsAllowAutoSignInOperationCompleted == null)) {
            this.IsAllowAutoSignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAllowAutoSignInOperationCompleted);
        }
        this.InvokeAsync("IsAllowAutoSignIn", new object[0], this.IsAllowAutoSignInOperationCompleted, userState);
    }
    
    private void OnIsAllowAutoSignInOperationCompleted(object arg) {
        if ((this.IsAllowAutoSignInCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsAllowAutoSignInCompleted(this, new IsAllowAutoSignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPivotData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePivotTable GetPivotData(string SessionID, PivotViewClientType viewType) {
        object[] results = this.Invoke("GetPivotData", new object[] {
                    SessionID,
                    viewType});
        return ((CxWSResponsePivotTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPivotData(string SessionID, PivotViewClientType viewType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPivotData", new object[] {
                    SessionID,
                    viewType}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePivotTable EndGetPivotData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePivotTable)(results[0]));
    }
    
    /// <remarks/>
    public void GetPivotDataAsync(string SessionID, PivotViewClientType viewType) {
        this.GetPivotDataAsync(SessionID, viewType, null);
    }
    
    /// <remarks/>
    public void GetPivotDataAsync(string SessionID, PivotViewClientType viewType, object userState) {
        if ((this.GetPivotDataOperationCompleted == null)) {
            this.GetPivotDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPivotDataOperationCompleted);
        }
        this.InvokeAsync("GetPivotData", new object[] {
                    SessionID,
                    viewType}, this.GetPivotDataOperationCompleted, userState);
    }
    
    private void OnGetPivotDataOperationCompleted(object arg) {
        if ((this.GetPivotDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPivotDataCompleted(this, new GetPivotDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPivotLayouts", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePivotLayouts GetPivotLayouts(string SessionID) {
        object[] results = this.Invoke("GetPivotLayouts", new object[] {
                    SessionID});
        return ((CxWSResponsePivotLayouts)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPivotLayouts(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPivotLayouts", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePivotLayouts EndGetPivotLayouts(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePivotLayouts)(results[0]));
    }
    
    /// <remarks/>
    public void GetPivotLayoutsAsync(string SessionID) {
        this.GetPivotLayoutsAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetPivotLayoutsAsync(string SessionID, object userState) {
        if ((this.GetPivotLayoutsOperationCompleted == null)) {
            this.GetPivotLayoutsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPivotLayoutsOperationCompleted);
        }
        this.InvokeAsync("GetPivotLayouts", new object[] {
                    SessionID}, this.GetPivotLayoutsOperationCompleted, userState);
    }
    
    private void OnGetPivotLayoutsOperationCompleted(object arg) {
        if ((this.GetPivotLayoutsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPivotLayoutsCompleted(this, new GetPivotLayoutsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SavePivotLayout", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SavePivotLayout(string SessionID, CxPivotLayout layout) {
        object[] results = this.Invoke("SavePivotLayout", new object[] {
                    SessionID,
                    layout});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSavePivotLayout(string SessionID, CxPivotLayout layout, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SavePivotLayout", new object[] {
                    SessionID,
                    layout}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSavePivotLayout(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SavePivotLayoutAsync(string SessionID, CxPivotLayout layout) {
        this.SavePivotLayoutAsync(SessionID, layout, null);
    }
    
    /// <remarks/>
    public void SavePivotLayoutAsync(string SessionID, CxPivotLayout layout, object userState) {
        if ((this.SavePivotLayoutOperationCompleted == null)) {
            this.SavePivotLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePivotLayoutOperationCompleted);
        }
        this.InvokeAsync("SavePivotLayout", new object[] {
                    SessionID,
                    layout}, this.SavePivotLayoutOperationCompleted, userState);
    }
    
    private void OnSavePivotLayoutOperationCompleted(object arg) {
        if ((this.SavePivotLayoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SavePivotLayoutCompleted(this, new SavePivotLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeletePivotLayout", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeletePivotLayout(string SessionID, long LayoutID) {
        object[] results = this.Invoke("DeletePivotLayout", new object[] {
                    SessionID,
                    LayoutID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeletePivotLayout(string SessionID, long LayoutID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeletePivotLayout", new object[] {
                    SessionID,
                    LayoutID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeletePivotLayout(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeletePivotLayoutAsync(string SessionID, long LayoutID) {
        this.DeletePivotLayoutAsync(SessionID, LayoutID, null);
    }
    
    /// <remarks/>
    public void DeletePivotLayoutAsync(string SessionID, long LayoutID, object userState) {
        if ((this.DeletePivotLayoutOperationCompleted == null)) {
            this.DeletePivotLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePivotLayoutOperationCompleted);
        }
        this.InvokeAsync("DeletePivotLayout", new object[] {
                    SessionID,
                    LayoutID}, this.DeletePivotLayoutOperationCompleted, userState);
    }
    
    private void OnDeletePivotLayoutOperationCompleted(object arg) {
        if ((this.DeletePivotLayoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeletePivotLayoutCompleted(this, new DeletePivotLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RegisterSaasPendingUser", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse RegisterSaasPendingUser(SaasPendingUser pendingUser, string activationPageUrl) {
        object[] results = this.Invoke("RegisterSaasPendingUser", new object[] {
                    pendingUser,
                    activationPageUrl});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRegisterSaasPendingUser(SaasPendingUser pendingUser, string activationPageUrl, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RegisterSaasPendingUser", new object[] {
                    pendingUser,
                    activationPageUrl}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndRegisterSaasPendingUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void RegisterSaasPendingUserAsync(SaasPendingUser pendingUser, string activationPageUrl) {
        this.RegisterSaasPendingUserAsync(pendingUser, activationPageUrl, null);
    }
    
    /// <remarks/>
    public void RegisterSaasPendingUserAsync(SaasPendingUser pendingUser, string activationPageUrl, object userState) {
        if ((this.RegisterSaasPendingUserOperationCompleted == null)) {
            this.RegisterSaasPendingUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterSaasPendingUserOperationCompleted);
        }
        this.InvokeAsync("RegisterSaasPendingUser", new object[] {
                    pendingUser,
                    activationPageUrl}, this.RegisterSaasPendingUserOperationCompleted, userState);
    }
    
    private void OnRegisterSaasPendingUserOperationCompleted(object arg) {
        if ((this.RegisterSaasPendingUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RegisterSaasPendingUserCompleted(this, new RegisterSaasPendingUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ActivateSaasUser", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSaasLoginData ActivateSaasUser(string userToken) {
        object[] results = this.Invoke("ActivateSaasUser", new object[] {
                    userToken});
        return ((CxWSResponseSaasLoginData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginActivateSaasUser(string userToken, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ActivateSaasUser", new object[] {
                    userToken}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSaasLoginData EndActivateSaasUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSaasLoginData)(results[0]));
    }
    
    /// <remarks/>
    public void ActivateSaasUserAsync(string userToken) {
        this.ActivateSaasUserAsync(userToken, null);
    }
    
    /// <remarks/>
    public void ActivateSaasUserAsync(string userToken, object userState) {
        if ((this.ActivateSaasUserOperationCompleted == null)) {
            this.ActivateSaasUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateSaasUserOperationCompleted);
        }
        this.InvokeAsync("ActivateSaasUser", new object[] {
                    userToken}, this.ActivateSaasUserOperationCompleted, userState);
    }
    
    private void OnActivateSaasUserOperationCompleted(object arg) {
        if ((this.ActivateSaasUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ActivateSaasUserCompleted(this, new ActivateSaasUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSaasPackages", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSaasPackage GetSaasPackages() {
        object[] results = this.Invoke("GetSaasPackages", new object[0]);
        return ((CxWSResponseSaasPackage)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSaasPackages(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSaasPackages", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSaasPackage EndGetSaasPackages(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSaasPackage)(results[0]));
    }
    
    /// <remarks/>
    public void GetSaasPackagesAsync() {
        this.GetSaasPackagesAsync(null);
    }
    
    /// <remarks/>
    public void GetSaasPackagesAsync(object userState) {
        if ((this.GetSaasPackagesOperationCompleted == null)) {
            this.GetSaasPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSaasPackagesOperationCompleted);
        }
        this.InvokeAsync("GetSaasPackages", new object[0], this.GetSaasPackagesOperationCompleted, userState);
    }
    
    private void OnGetSaasPackagesOperationCompleted(object arg) {
        if ((this.GetSaasPackagesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSaasPackagesCompleted(this, new GetSaasPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SaasLogin", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSaasLoginData SaasLogin(Credentials applicationCredentials) {
        object[] results = this.Invoke("SaasLogin", new object[] {
                    applicationCredentials});
        return ((CxWSResponseSaasLoginData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSaasLogin(Credentials applicationCredentials, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SaasLogin", new object[] {
                    applicationCredentials}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSaasLoginData EndSaasLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSaasLoginData)(results[0]));
    }
    
    /// <remarks/>
    public void SaasLoginAsync(Credentials applicationCredentials) {
        this.SaasLoginAsync(applicationCredentials, null);
    }
    
    /// <remarks/>
    public void SaasLoginAsync(Credentials applicationCredentials, object userState) {
        if ((this.SaasLoginOperationCompleted == null)) {
            this.SaasLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaasLoginOperationCompleted);
        }
        this.InvokeAsync("SaasLogin", new object[] {
                    applicationCredentials}, this.SaasLoginOperationCompleted, userState);
    }
    
    private void OnSaasLoginOperationCompleted(object arg) {
        if ((this.SaasLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SaasLoginCompleted(this, new SaasLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetEngineServers", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseEngineServers GetEngineServers(string sessionID) {
        object[] results = this.Invoke("GetEngineServers", new object[] {
                    sessionID});
        return ((CxWSResponseEngineServers)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEngineServers(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEngineServers", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseEngineServers EndGetEngineServers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseEngineServers)(results[0]));
    }
    
    /// <remarks/>
    public void GetEngineServersAsync(string sessionID) {
        this.GetEngineServersAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetEngineServersAsync(string sessionID, object userState) {
        if ((this.GetEngineServersOperationCompleted == null)) {
            this.GetEngineServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEngineServersOperationCompleted);
        }
        this.InvokeAsync("GetEngineServers", new object[] {
                    sessionID}, this.GetEngineServersOperationCompleted, userState);
    }
    
    private void OnGetEngineServersOperationCompleted(object arg) {
        if ((this.GetEngineServersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetEngineServersCompleted(this, new GetEngineServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateEngineServer", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateEngineServer(string sessionID, CxEngineServer engine) {
        object[] results = this.Invoke("UpdateEngineServer", new object[] {
                    sessionID,
                    engine});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateEngineServer(string sessionID, CxEngineServer engine, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateEngineServer", new object[] {
                    sessionID,
                    engine}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateEngineServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateEngineServerAsync(string sessionID, CxEngineServer engine) {
        this.UpdateEngineServerAsync(sessionID, engine, null);
    }
    
    /// <remarks/>
    public void UpdateEngineServerAsync(string sessionID, CxEngineServer engine, object userState) {
        if ((this.UpdateEngineServerOperationCompleted == null)) {
            this.UpdateEngineServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEngineServerOperationCompleted);
        }
        this.InvokeAsync("UpdateEngineServer", new object[] {
                    sessionID,
                    engine}, this.UpdateEngineServerOperationCompleted, userState);
    }
    
    private void OnUpdateEngineServerOperationCompleted(object arg) {
        if ((this.UpdateEngineServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateEngineServerCompleted(this, new UpdateEngineServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateEngineServer", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseEngineServerId CreateEngineServer(string sessionID, CxEngineServer engine) {
        object[] results = this.Invoke("CreateEngineServer", new object[] {
                    sessionID,
                    engine});
        return ((CxWSResponseEngineServerId)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateEngineServer(string sessionID, CxEngineServer engine, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateEngineServer", new object[] {
                    sessionID,
                    engine}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseEngineServerId EndCreateEngineServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseEngineServerId)(results[0]));
    }
    
    /// <remarks/>
    public void CreateEngineServerAsync(string sessionID, CxEngineServer engine) {
        this.CreateEngineServerAsync(sessionID, engine, null);
    }
    
    /// <remarks/>
    public void CreateEngineServerAsync(string sessionID, CxEngineServer engine, object userState) {
        if ((this.CreateEngineServerOperationCompleted == null)) {
            this.CreateEngineServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEngineServerOperationCompleted);
        }
        this.InvokeAsync("CreateEngineServer", new object[] {
                    sessionID,
                    engine}, this.CreateEngineServerOperationCompleted, userState);
    }
    
    private void OnCreateEngineServerOperationCompleted(object arg) {
        if ((this.CreateEngineServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateEngineServerCompleted(this, new CreateEngineServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteEngineServer", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteEngineServer(string sessionID, long id) {
        object[] results = this.Invoke("DeleteEngineServer", new object[] {
                    sessionID,
                    id});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteEngineServer(string sessionID, long id, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteEngineServer", new object[] {
                    sessionID,
                    id}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteEngineServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteEngineServerAsync(string sessionID, long id) {
        this.DeleteEngineServerAsync(sessionID, id, null);
    }
    
    /// <remarks/>
    public void DeleteEngineServerAsync(string sessionID, long id, object userState) {
        if ((this.DeleteEngineServerOperationCompleted == null)) {
            this.DeleteEngineServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEngineServerOperationCompleted);
        }
        this.InvokeAsync("DeleteEngineServer", new object[] {
                    sessionID,
                    id}, this.DeleteEngineServerOperationCompleted, userState);
    }
    
    private void OnDeleteEngineServerOperationCompleted(object arg) {
        if ((this.DeleteEngineServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteEngineServerCompleted(this, new DeleteEngineServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Scan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseRunID Scan(string sessionId, CliScanArgs args) {
        object[] results = this.Invoke("Scan", new object[] {
                    sessionId,
                    args});
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginScan(string sessionId, CliScanArgs args, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Scan", new object[] {
                    sessionId,
                    args}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseRunID EndScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public void ScanAsync(string sessionId, CliScanArgs args) {
        this.ScanAsync(sessionId, args, null);
    }
    
    /// <remarks/>
    public void ScanAsync(string sessionId, CliScanArgs args, object userState) {
        if ((this.ScanOperationCompleted == null)) {
            this.ScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScanOperationCompleted);
        }
        this.InvokeAsync("Scan", new object[] {
                    sessionId,
                    args}, this.ScanOperationCompleted, userState);
    }
    
    private void OnScanOperationCompleted(object arg) {
        if ((this.ScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ScanCompleted(this, new ScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsWithScans", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectsScansList GetProjectsWithScans(string sessionId) {
        object[] results = this.Invoke("GetProjectsWithScans", new object[] {
                    sessionId});
        return ((CxWSResponseProjectsScansList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectsWithScans(string sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectsWithScans", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectsScansList EndGetProjectsWithScans(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectsScansList)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectsWithScansAsync(string sessionId) {
        this.GetProjectsWithScansAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void GetProjectsWithScansAsync(string sessionId, object userState) {
        if ((this.GetProjectsWithScansOperationCompleted == null)) {
            this.GetProjectsWithScansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsWithScansOperationCompleted);
        }
        this.InvokeAsync("GetProjectsWithScans", new object[] {
                    sessionId}, this.GetProjectsWithScansOperationCompleted, userState);
    }
    
    private void OnGetProjectsWithScansOperationCompleted(object arg) {
        if ((this.GetProjectsWithScansCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectsWithScansCompleted(this, new GetProjectsWithScansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UploadProjectWithDefaultSettings", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSourceID UploadProjectWithDefaultSettings(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer) {
        object[] results = this.Invoke("UploadProjectWithDefaultSettings", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer});
        return ((CxWSResponseSourceID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUploadProjectWithDefaultSettings(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadProjectWithDefaultSettings", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSourceID EndUploadProjectWithDefaultSettings(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSourceID)(results[0]));
    }
    
    /// <remarks/>
    public void UploadProjectWithDefaultSettingsAsync(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer) {
        this.UploadProjectWithDefaultSettingsAsync(sessionId, projectSettings, localCodeContainer, null);
    }
    
    /// <remarks/>
    public void UploadProjectWithDefaultSettingsAsync(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer, object userState) {
        if ((this.UploadProjectWithDefaultSettingsOperationCompleted == null)) {
            this.UploadProjectWithDefaultSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProjectWithDefaultSettingsOperationCompleted);
        }
        this.InvokeAsync("UploadProjectWithDefaultSettings", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer}, this.UploadProjectWithDefaultSettingsOperationCompleted, userState);
    }
    
    private void OnUploadProjectWithDefaultSettingsOperationCompleted(object arg) {
        if ((this.UploadProjectWithDefaultSettingsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadProjectWithDefaultSettingsCompleted(this, new UploadProjectWithDefaultSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourceCodeForScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSourceContainer GetSourceCodeForScan(long scanId) {
        object[] results = this.Invoke("GetSourceCodeForScan", new object[] {
                    scanId});
        return ((CxWSResponseSourceContainer)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSourceCodeForScan(long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSourceCodeForScan", new object[] {
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSourceContainer EndGetSourceCodeForScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSourceContainer)(results[0]));
    }
    
    /// <remarks/>
    public void GetSourceCodeForScanAsync(long scanId) {
        this.GetSourceCodeForScanAsync(scanId, null);
    }
    
    /// <remarks/>
    public void GetSourceCodeForScanAsync(long scanId, object userState) {
        if ((this.GetSourceCodeForScanOperationCompleted == null)) {
            this.GetSourceCodeForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceCodeForScanOperationCompleted);
        }
        this.InvokeAsync("GetSourceCodeForScan", new object[] {
                    scanId}, this.GetSourceCodeForScanOperationCompleted, userState);
    }
    
    private void OnGetSourceCodeForScanOperationCompleted(object arg) {
        if ((this.GetSourceCodeForScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSourceCodeForScanCompleted(this, new GetSourceCodeForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryCollectionForLanguage", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxQueryCollectionResponse GetQueryCollectionForLanguage(string sessionId, int projectType, long projectId) {
        object[] results = this.Invoke("GetQueryCollectionForLanguage", new object[] {
                    sessionId,
                    projectType,
                    projectId});
        return ((CxQueryCollectionResponse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueryCollectionForLanguage(string sessionId, int projectType, long projectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueryCollectionForLanguage", new object[] {
                    sessionId,
                    projectType,
                    projectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxQueryCollectionResponse EndGetQueryCollectionForLanguage(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxQueryCollectionResponse)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueryCollectionForLanguageAsync(string sessionId, int projectType, long projectId) {
        this.GetQueryCollectionForLanguageAsync(sessionId, projectType, projectId, null);
    }
    
    /// <remarks/>
    public void GetQueryCollectionForLanguageAsync(string sessionId, int projectType, long projectId, object userState) {
        if ((this.GetQueryCollectionForLanguageOperationCompleted == null)) {
            this.GetQueryCollectionForLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryCollectionForLanguageOperationCompleted);
        }
        this.InvokeAsync("GetQueryCollectionForLanguage", new object[] {
                    sessionId,
                    projectType,
                    projectId}, this.GetQueryCollectionForLanguageOperationCompleted, userState);
    }
    
    private void OnGetQueryCollectionForLanguageOperationCompleted(object arg) {
        if ((this.GetQueryCollectionForLanguageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueryCollectionForLanguageCompleted(this, new GetQueryCollectionForLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UploadQueries", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UploadQueries(string sessionId, CxWSQueryGroup[] queries) {
        object[] results = this.Invoke("UploadQueries", new object[] {
                    sessionId,
                    queries});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUploadQueries(string sessionId, CxWSQueryGroup[] queries, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadQueries", new object[] {
                    sessionId,
                    queries}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUploadQueries(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UploadQueriesAsync(string sessionId, CxWSQueryGroup[] queries) {
        this.UploadQueriesAsync(sessionId, queries, null);
    }
    
    /// <remarks/>
    public void UploadQueriesAsync(string sessionId, CxWSQueryGroup[] queries, object userState) {
        if ((this.UploadQueriesOperationCompleted == null)) {
            this.UploadQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadQueriesOperationCompleted);
        }
        this.InvokeAsync("UploadQueries", new object[] {
                    sessionId,
                    queries}, this.UploadQueriesOperationCompleted, userState);
    }
    
    private void OnUploadQueriesOperationCompleted(object arg) {
        if ((this.UploadQueriesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadQueriesCompleted(this, new UploadQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/AddScanResultsToProject", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseBasicScanData AddScanResultsToProject(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment) {
        object[] results = this.Invoke("AddScanResultsToProject", new object[] {
                    sessionId,
                    projectId,
                    sourceId,
                    resultsCollection,
                    comment});
        return ((CxWSResponseBasicScanData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddScanResultsToProject(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddScanResultsToProject", new object[] {
                    sessionId,
                    projectId,
                    sourceId,
                    resultsCollection,
                    comment}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseBasicScanData EndAddScanResultsToProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseBasicScanData)(results[0]));
    }
    
    /// <remarks/>
    public void AddScanResultsToProjectAsync(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment) {
        this.AddScanResultsToProjectAsync(sessionId, projectId, sourceId, resultsCollection, comment, null);
    }
    
    /// <remarks/>
    public void AddScanResultsToProjectAsync(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment, object userState) {
        if ((this.AddScanResultsToProjectOperationCompleted == null)) {
            this.AddScanResultsToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScanResultsToProjectOperationCompleted);
        }
        this.InvokeAsync("AddScanResultsToProject", new object[] {
                    sessionId,
                    projectId,
                    sourceId,
                    resultsCollection,
                    comment}, this.AddScanResultsToProjectOperationCompleted, userState);
    }
    
    private void OnAddScanResultsToProjectOperationCompleted(object arg) {
        if ((this.AddScanResultsToProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddScanResultsToProjectCompleted(this, new AddScanResultsToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResults", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseResultCollection GetResults(string sessionId, long scanId) {
        object[] results = this.Invoke("GetResults", new object[] {
                    sessionId,
                    scanId});
        return ((CxWSResponseResultCollection)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResults(string sessionId, long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResults", new object[] {
                    sessionId,
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseResultCollection EndGetResults(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseResultCollection)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultsAsync(string sessionId, long scanId) {
        this.GetResultsAsync(sessionId, scanId, null);
    }
    
    /// <remarks/>
    public void GetResultsAsync(string sessionId, long scanId, object userState) {
        if ((this.GetResultsOperationCompleted == null)) {
            this.GetResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsOperationCompleted);
        }
        this.InvokeAsync("GetResults", new object[] {
                    sessionId,
                    scanId}, this.GetResultsOperationCompleted, userState);
    }
    
    private void OnGetResultsOperationCompleted(object arg) {
        if ((this.GetResultsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultsCompleted(this, new GetResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultSummary", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CXWSResponseResultSummary GetResultSummary(string sessionId, long scanId) {
        object[] results = this.Invoke("GetResultSummary", new object[] {
                    sessionId,
                    scanId});
        return ((CXWSResponseResultSummary)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultSummary(string sessionId, long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultSummary", new object[] {
                    sessionId,
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CXWSResponseResultSummary EndGetResultSummary(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CXWSResponseResultSummary)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultSummaryAsync(string sessionId, long scanId) {
        this.GetResultSummaryAsync(sessionId, scanId, null);
    }
    
    /// <remarks/>
    public void GetResultSummaryAsync(string sessionId, long scanId, object userState) {
        if ((this.GetResultSummaryOperationCompleted == null)) {
            this.GetResultSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultSummaryOperationCompleted);
        }
        this.InvokeAsync("GetResultSummary", new object[] {
                    sessionId,
                    scanId}, this.GetResultSummaryOperationCompleted, userState);
    }
    
    private void OnGetResultSummaryOperationCompleted(object arg) {
        if ((this.GetResultSummaryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultSummaryCompleted(this, new GetResultSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCache", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseCache GetCache(string sessionId, long scanId) {
        object[] results = this.Invoke("GetCache", new object[] {
                    sessionId,
                    scanId});
        return ((CxWSResponseCache)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCache(string sessionId, long scanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCache", new object[] {
                    sessionId,
                    scanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseCache EndGetCache(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseCache)(results[0]));
    }
    
    /// <remarks/>
    public void GetCacheAsync(string sessionId, long scanId) {
        this.GetCacheAsync(sessionId, scanId, null);
    }
    
    /// <remarks/>
    public void GetCacheAsync(string sessionId, long scanId, object userState) {
        if ((this.GetCacheOperationCompleted == null)) {
            this.GetCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCacheOperationCompleted);
        }
        this.InvokeAsync("GetCache", new object[] {
                    sessionId,
                    scanId}, this.GetCacheOperationCompleted, userState);
    }
    
    private void OnGetCacheOperationCompleted(object arg) {
        if ((this.GetCacheCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCacheCompleted(this, new GetCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Login", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseLoginData Login(Credentials applicationCredentials) {
        object[] results = this.Invoke("Login", new object[] {
                    applicationCredentials});
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogin(Credentials applicationCredentials, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Login", new object[] {
                    applicationCredentials}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseLoginData EndLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public void LoginAsync(Credentials applicationCredentials) {
        this.LoginAsync(applicationCredentials, null);
    }
    
    /// <remarks/>
    public void LoginAsync(Credentials applicationCredentials, object userState) {
        if ((this.LoginOperationCompleted == null)) {
            this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
        }
        this.InvokeAsync("Login", new object[] {
                    applicationCredentials}, this.LoginOperationCompleted, userState);
    }
    
    private void OnLoginOperationCompleted(object arg) {
        if ((this.LoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SsoLogin", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseLoginData SsoLogin(Credentials encryptedCredentials) {
        object[] results = this.Invoke("SsoLogin", new object[] {
                    encryptedCredentials});
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSsoLogin(Credentials encryptedCredentials, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SsoLogin", new object[] {
                    encryptedCredentials}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseLoginData EndSsoLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseLoginData)(results[0]));
    }
    
    /// <remarks/>
    public void SsoLoginAsync(Credentials encryptedCredentials) {
        this.SsoLoginAsync(encryptedCredentials, null);
    }
    
    /// <remarks/>
    public void SsoLoginAsync(Credentials encryptedCredentials, object userState) {
        if ((this.SsoLoginOperationCompleted == null)) {
            this.SsoLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSsoLoginOperationCompleted);
        }
        this.InvokeAsync("SsoLogin", new object[] {
                    encryptedCredentials}, this.SsoLoginOperationCompleted, userState);
    }
    
    private void OnSsoLoginOperationCompleted(object arg) {
        if ((this.SsoLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SsoLoginCompleted(this, new SsoLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Logout", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse Logout(string sessionID) {
        object[] results = this.Invoke("Logout", new object[] {
                    sessionID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogout(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Logout", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndLogout(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void LogoutAsync(string sessionID) {
        this.LogoutAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void LogoutAsync(string sessionID, object userState) {
        if ((this.LogoutOperationCompleted == null)) {
            this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
        }
        this.InvokeAsync("Logout", new object[] {
                    sessionID}, this.LogoutOperationCompleted, userState);
    }
    
    private void OnLogoutOperationCompleted(object arg) {
        if ((this.LogoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAssociatedGroupsList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseGroupList GetAssociatedGroupsList(string SessionID) {
        object[] results = this.Invoke("GetAssociatedGroupsList", new object[] {
                    SessionID});
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAssociatedGroupsList(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAssociatedGroupsList", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseGroupList EndGetAssociatedGroupsList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public void GetAssociatedGroupsListAsync(string SessionID) {
        this.GetAssociatedGroupsListAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetAssociatedGroupsListAsync(string SessionID, object userState) {
        if ((this.GetAssociatedGroupsListOperationCompleted == null)) {
            this.GetAssociatedGroupsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssociatedGroupsListOperationCompleted);
        }
        this.InvokeAsync("GetAssociatedGroupsList", new object[] {
                    SessionID}, this.GetAssociatedGroupsListOperationCompleted, userState);
    }
    
    private void OnGetAssociatedGroupsListOperationCompleted(object arg) {
        if ((this.GetAssociatedGroupsListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAssociatedGroupsListCompleted(this, new GetAssociatedGroupsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetConfigurationSetList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseConfigSetList GetConfigurationSetList(string SessionID) {
        object[] results = this.Invoke("GetConfigurationSetList", new object[] {
                    SessionID});
        return ((CxWSResponseConfigSetList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetConfigurationSetList(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetConfigurationSetList", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseConfigSetList EndGetConfigurationSetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseConfigSetList)(results[0]));
    }
    
    /// <remarks/>
    public void GetConfigurationSetListAsync(string SessionID) {
        this.GetConfigurationSetListAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetConfigurationSetListAsync(string SessionID, object userState) {
        if ((this.GetConfigurationSetListOperationCompleted == null)) {
            this.GetConfigurationSetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationSetListOperationCompleted);
        }
        this.InvokeAsync("GetConfigurationSetList", new object[] {
                    SessionID}, this.GetConfigurationSetListOperationCompleted, userState);
    }
    
    private void OnGetConfigurationSetListOperationCompleted(object arg) {
        if ((this.GetConfigurationSetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConfigurationSetListCompleted(this, new GetConfigurationSetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidProjectName", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse IsValidProjectName(string SessionID, string ProjectName, string GroupId) {
        object[] results = this.Invoke("IsValidProjectName", new object[] {
                    SessionID,
                    ProjectName,
                    GroupId});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsValidProjectName(string SessionID, string ProjectName, string GroupId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsValidProjectName", new object[] {
                    SessionID,
                    ProjectName,
                    GroupId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndIsValidProjectName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void IsValidProjectNameAsync(string SessionID, string ProjectName, string GroupId) {
        this.IsValidProjectNameAsync(SessionID, ProjectName, GroupId, null);
    }
    
    /// <remarks/>
    public void IsValidProjectNameAsync(string SessionID, string ProjectName, string GroupId, object userState) {
        if ((this.IsValidProjectNameOperationCompleted == null)) {
            this.IsValidProjectNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidProjectNameOperationCompleted);
        }
        this.InvokeAsync("IsValidProjectName", new object[] {
                    SessionID,
                    ProjectName,
                    GroupId}, this.IsValidProjectNameOperationCompleted, userState);
    }
    
    private void OnIsValidProjectNameOperationCompleted(object arg) {
        if ((this.IsValidProjectNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsValidProjectNameCompleted(this, new IsValidProjectNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSharedFileSystemLayer", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseFileSystemLayer GetSharedFileSystemLayer(string SessionID, string Path, Credentials UserCredentials) {
        object[] results = this.Invoke("GetSharedFileSystemLayer", new object[] {
                    SessionID,
                    Path,
                    UserCredentials});
        return ((CxWSResponseFileSystemLayer)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSharedFileSystemLayer(string SessionID, string Path, Credentials UserCredentials, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSharedFileSystemLayer", new object[] {
                    SessionID,
                    Path,
                    UserCredentials}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseFileSystemLayer EndGetSharedFileSystemLayer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseFileSystemLayer)(results[0]));
    }
    
    /// <remarks/>
    public void GetSharedFileSystemLayerAsync(string SessionID, string Path, Credentials UserCredentials) {
        this.GetSharedFileSystemLayerAsync(SessionID, Path, UserCredentials, null);
    }
    
    /// <remarks/>
    public void GetSharedFileSystemLayerAsync(string SessionID, string Path, Credentials UserCredentials, object userState) {
        if ((this.GetSharedFileSystemLayerOperationCompleted == null)) {
            this.GetSharedFileSystemLayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedFileSystemLayerOperationCompleted);
        }
        this.InvokeAsync("GetSharedFileSystemLayer", new object[] {
                    SessionID,
                    Path,
                    UserCredentials}, this.GetSharedFileSystemLayerOperationCompleted, userState);
    }
    
    private void OnGetSharedFileSystemLayerOperationCompleted(object arg) {
        if ((this.GetSharedFileSystemLayerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSharedFileSystemLayerCompleted(this, new GetSharedFileSystemLayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetRepositoryFileSystemLayer", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseFileSystemLayer GetRepositoryFileSystemLayer(string SessionID, string Path, SourceControlSettings SourceControlSettings) {
        object[] results = this.Invoke("GetRepositoryFileSystemLayer", new object[] {
                    SessionID,
                    Path,
                    SourceControlSettings});
        return ((CxWSResponseFileSystemLayer)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRepositoryFileSystemLayer(string SessionID, string Path, SourceControlSettings SourceControlSettings, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRepositoryFileSystemLayer", new object[] {
                    SessionID,
                    Path,
                    SourceControlSettings}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseFileSystemLayer EndGetRepositoryFileSystemLayer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseFileSystemLayer)(results[0]));
    }
    
    /// <remarks/>
    public void GetRepositoryFileSystemLayerAsync(string SessionID, string Path, SourceControlSettings SourceControlSettings) {
        this.GetRepositoryFileSystemLayerAsync(SessionID, Path, SourceControlSettings, null);
    }
    
    /// <remarks/>
    public void GetRepositoryFileSystemLayerAsync(string SessionID, string Path, SourceControlSettings SourceControlSettings, object userState) {
        if ((this.GetRepositoryFileSystemLayerOperationCompleted == null)) {
            this.GetRepositoryFileSystemLayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoryFileSystemLayerOperationCompleted);
        }
        this.InvokeAsync("GetRepositoryFileSystemLayer", new object[] {
                    SessionID,
                    Path,
                    SourceControlSettings}, this.GetRepositoryFileSystemLayerOperationCompleted, userState);
    }
    
    private void OnGetRepositoryFileSystemLayerOperationCompleted(object arg) {
        if ((this.GetRepositoryFileSystemLayerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRepositoryFileSystemLayerCompleted(this, new GetRepositoryFileSystemLayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourceControlActionList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSourceActionList GetSourceControlActionList(string SessionID, string teamId) {
        object[] results = this.Invoke("GetSourceControlActionList", new object[] {
                    SessionID,
                    teamId});
        return ((CxWSResponseSourceActionList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSourceControlActionList(string SessionID, string teamId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSourceControlActionList", new object[] {
                    SessionID,
                    teamId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSourceActionList EndGetSourceControlActionList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSourceActionList)(results[0]));
    }
    
    /// <remarks/>
    public void GetSourceControlActionListAsync(string SessionID, string teamId) {
        this.GetSourceControlActionListAsync(SessionID, teamId, null);
    }
    
    /// <remarks/>
    public void GetSourceControlActionListAsync(string SessionID, string teamId, object userState) {
        if ((this.GetSourceControlActionListOperationCompleted == null)) {
            this.GetSourceControlActionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceControlActionListOperationCompleted);
        }
        this.InvokeAsync("GetSourceControlActionList", new object[] {
                    SessionID,
                    teamId}, this.GetSourceControlActionListOperationCompleted, userState);
    }
    
    private void OnGetSourceControlActionListOperationCompleted(object arg) {
        if ((this.GetSourceControlActionListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSourceControlActionListCompleted(this, new GetSourceControlActionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPostScanActionList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSourceActionList GetPostScanActionList(string SessionID, string teamId) {
        object[] results = this.Invoke("GetPostScanActionList", new object[] {
                    SessionID,
                    teamId});
        return ((CxWSResponseSourceActionList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPostScanActionList(string SessionID, string teamId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPostScanActionList", new object[] {
                    SessionID,
                    teamId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSourceActionList EndGetPostScanActionList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSourceActionList)(results[0]));
    }
    
    /// <remarks/>
    public void GetPostScanActionListAsync(string SessionID, string teamId) {
        this.GetPostScanActionListAsync(SessionID, teamId, null);
    }
    
    /// <remarks/>
    public void GetPostScanActionListAsync(string SessionID, string teamId, object userState) {
        if ((this.GetPostScanActionListOperationCompleted == null)) {
            this.GetPostScanActionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostScanActionListOperationCompleted);
        }
        this.InvokeAsync("GetPostScanActionList", new object[] {
                    SessionID,
                    teamId}, this.GetPostScanActionListOperationCompleted, userState);
    }
    
    private void OnGetPostScanActionListOperationCompleted(object arg) {
        if ((this.GetPostScanActionListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPostScanActionListCompleted(this, new GetPostScanActionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewProject", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectID CreateNewProject(string SessionID, ProjectConfiguration Project) {
        object[] results = this.Invoke("CreateNewProject", new object[] {
                    SessionID,
                    Project});
        return ((CxWSResponseProjectID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateNewProject(string SessionID, ProjectConfiguration Project, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateNewProject", new object[] {
                    SessionID,
                    Project}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectID EndCreateNewProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectID)(results[0]));
    }
    
    /// <remarks/>
    public void CreateNewProjectAsync(string SessionID, ProjectConfiguration Project) {
        this.CreateNewProjectAsync(SessionID, Project, null);
    }
    
    /// <remarks/>
    public void CreateNewProjectAsync(string SessionID, ProjectConfiguration Project, object userState) {
        if ((this.CreateNewProjectOperationCompleted == null)) {
            this.CreateNewProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewProjectOperationCompleted);
        }
        this.InvokeAsync("CreateNewProject", new object[] {
                    SessionID,
                    Project}, this.CreateNewProjectOperationCompleted, userState);
    }
    
    private void OnCreateNewProjectOperationCompleted(object arg) {
        if ((this.CreateNewProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateNewProjectCompleted(this, new CreateNewProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateAndRunProject", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseRunID CreateAndRunProject(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers) {
        object[] results = this.Invoke("CreateAndRunProject", new object[] {
                    SessionID,
                    ProjectSettings,
                    LocalCodeContainer,
                    visibleToOtherUsers});
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateAndRunProject(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateAndRunProject", new object[] {
                    SessionID,
                    ProjectSettings,
                    LocalCodeContainer,
                    visibleToOtherUsers}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseRunID EndCreateAndRunProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public void CreateAndRunProjectAsync(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers) {
        this.CreateAndRunProjectAsync(SessionID, ProjectSettings, LocalCodeContainer, visibleToOtherUsers, null);
    }
    
    /// <remarks/>
    public void CreateAndRunProjectAsync(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers, object userState) {
        if ((this.CreateAndRunProjectOperationCompleted == null)) {
            this.CreateAndRunProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAndRunProjectOperationCompleted);
        }
        this.InvokeAsync("CreateAndRunProject", new object[] {
                    SessionID,
                    ProjectSettings,
                    LocalCodeContainer,
                    visibleToOtherUsers}, this.CreateAndRunProjectOperationCompleted, userState);
    }
    
    private void OnCreateAndRunProjectOperationCompleted(object arg) {
        if ((this.CreateAndRunProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateAndRunProjectCompleted(this, new CreateAndRunProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunScanAndAddToProject", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseRunID RunScanAndAddToProject(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers) {
        object[] results = this.Invoke("RunScanAndAddToProject", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer,
                    visibleToUtherUsers});
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunScanAndAddToProject(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunScanAndAddToProject", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer,
                    visibleToUtherUsers}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseRunID EndRunScanAndAddToProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public void RunScanAndAddToProjectAsync(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers) {
        this.RunScanAndAddToProjectAsync(sessionId, projectSettings, localCodeContainer, visibleToUtherUsers, null);
    }
    
    /// <remarks/>
    public void RunScanAndAddToProjectAsync(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers, object userState) {
        if ((this.RunScanAndAddToProjectOperationCompleted == null)) {
            this.RunScanAndAddToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunScanAndAddToProjectOperationCompleted);
        }
        this.InvokeAsync("RunScanAndAddToProject", new object[] {
                    sessionId,
                    projectSettings,
                    localCodeContainer,
                    visibleToUtherUsers}, this.RunScanAndAddToProjectOperationCompleted, userState);
    }
    
    private void OnRunScanAndAddToProjectOperationCompleted(object arg) {
        if ((this.RunScanAndAddToProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunScanAndAddToProjectCompleted(this, new RunScanAndAddToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CountLines", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseCountLines CountLines(string sessionId, LocalCodeContainer localCodeContainer) {
        object[] results = this.Invoke("CountLines", new object[] {
                    sessionId,
                    localCodeContainer});
        return ((CxWSResponseCountLines)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCountLines(string sessionId, LocalCodeContainer localCodeContainer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CountLines", new object[] {
                    sessionId,
                    localCodeContainer}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseCountLines EndCountLines(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseCountLines)(results[0]));
    }
    
    /// <remarks/>
    public void CountLinesAsync(string sessionId, LocalCodeContainer localCodeContainer) {
        this.CountLinesAsync(sessionId, localCodeContainer, null);
    }
    
    /// <remarks/>
    public void CountLinesAsync(string sessionId, LocalCodeContainer localCodeContainer, object userState) {
        if ((this.CountLinesOperationCompleted == null)) {
            this.CountLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountLinesOperationCompleted);
        }
        this.InvokeAsync("CountLines", new object[] {
                    sessionId,
                    localCodeContainer}, this.CountLinesOperationCompleted, userState);
    }
    
    private void OnCountLinesOperationCompleted(object arg) {
        if ((this.CountLinesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CountLinesCompleted(this, new CountLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScansStatuses", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanStatusArray GetScansStatuses(string sessionID) {
        object[] results = this.Invoke("GetScansStatuses", new object[] {
                    sessionID});
        return ((CxWSResponseScanStatusArray)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScansStatuses(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScansStatuses", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanStatusArray EndGetScansStatuses(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanStatusArray)(results[0]));
    }
    
    /// <remarks/>
    public void GetScansStatusesAsync(string sessionID) {
        this.GetScansStatusesAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetScansStatusesAsync(string sessionID, object userState) {
        if ((this.GetScansStatusesOperationCompleted == null)) {
            this.GetScansStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansStatusesOperationCompleted);
        }
        this.InvokeAsync("GetScansStatuses", new object[] {
                    sessionID}, this.GetScansStatusesOperationCompleted, userState);
    }
    
    private void OnGetScansStatusesOperationCompleted(object arg) {
        if ((this.GetScansStatusesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScansStatusesCompleted(this, new GetScansStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetStatusOfSingleScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanStatus GetStatusOfSingleScan(string sessionID, string runId) {
        object[] results = this.Invoke("GetStatusOfSingleScan", new object[] {
                    sessionID,
                    runId});
        return ((CxWSResponseScanStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetStatusOfSingleScan(string sessionID, string runId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetStatusOfSingleScan", new object[] {
                    sessionID,
                    runId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanStatus EndGetStatusOfSingleScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetStatusOfSingleScanAsync(string sessionID, string runId) {
        this.GetStatusOfSingleScanAsync(sessionID, runId, null);
    }
    
    /// <remarks/>
    public void GetStatusOfSingleScanAsync(string sessionID, string runId, object userState) {
        if ((this.GetStatusOfSingleScanOperationCompleted == null)) {
            this.GetStatusOfSingleScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOfSingleScanOperationCompleted);
        }
        this.InvokeAsync("GetStatusOfSingleScan", new object[] {
                    sessionID,
                    runId}, this.GetStatusOfSingleScanOperationCompleted, userState);
    }
    
    private void OnGetStatusOfSingleScanOperationCompleted(object arg) {
        if ((this.GetStatusOfSingleScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetStatusOfSingleScanCompleted(this, new GetStatusOfSingleScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/PostponeScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseQueueRunID PostponeScan(string sessionID, string RunId) {
        object[] results = this.Invoke("PostponeScan", new object[] {
                    sessionID,
                    RunId});
        return ((CxWSResponseQueueRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPostponeScan(string sessionID, string RunId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PostponeScan", new object[] {
                    sessionID,
                    RunId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseQueueRunID EndPostponeScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseQueueRunID)(results[0]));
    }
    
    /// <remarks/>
    public void PostponeScanAsync(string sessionID, string RunId) {
        this.PostponeScanAsync(sessionID, RunId, null);
    }
    
    /// <remarks/>
    public void PostponeScanAsync(string sessionID, string RunId, object userState) {
        if ((this.PostponeScanOperationCompleted == null)) {
            this.PostponeScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostponeScanOperationCompleted);
        }
        this.InvokeAsync("PostponeScan", new object[] {
                    sessionID,
                    RunId}, this.PostponeScanOperationCompleted, userState);
    }
    
    private void OnPostponeScanOperationCompleted(object arg) {
        if ((this.PostponeScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PostponeScanCompleted(this, new PostponeScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CancelScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CancelScan(string sessionID, string RunId) {
        object[] results = this.Invoke("CancelScan", new object[] {
                    sessionID,
                    RunId});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelScan(string sessionID, string RunId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelScan", new object[] {
                    sessionID,
                    RunId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCancelScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CancelScanAsync(string sessionID, string RunId) {
        this.CancelScanAsync(sessionID, RunId, null);
    }
    
    /// <remarks/>
    public void CancelScanAsync(string sessionID, string RunId, object userState) {
        if ((this.CancelScanOperationCompleted == null)) {
            this.CancelScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelScanOperationCompleted);
        }
        this.InvokeAsync("CancelScan", new object[] {
                    sessionID,
                    RunId}, this.CancelScanOperationCompleted, userState);
    }
    
    private void OnCancelScanOperationCompleted(object arg) {
        if ((this.CancelScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CancelScanCompleted(this, new CancelScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateProjectUserCredentials", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateProjectUserCredentials(string sessionID, long projectID, Credentials credentials) {
        object[] results = this.Invoke("UpdateProjectUserCredentials", new object[] {
                    sessionID,
                    projectID,
                    credentials});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateProjectUserCredentials(string sessionID, long projectID, Credentials credentials, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateProjectUserCredentials", new object[] {
                    sessionID,
                    projectID,
                    credentials}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateProjectUserCredentials(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateProjectUserCredentialsAsync(string sessionID, long projectID, Credentials credentials) {
        this.UpdateProjectUserCredentialsAsync(sessionID, projectID, credentials, null);
    }
    
    /// <remarks/>
    public void UpdateProjectUserCredentialsAsync(string sessionID, long projectID, Credentials credentials, object userState) {
        if ((this.UpdateProjectUserCredentialsOperationCompleted == null)) {
            this.UpdateProjectUserCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectUserCredentialsOperationCompleted);
        }
        this.InvokeAsync("UpdateProjectUserCredentials", new object[] {
                    sessionID,
                    projectID,
                    credentials}, this.UpdateProjectUserCredentialsOperationCompleted, userState);
    }
    
    private void OnUpdateProjectUserCredentialsOperationCompleted(object arg) {
        if ((this.UpdateProjectUserCredentialsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateProjectUserCredentialsCompleted(this, new UpdateProjectUserCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsWithUserCredentials", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectsData GetProjectsWithUserCredentials(string sessionID, string username) {
        object[] results = this.Invoke("GetProjectsWithUserCredentials", new object[] {
                    sessionID,
                    username});
        return ((CxWSResponseProjectsData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectsWithUserCredentials(string sessionID, string username, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectsWithUserCredentials", new object[] {
                    sessionID,
                    username}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectsData EndGetProjectsWithUserCredentials(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectsData)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectsWithUserCredentialsAsync(string sessionID, string username) {
        this.GetProjectsWithUserCredentialsAsync(sessionID, username, null);
    }
    
    /// <remarks/>
    public void GetProjectsWithUserCredentialsAsync(string sessionID, string username, object userState) {
        if ((this.GetProjectsWithUserCredentialsOperationCompleted == null)) {
            this.GetProjectsWithUserCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsWithUserCredentialsOperationCompleted);
        }
        this.InvokeAsync("GetProjectsWithUserCredentials", new object[] {
                    sessionID,
                    username}, this.GetProjectsWithUserCredentialsOperationCompleted, userState);
    }
    
    private void OnGetProjectsWithUserCredentialsOperationCompleted(object arg) {
        if ((this.GetProjectsWithUserCredentialsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectsWithUserCredentialsCompleted(this, new GetProjectsWithUserCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsCredentialUsers", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseNameList GetProjectsCredentialUsers(string sessionID) {
        object[] results = this.Invoke("GetProjectsCredentialUsers", new object[] {
                    sessionID});
        return ((CxWSResponseNameList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectsCredentialUsers(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectsCredentialUsers", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseNameList EndGetProjectsCredentialUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseNameList)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectsCredentialUsersAsync(string sessionID) {
        this.GetProjectsCredentialUsersAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetProjectsCredentialUsersAsync(string sessionID, object userState) {
        if ((this.GetProjectsCredentialUsersOperationCompleted == null)) {
            this.GetProjectsCredentialUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsCredentialUsersOperationCompleted);
        }
        this.InvokeAsync("GetProjectsCredentialUsers", new object[] {
                    sessionID}, this.GetProjectsCredentialUsersOperationCompleted, userState);
    }
    
    private void OnGetProjectsCredentialUsersOperationCompleted(object arg) {
        if ((this.GetProjectsCredentialUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectsCredentialUsersCompleted(this, new GetProjectsCredentialUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsDisplayData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectsDisplayData GetProjectsDisplayData(string sessionID) {
        object[] results = this.Invoke("GetProjectsDisplayData", new object[] {
                    sessionID});
        return ((CxWSResponseProjectsDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectsDisplayData(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectsDisplayData", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectsDisplayData EndGetProjectsDisplayData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectsDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectsDisplayDataAsync(string sessionID) {
        this.GetProjectsDisplayDataAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetProjectsDisplayDataAsync(string sessionID, object userState) {
        if ((this.GetProjectsDisplayDataOperationCompleted == null)) {
            this.GetProjectsDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsDisplayDataOperationCompleted);
        }
        this.InvokeAsync("GetProjectsDisplayData", new object[] {
                    sessionID}, this.GetProjectsDisplayDataOperationCompleted, userState);
    }
    
    private void OnGetProjectsDisplayDataOperationCompleted(object arg) {
        if ((this.GetProjectsDisplayDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectsDisplayDataCompleted(this, new GetProjectsDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunProjectImmediately", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse RunProjectImmediately(string sessionID, long projectID) {
        object[] results = this.Invoke("RunProjectImmediately", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunProjectImmediately(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunProjectImmediately", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndRunProjectImmediately(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void RunProjectImmediatelyAsync(string sessionID, long projectID) {
        this.RunProjectImmediatelyAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void RunProjectImmediatelyAsync(string sessionID, long projectID, object userState) {
        if ((this.RunProjectImmediatelyOperationCompleted == null)) {
            this.RunProjectImmediatelyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunProjectImmediatelyOperationCompleted);
        }
        this.InvokeAsync("RunProjectImmediately", new object[] {
                    sessionID,
                    projectID}, this.RunProjectImmediatelyOperationCompleted, userState);
    }
    
    private void OnRunProjectImmediatelyOperationCompleted(object arg) {
        if ((this.RunProjectImmediatelyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunProjectImmediatelyCompleted(this, new RunProjectImmediatelyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunProjectIncrementally", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse RunProjectIncrementally(string sessionID, long projectID) {
        object[] results = this.Invoke("RunProjectIncrementally", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunProjectIncrementally(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunProjectIncrementally", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndRunProjectIncrementally(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void RunProjectIncrementallyAsync(string sessionID, long projectID) {
        this.RunProjectIncrementallyAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void RunProjectIncrementallyAsync(string sessionID, long projectID, object userState) {
        if ((this.RunProjectIncrementallyOperationCompleted == null)) {
            this.RunProjectIncrementallyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunProjectIncrementallyOperationCompleted);
        }
        this.InvokeAsync("RunProjectIncrementally", new object[] {
                    sessionID,
                    projectID}, this.RunProjectIncrementallyOperationCompleted, userState);
    }
    
    private void OnRunProjectIncrementallyOperationCompleted(object arg) {
        if ((this.RunProjectIncrementallyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunProjectIncrementallyCompleted(this, new RunProjectIncrementallyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteProject", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteProject(string sessionID, long projectID) {
        object[] results = this.Invoke("DeleteProject", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteProject(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteProject", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteProjectAsync(string sessionID, long projectID) {
        this.DeleteProjectAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void DeleteProjectAsync(string sessionID, long projectID, object userState) {
        if ((this.DeleteProjectOperationCompleted == null)) {
            this.DeleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProjectOperationCompleted);
        }
        this.InvokeAsync("DeleteProject", new object[] {
                    sessionID,
                    projectID}, this.DeleteProjectOperationCompleted, userState);
    }
    
    private void OnDeleteProjectOperationCompleted(object arg) {
        if ((this.DeleteProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteProjectCompleted(this, new DeleteProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectConfiguration", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProjectConfig GetProjectConfiguration(string sessionID, long projectID) {
        object[] results = this.Invoke("GetProjectConfiguration", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSResponseProjectConfig)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectConfiguration(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectConfiguration", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProjectConfig EndGetProjectConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProjectConfig)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectConfigurationAsync(string sessionID, long projectID) {
        this.GetProjectConfigurationAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void GetProjectConfigurationAsync(string sessionID, long projectID, object userState) {
        if ((this.GetProjectConfigurationOperationCompleted == null)) {
            this.GetProjectConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectConfigurationOperationCompleted);
        }
        this.InvokeAsync("GetProjectConfiguration", new object[] {
                    sessionID,
                    projectID}, this.GetProjectConfigurationOperationCompleted, userState);
    }
    
    private void OnGetProjectConfigurationOperationCompleted(object arg) {
        if ((this.GetProjectConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectConfigurationCompleted(this, new GetProjectConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectProperties", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsProjectProperties GetProjectProperties(string sessionID, long projectID) {
        object[] results = this.Invoke("GetProjectProperties", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSResponsProjectProperties)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectProperties(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectProperties", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsProjectProperties EndGetProjectProperties(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsProjectProperties)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectPropertiesAsync(string sessionID, long projectID) {
        this.GetProjectPropertiesAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void GetProjectPropertiesAsync(string sessionID, long projectID, object userState) {
        if ((this.GetProjectPropertiesOperationCompleted == null)) {
            this.GetProjectPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectPropertiesOperationCompleted);
        }
        this.InvokeAsync("GetProjectProperties", new object[] {
                    sessionID,
                    projectID}, this.GetProjectPropertiesOperationCompleted, userState);
    }
    
    private void OnGetProjectPropertiesOperationCompleted(object arg) {
        if ((this.GetProjectPropertiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectPropertiesCompleted(this, new GetProjectPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateProjectConfiguration", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateProjectConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
        object[] results = this.Invoke("UpdateProjectConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateProjectConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateProjectConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateProjectConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateProjectConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
        this.UpdateProjectConfigurationAsync(sessionID, projectID, projectConfiguration, null);
    }
    
    /// <remarks/>
    public void UpdateProjectConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration, object userState) {
        if ((this.UpdateProjectConfigurationOperationCompleted == null)) {
            this.UpdateProjectConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectConfigurationOperationCompleted);
        }
        this.InvokeAsync("UpdateProjectConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration}, this.UpdateProjectConfigurationOperationCompleted, userState);
    }
    
    private void OnUpdateProjectConfigurationOperationCompleted(object arg) {
        if ((this.UpdateProjectConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateProjectConfigurationCompleted(this, new UpdateProjectConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateProjectIncrementalConfiguration", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateProjectIncrementalConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
        object[] results = this.Invoke("UpdateProjectIncrementalConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateProjectIncrementalConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateProjectIncrementalConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateProjectIncrementalConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateProjectIncrementalConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
        this.UpdateProjectIncrementalConfigurationAsync(sessionID, projectID, projectConfiguration, null);
    }
    
    /// <remarks/>
    public void UpdateProjectIncrementalConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration, object userState) {
        if ((this.UpdateProjectIncrementalConfigurationOperationCompleted == null)) {
            this.UpdateProjectIncrementalConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectIncrementalConfigurationOperationCompleted);
        }
        this.InvokeAsync("UpdateProjectIncrementalConfiguration", new object[] {
                    sessionID,
                    projectID,
                    projectConfiguration}, this.UpdateProjectIncrementalConfigurationOperationCompleted, userState);
    }
    
    private void OnUpdateProjectIncrementalConfigurationOperationCompleted(object arg) {
        if ((this.UpdateProjectIncrementalConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateProjectIncrementalConfigurationCompleted(this, new UpdateProjectIncrementalConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectCharts", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsProjectChartData GetProjectCharts(string sessionID, long projectID) {
        object[] results = this.Invoke("GetProjectCharts", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSResponsProjectChartData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProjectCharts(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProjectCharts", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsProjectChartData EndGetProjectCharts(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsProjectChartData)(results[0]));
    }
    
    /// <remarks/>
    public void GetProjectChartsAsync(string sessionID, long projectID) {
        this.GetProjectChartsAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void GetProjectChartsAsync(string sessionID, long projectID, object userState) {
        if ((this.GetProjectChartsOperationCompleted == null)) {
            this.GetProjectChartsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectChartsOperationCompleted);
        }
        this.InvokeAsync("GetProjectCharts", new object[] {
                    sessionID,
                    projectID}, this.GetProjectChartsOperationCompleted, userState);
    }
    
    private void OnGetProjectChartsOperationCompleted(object arg) {
        if ((this.GetProjectChartsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProjectChartsCompleted(this, new GetProjectChartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ResetIgnorePath", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse ResetIgnorePath(string sessionID, long ProjectId) {
        object[] results = this.Invoke("ResetIgnorePath", new object[] {
                    sessionID,
                    ProjectId});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginResetIgnorePath(string sessionID, long ProjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ResetIgnorePath", new object[] {
                    sessionID,
                    ProjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndResetIgnorePath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void ResetIgnorePathAsync(string sessionID, long ProjectId) {
        this.ResetIgnorePathAsync(sessionID, ProjectId, null);
    }
    
    /// <remarks/>
    public void ResetIgnorePathAsync(string sessionID, long ProjectId, object userState) {
        if ((this.ResetIgnorePathOperationCompleted == null)) {
            this.ResetIgnorePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetIgnorePathOperationCompleted);
        }
        this.InvokeAsync("ResetIgnorePath", new object[] {
                    sessionID,
                    ProjectId}, this.ResetIgnorePathOperationCompleted, userState);
    }
    
    private void OnResetIgnorePathOperationCompleted(object arg) {
        if ((this.ResetIgnorePathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ResetIgnorePathCompleted(this, new ResetIgnorePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetFalsePositiveFlag", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SetFalsePositiveFlag(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag) {
        object[] results = this.Invoke("SetFalsePositiveFlag", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    falsePositiveFlag});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetFalsePositiveFlag(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetFalsePositiveFlag", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    falsePositiveFlag}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSetFalsePositiveFlag(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SetFalsePositiveFlagAsync(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag) {
        this.SetFalsePositiveFlagAsync(sessionID, ResultId, PathId, projectId, falsePositiveFlag, null);
    }
    
    /// <remarks/>
    public void SetFalsePositiveFlagAsync(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag, object userState) {
        if ((this.SetFalsePositiveFlagOperationCompleted == null)) {
            this.SetFalsePositiveFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFalsePositiveFlagOperationCompleted);
        }
        this.InvokeAsync("SetFalsePositiveFlag", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    falsePositiveFlag}, this.SetFalsePositiveFlagOperationCompleted, userState);
    }
    
    private void OnSetFalsePositiveFlagOperationCompleted(object arg) {
        if ((this.SetFalsePositiveFlagCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetFalsePositiveFlagCompleted(this, new SetFalsePositiveFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateResultComment", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateResultComment(string sessionID, long ResultId, long PathId, long projectId, string comment) {
        object[] results = this.Invoke("UpdateResultComment", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    comment});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateResultComment(string sessionID, long ResultId, long PathId, long projectId, string comment, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateResultComment", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    comment}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateResultComment(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateResultCommentAsync(string sessionID, long ResultId, long PathId, long projectId, string comment) {
        this.UpdateResultCommentAsync(sessionID, ResultId, PathId, projectId, comment, null);
    }
    
    /// <remarks/>
    public void UpdateResultCommentAsync(string sessionID, long ResultId, long PathId, long projectId, string comment, object userState) {
        if ((this.UpdateResultCommentOperationCompleted == null)) {
            this.UpdateResultCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateResultCommentOperationCompleted);
        }
        this.InvokeAsync("UpdateResultComment", new object[] {
                    sessionID,
                    ResultId,
                    PathId,
                    projectId,
                    comment}, this.UpdateResultCommentOperationCompleted, userState);
    }
    
    private void OnUpdateResultCommentOperationCompleted(object arg) {
        if ((this.UpdateResultCommentCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateResultCommentCompleted(this, new UpdateResultCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateResultState", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateResultState(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data) {
        object[] results = this.Invoke("UpdateResultState", new object[] {
                    sessionID,
                    scanId,
                    PathId,
                    projectId,
                    Remarks,
                    ResultLabelType,
                    data});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateResultState(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateResultState", new object[] {
                    sessionID,
                    scanId,
                    PathId,
                    projectId,
                    Remarks,
                    ResultLabelType,
                    data}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateResultState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateResultStateAsync(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data) {
        this.UpdateResultStateAsync(sessionID, scanId, PathId, projectId, Remarks, ResultLabelType, data, null);
    }
    
    /// <remarks/>
    public void UpdateResultStateAsync(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data, object userState) {
        if ((this.UpdateResultStateOperationCompleted == null)) {
            this.UpdateResultStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateResultStateOperationCompleted);
        }
        this.InvokeAsync("UpdateResultState", new object[] {
                    sessionID,
                    scanId,
                    PathId,
                    projectId,
                    Remarks,
                    ResultLabelType,
                    data}, this.UpdateResultStateOperationCompleted, userState);
    }
    
    private void OnUpdateResultStateOperationCompleted(object arg) {
        if ((this.UpdateResultStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateResultStateCompleted(this, new UpdateResultStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateSetOfResultState", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateSetOfResultState(string sessionID, ResultStateData[] resultsStates) {
        object[] results = this.Invoke("UpdateSetOfResultState", new object[] {
                    sessionID,
                    resultsStates});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateSetOfResultState(string sessionID, ResultStateData[] resultsStates, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSetOfResultState", new object[] {
                    sessionID,
                    resultsStates}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateSetOfResultState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateSetOfResultStateAsync(string sessionID, ResultStateData[] resultsStates) {
        this.UpdateSetOfResultStateAsync(sessionID, resultsStates, null);
    }
    
    /// <remarks/>
    public void UpdateSetOfResultStateAsync(string sessionID, ResultStateData[] resultsStates, object userState) {
        if ((this.UpdateSetOfResultStateOperationCompleted == null)) {
            this.UpdateSetOfResultStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSetOfResultStateOperationCompleted);
        }
        this.InvokeAsync("UpdateSetOfResultState", new object[] {
                    sessionID,
                    resultsStates}, this.UpdateSetOfResultStateOperationCompleted, userState);
    }
    
    private void OnUpdateSetOfResultStateOperationCompleted(object arg) {
        if ((this.UpdateSetOfResultStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateSetOfResultStateCompleted(this, new UpdateSetOfResultStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunScanWithExistingProject", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseRunID RunScanWithExistingProject(string sessionId, string projectName) {
        object[] results = this.Invoke("RunScanWithExistingProject", new object[] {
                    sessionId,
                    projectName});
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunScanWithExistingProject(string sessionId, string projectName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunScanWithExistingProject", new object[] {
                    sessionId,
                    projectName}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseRunID EndRunScanWithExistingProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseRunID)(results[0]));
    }
    
    /// <remarks/>
    public void RunScanWithExistingProjectAsync(string sessionId, string projectName) {
        this.RunScanWithExistingProjectAsync(sessionId, projectName, null);
    }
    
    /// <remarks/>
    public void RunScanWithExistingProjectAsync(string sessionId, string projectName, object userState) {
        if ((this.RunScanWithExistingProjectOperationCompleted == null)) {
            this.RunScanWithExistingProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunScanWithExistingProjectOperationCompleted);
        }
        this.InvokeAsync("RunScanWithExistingProject", new object[] {
                    sessionId,
                    projectName}, this.RunScanWithExistingProjectOperationCompleted, userState);
    }
    
    private void OnRunScanWithExistingProjectOperationCompleted(object arg) {
        if ((this.RunScanWithExistingProjectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunScanWithExistingProjectCompleted(this, new RunScanWithExistingProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScansDisplayData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScansDisplayData GetScansDisplayData(string sessionID, long projectID) {
        object[] results = this.Invoke("GetScansDisplayData", new object[] {
                    sessionID,
                    projectID});
        return ((CxWSResponseScansDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScansDisplayData(string sessionID, long projectID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScansDisplayData", new object[] {
                    sessionID,
                    projectID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScansDisplayData EndGetScansDisplayData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScansDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public void GetScansDisplayDataAsync(string sessionID, long projectID) {
        this.GetScansDisplayDataAsync(sessionID, projectID, null);
    }
    
    /// <remarks/>
    public void GetScansDisplayDataAsync(string sessionID, long projectID, object userState) {
        if ((this.GetScansDisplayDataOperationCompleted == null)) {
            this.GetScansDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansDisplayDataOperationCompleted);
        }
        this.InvokeAsync("GetScansDisplayData", new object[] {
                    sessionID,
                    projectID}, this.GetScansDisplayDataOperationCompleted, userState);
    }
    
    private void OnGetScansDisplayDataOperationCompleted(object arg) {
        if ((this.GetScansDisplayDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScansDisplayDataCompleted(this, new GetScansDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteScan", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteScan(string sessionID, long ScanID) {
        object[] results = this.Invoke("DeleteScan", new object[] {
                    sessionID,
                    ScanID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteScan(string sessionID, long ScanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteScan", new object[] {
                    sessionID,
                    ScanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteScan(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteScanAsync(string sessionID, long ScanID) {
        this.DeleteScanAsync(sessionID, ScanID, null);
    }
    
    /// <remarks/>
    public void DeleteScanAsync(string sessionID, long ScanID, object userState) {
        if ((this.DeleteScanOperationCompleted == null)) {
            this.DeleteScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScanOperationCompleted);
        }
        this.InvokeAsync("DeleteScan", new object[] {
                    sessionID,
                    ScanID}, this.DeleteScanOperationCompleted, userState);
    }
    
    private void OnDeleteScanOperationCompleted(object arg) {
        if ((this.DeleteScanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteScanCompleted(this, new DeleteScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanProperties", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanProperties GetScanProperties(string sessionID, long ScanID) {
        object[] results = this.Invoke("GetScanProperties", new object[] {
                    sessionID,
                    ScanID});
        return ((CxWSResponseScanProperties)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanProperties(string sessionID, long ScanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanProperties", new object[] {
                    sessionID,
                    ScanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanProperties EndGetScanProperties(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanProperties)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanPropertiesAsync(string sessionID, long ScanID) {
        this.GetScanPropertiesAsync(sessionID, ScanID, null);
    }
    
    /// <remarks/>
    public void GetScanPropertiesAsync(string sessionID, long ScanID, object userState) {
        if ((this.GetScanPropertiesOperationCompleted == null)) {
            this.GetScanPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanPropertiesOperationCompleted);
        }
        this.InvokeAsync("GetScanProperties", new object[] {
                    sessionID,
                    ScanID}, this.GetScanPropertiesOperationCompleted, userState);
    }
    
    private void OnGetScanPropertiesOperationCompleted(object arg) {
        if ((this.GetScanPropertiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanPropertiesCompleted(this, new GetScanPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateScanComment", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateScanComment(string sessionID, long ScanID, string Comment) {
        object[] results = this.Invoke("UpdateScanComment", new object[] {
                    sessionID,
                    ScanID,
                    Comment});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateScanComment(string sessionID, long ScanID, string Comment, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateScanComment", new object[] {
                    sessionID,
                    ScanID,
                    Comment}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateScanComment(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateScanCommentAsync(string sessionID, long ScanID, string Comment) {
        this.UpdateScanCommentAsync(sessionID, ScanID, Comment, null);
    }
    
    /// <remarks/>
    public void UpdateScanCommentAsync(string sessionID, long ScanID, string Comment, object userState) {
        if ((this.UpdateScanCommentOperationCompleted == null)) {
            this.UpdateScanCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScanCommentOperationCompleted);
        }
        this.InvokeAsync("UpdateScanComment", new object[] {
                    sessionID,
                    ScanID,
                    Comment}, this.UpdateScanCommentOperationCompleted, userState);
    }
    
    private void OnUpdateScanCommentOperationCompleted(object arg) {
        if ((this.UpdateScanCommentCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateScanCommentCompleted(this, new UpdateScanCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScansDisplayDataForAllProjects", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScansDisplayData GetScansDisplayDataForAllProjects(string sessionID) {
        object[] results = this.Invoke("GetScansDisplayDataForAllProjects", new object[] {
                    sessionID});
        return ((CxWSResponseScansDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScansDisplayDataForAllProjects(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScansDisplayDataForAllProjects", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScansDisplayData EndGetScansDisplayDataForAllProjects(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScansDisplayData)(results[0]));
    }
    
    /// <remarks/>
    public void GetScansDisplayDataForAllProjectsAsync(string sessionID) {
        this.GetScansDisplayDataForAllProjectsAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetScansDisplayDataForAllProjectsAsync(string sessionID, object userState) {
        if ((this.GetScansDisplayDataForAllProjectsOperationCompleted == null)) {
            this.GetScansDisplayDataForAllProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansDisplayDataForAllProjectsOperationCompleted);
        }
        this.InvokeAsync("GetScansDisplayDataForAllProjects", new object[] {
                    sessionID}, this.GetScansDisplayDataForAllProjectsOperationCompleted, userState);
    }
    
    private void OnGetScansDisplayDataForAllProjectsOperationCompleted(object arg) {
        if ((this.GetScansDisplayDataForAllProjectsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScansDisplayDataForAllProjectsCompleted(this, new GetScansDisplayDataForAllProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanSummary", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanSummary GetScanSummary(string i_SessionID, long i_ScanID) {
        object[] results = this.Invoke("GetScanSummary", new object[] {
                    i_SessionID,
                    i_ScanID});
        return ((CxWSResponseScanSummary)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanSummary(string i_SessionID, long i_ScanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanSummary", new object[] {
                    i_SessionID,
                    i_ScanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanSummary EndGetScanSummary(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanSummary)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanSummaryAsync(string i_SessionID, long i_ScanID) {
        this.GetScanSummaryAsync(i_SessionID, i_ScanID, null);
    }
    
    /// <remarks/>
    public void GetScanSummaryAsync(string i_SessionID, long i_ScanID, object userState) {
        if ((this.GetScanSummaryOperationCompleted == null)) {
            this.GetScanSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanSummaryOperationCompleted);
        }
        this.InvokeAsync("GetScanSummary", new object[] {
                    i_SessionID,
                    i_ScanID}, this.GetScanSummaryOperationCompleted, userState);
    }
    
    private void OnGetScanSummaryOperationCompleted(object arg) {
        if ((this.GetScanSummaryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanSummaryCompleted(this, new GetScanSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanCompareSummary", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanCompareSummary GetScanCompareSummary(string sessionId, long oldScanId, long newScanId) {
        object[] results = this.Invoke("GetScanCompareSummary", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId});
        return ((CxWSResponseScanCompareSummary)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanCompareSummary(string sessionId, long oldScanId, long newScanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanCompareSummary", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanCompareSummary EndGetScanCompareSummary(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanCompareSummary)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanCompareSummaryAsync(string sessionId, long oldScanId, long newScanId) {
        this.GetScanCompareSummaryAsync(sessionId, oldScanId, newScanId, null);
    }
    
    /// <remarks/>
    public void GetScanCompareSummaryAsync(string sessionId, long oldScanId, long newScanId, object userState) {
        if ((this.GetScanCompareSummaryOperationCompleted == null)) {
            this.GetScanCompareSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanCompareSummaryOperationCompleted);
        }
        this.InvokeAsync("GetScanCompareSummary", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId}, this.GetScanCompareSummaryOperationCompleted, userState);
    }
    
    private void OnGetScanCompareSummaryOperationCompleted(object arg) {
        if ((this.GetScanCompareSummaryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanCompareSummaryCompleted(this, new GetScanCompareSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanCompareReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanCompareReport GetScanCompareReport(string sessionId, long oldScanId, long newScanId) {
        object[] results = this.Invoke("GetScanCompareReport", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId});
        return ((CxWSResponseScanCompareReport)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanCompareReport(string sessionId, long oldScanId, long newScanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanCompareReport", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanCompareReport EndGetScanCompareReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanCompareReport)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanCompareReportAsync(string sessionId, long oldScanId, long newScanId) {
        this.GetScanCompareReportAsync(sessionId, oldScanId, newScanId, null);
    }
    
    /// <remarks/>
    public void GetScanCompareReportAsync(string sessionId, long oldScanId, long newScanId, object userState) {
        if ((this.GetScanCompareReportOperationCompleted == null)) {
            this.GetScanCompareReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanCompareReportOperationCompleted);
        }
        this.InvokeAsync("GetScanCompareReport", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId}, this.GetScanCompareReportOperationCompleted, userState);
    }
    
    private void OnGetScanCompareReportOperationCompleted(object arg) {
        if ((this.GetScanCompareReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanCompareReportCompleted(this, new GetScanCompareReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompareScanResults", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponceScanCompareResults GetCompareScanResults(string sessionId, long oldScanId, long newScanId) {
        object[] results = this.Invoke("GetCompareScanResults", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId});
        return ((CxWSResponceScanCompareResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompareScanResults(string sessionId, long oldScanId, long newScanId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompareScanResults", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponceScanCompareResults EndGetCompareScanResults(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponceScanCompareResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompareScanResultsAsync(string sessionId, long oldScanId, long newScanId) {
        this.GetCompareScanResultsAsync(sessionId, oldScanId, newScanId, null);
    }
    
    /// <remarks/>
    public void GetCompareScanResultsAsync(string sessionId, long oldScanId, long newScanId, object userState) {
        if ((this.GetCompareScanResultsOperationCompleted == null)) {
            this.GetCompareScanResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompareScanResultsOperationCompleted);
        }
        this.InvokeAsync("GetCompareScanResults", new object[] {
                    sessionId,
                    oldScanId,
                    newScanId}, this.GetCompareScanResultsOperationCompleted, userState);
    }
    
    private void OnGetCompareScanResultsOperationCompleted(object arg) {
        if ((this.GetCompareScanResultsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompareScanResultsCompleted(this, new GetCompareScanResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateScanPDFReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateScanPDFReport(string sessionID, long scanID) {
        object[] results = this.Invoke("CreateScanPDFReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateScanPDFReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateScanPDFReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateScanPDFReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateScanPDFReportAsync(string sessionID, long scanID) {
        this.CreateScanPDFReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void CreateScanPDFReportAsync(string sessionID, long scanID, object userState) {
        if ((this.CreateScanPDFReportOperationCompleted == null)) {
            this.CreateScanPDFReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScanPDFReportOperationCompleted);
        }
        this.InvokeAsync("CreateScanPDFReport", new object[] {
                    sessionID,
                    scanID}, this.CreateScanPDFReportOperationCompleted, userState);
    }
    
    private void OnCreateScanPDFReportOperationCompleted(object arg) {
        if ((this.CreateScanPDFReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateScanPDFReportCompleted(this, new CreateScanPDFReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateScannedFilesReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateScannedFilesReport(string sessionID, long scanID) {
        object[] results = this.Invoke("CreateScannedFilesReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateScannedFilesReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateScannedFilesReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateScannedFilesReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateScannedFilesReportAsync(string sessionID, long scanID) {
        this.CreateScannedFilesReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void CreateScannedFilesReportAsync(string sessionID, long scanID, object userState) {
        if ((this.CreateScannedFilesReportOperationCompleted == null)) {
            this.CreateScannedFilesReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScannedFilesReportOperationCompleted);
        }
        this.InvokeAsync("CreateScannedFilesReport", new object[] {
                    sessionID,
                    scanID}, this.CreateScannedFilesReportOperationCompleted, userState);
    }
    
    private void OnCreateScannedFilesReportOperationCompleted(object arg) {
        if ((this.CreateScannedFilesReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateScannedFilesReportCompleted(this, new CreateScannedFilesReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanPDFReportStatus", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CXWSResponseScanReportStatus GetScanPDFReportStatus(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanPDFReportStatus", new object[] {
                    sessionID,
                    scanID});
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanPDFReportStatus(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanPDFReportStatus", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus EndGetScanPDFReportStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanPDFReportStatusAsync(string sessionID, long scanID) {
        this.GetScanPDFReportStatusAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanPDFReportStatusAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanPDFReportStatusOperationCompleted == null)) {
            this.GetScanPDFReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanPDFReportStatusOperationCompleted);
        }
        this.InvokeAsync("GetScanPDFReportStatus", new object[] {
                    sessionID,
                    scanID}, this.GetScanPDFReportStatusOperationCompleted, userState);
    }
    
    private void OnGetScanPDFReportStatusOperationCompleted(object arg) {
        if ((this.GetScanPDFReportStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanPDFReportStatusCompleted(this, new GetScanPDFReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScannedFilesReportStatus", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CXWSResponseScanReportStatus GetScannedFilesReportStatus(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScannedFilesReportStatus", new object[] {
                    sessionID,
                    scanID});
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScannedFilesReportStatus(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScannedFilesReportStatus", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus EndGetScannedFilesReportStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetScannedFilesReportStatusAsync(string sessionID, long scanID) {
        this.GetScannedFilesReportStatusAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScannedFilesReportStatusAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScannedFilesReportStatusOperationCompleted == null)) {
            this.GetScannedFilesReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScannedFilesReportStatusOperationCompleted);
        }
        this.InvokeAsync("GetScannedFilesReportStatus", new object[] {
                    sessionID,
                    scanID}, this.GetScannedFilesReportStatusOperationCompleted, userState);
    }
    
    private void OnGetScannedFilesReportStatusOperationCompleted(object arg) {
        if ((this.GetScannedFilesReportStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScannedFilesReportStatusCompleted(this, new GetScannedFilesReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanPDFReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanPDFReport(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanPDFReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanPDFReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanPDFReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanPDFReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanPDFReportAsync(string sessionID, long scanID) {
        this.GetScanPDFReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanPDFReportAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanPDFReportOperationCompleted == null)) {
            this.GetScanPDFReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanPDFReportOperationCompleted);
        }
        this.InvokeAsync("GetScanPDFReport", new object[] {
                    sessionID,
                    scanID}, this.GetScanPDFReportOperationCompleted, userState);
    }
    
    private void OnGetScanPDFReportOperationCompleted(object arg) {
        if ((this.GetScanPDFReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanPDFReportCompleted(this, new GetScanPDFReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScannedFilesReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScannedFilesReport(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScannedFilesReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScannedFilesReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScannedFilesReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScannedFilesReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScannedFilesReportAsync(string sessionID, long scanID) {
        this.GetScannedFilesReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScannedFilesReportAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScannedFilesReportOperationCompleted == null)) {
            this.GetScannedFilesReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScannedFilesReportOperationCompleted);
        }
        this.InvokeAsync("GetScannedFilesReport", new object[] {
                    sessionID,
                    scanID}, this.GetScannedFilesReportOperationCompleted, userState);
    }
    
    private void OnGetScannedFilesReportOperationCompleted(object arg) {
        if ((this.GetScannedFilesReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScannedFilesReportCompleted(this, new GetScannedFilesReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateScanExcelReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateScanExcelReport(string sessionID, long scanID) {
        object[] results = this.Invoke("CreateScanExcelReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateScanExcelReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateScanExcelReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateScanExcelReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateScanExcelReportAsync(string sessionID, long scanID) {
        this.CreateScanExcelReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void CreateScanExcelReportAsync(string sessionID, long scanID, object userState) {
        if ((this.CreateScanExcelReportOperationCompleted == null)) {
            this.CreateScanExcelReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScanExcelReportOperationCompleted);
        }
        this.InvokeAsync("CreateScanExcelReport", new object[] {
                    sessionID,
                    scanID}, this.CreateScanExcelReportOperationCompleted, userState);
    }
    
    private void OnCreateScanExcelReportOperationCompleted(object arg) {
        if ((this.CreateScanExcelReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateScanExcelReportCompleted(this, new CreateScanExcelReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanExcelReportStatus", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CXWSResponseScanReportStatus GetScanExcelReportStatus(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanExcelReportStatus", new object[] {
                    sessionID,
                    scanID});
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanExcelReportStatus(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanExcelReportStatus", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus EndGetScanExcelReportStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanExcelReportStatusAsync(string sessionID, long scanID) {
        this.GetScanExcelReportStatusAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanExcelReportStatusAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanExcelReportStatusOperationCompleted == null)) {
            this.GetScanExcelReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanExcelReportStatusOperationCompleted);
        }
        this.InvokeAsync("GetScanExcelReportStatus", new object[] {
                    sessionID,
                    scanID}, this.GetScanExcelReportStatusOperationCompleted, userState);
    }
    
    private void OnGetScanExcelReportStatusOperationCompleted(object arg) {
        if ((this.GetScanExcelReportStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanExcelReportStatusCompleted(this, new GetScanExcelReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanExcelReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanExcelReport(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanExcelReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanExcelReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanExcelReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanExcelReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanExcelReportAsync(string sessionID, long scanID) {
        this.GetScanExcelReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanExcelReportAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanExcelReportOperationCompleted == null)) {
            this.GetScanExcelReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanExcelReportOperationCompleted);
        }
        this.InvokeAsync("GetScanExcelReport", new object[] {
                    sessionID,
                    scanID}, this.GetScanExcelReportOperationCompleted, userState);
    }
    
    private void OnGetScanExcelReportOperationCompleted(object arg) {
        if ((this.GetScanExcelReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanExcelReportCompleted(this, new GetScanExcelReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateScanXMLReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateScanXMLReport(string sessionID, long scanID) {
        object[] results = this.Invoke("CreateScanXMLReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateScanXMLReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateScanXMLReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateScanXMLReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateScanXMLReportAsync(string sessionID, long scanID) {
        this.CreateScanXMLReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void CreateScanXMLReportAsync(string sessionID, long scanID, object userState) {
        if ((this.CreateScanXMLReportOperationCompleted == null)) {
            this.CreateScanXMLReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScanXMLReportOperationCompleted);
        }
        this.InvokeAsync("CreateScanXMLReport", new object[] {
                    sessionID,
                    scanID}, this.CreateScanXMLReportOperationCompleted, userState);
    }
    
    private void OnCreateScanXMLReportOperationCompleted(object arg) {
        if ((this.CreateScanXMLReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateScanXMLReportCompleted(this, new CreateScanXMLReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanXMLReportStatus", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CXWSResponseScanReportStatus GetScanXMLReportStatus(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanXMLReportStatus", new object[] {
                    sessionID,
                    scanID});
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanXMLReportStatus(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanXMLReportStatus", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus EndGetScanXMLReportStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanXMLReportStatusAsync(string sessionID, long scanID) {
        this.GetScanXMLReportStatusAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanXMLReportStatusAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanXMLReportStatusOperationCompleted == null)) {
            this.GetScanXMLReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanXMLReportStatusOperationCompleted);
        }
        this.InvokeAsync("GetScanXMLReportStatus", new object[] {
                    sessionID,
                    scanID}, this.GetScanXMLReportStatusOperationCompleted, userState);
    }
    
    private void OnGetScanXMLReportStatusOperationCompleted(object arg) {
        if ((this.GetScanXMLReportStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanXMLReportStatusCompleted(this, new GetScanXMLReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanXMLReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanXMLReport(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanXMLReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanXMLReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanXMLReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanXMLReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanXMLReportAsync(string sessionID, long scanID) {
        this.GetScanXMLReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanXMLReportAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanXMLReportOperationCompleted == null)) {
            this.GetScanXMLReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanXMLReportOperationCompleted);
        }
        this.InvokeAsync("GetScanXMLReport", new object[] {
                    sessionID,
                    scanID}, this.GetScanXMLReportOperationCompleted, userState);
    }
    
    private void OnGetScanXMLReportOperationCompleted(object arg) {
        if ((this.GetScanXMLReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanXMLReportCompleted(this, new GetScanXMLReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanXMLReportByRunId", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanXMLReportByRunId(string sessionID, string runId) {
        object[] results = this.Invoke("GetScanXMLReportByRunId", new object[] {
                    sessionID,
                    runId});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanXMLReportByRunId(string sessionID, string runId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanXMLReportByRunId", new object[] {
                    sessionID,
                    runId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanXMLReportByRunId(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanXMLReportByRunIdAsync(string sessionID, string runId) {
        this.GetScanXMLReportByRunIdAsync(sessionID, runId, null);
    }
    
    /// <remarks/>
    public void GetScanXMLReportByRunIdAsync(string sessionID, string runId, object userState) {
        if ((this.GetScanXMLReportByRunIdOperationCompleted == null)) {
            this.GetScanXMLReportByRunIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanXMLReportByRunIdOperationCompleted);
        }
        this.InvokeAsync("GetScanXMLReportByRunId", new object[] {
                    sessionID,
                    runId}, this.GetScanXMLReportByRunIdOperationCompleted, userState);
    }
    
    private void OnGetScanXMLReportByRunIdOperationCompleted(object arg) {
        if ((this.GetScanXMLReportByRunIdCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanXMLReportByRunIdCompleted(this, new GetScanXMLReportByRunIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanPDFReportByRunId", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanPDFReportByRunId(string sessionID, string runId) {
        object[] results = this.Invoke("GetScanPDFReportByRunId", new object[] {
                    sessionID,
                    runId});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanPDFReportByRunId(string sessionID, string runId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanPDFReportByRunId", new object[] {
                    sessionID,
                    runId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanPDFReportByRunId(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanPDFReportByRunIdAsync(string sessionID, string runId) {
        this.GetScanPDFReportByRunIdAsync(sessionID, runId, null);
    }
    
    /// <remarks/>
    public void GetScanPDFReportByRunIdAsync(string sessionID, string runId, object userState) {
        if ((this.GetScanPDFReportByRunIdOperationCompleted == null)) {
            this.GetScanPDFReportByRunIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanPDFReportByRunIdOperationCompleted);
        }
        this.InvokeAsync("GetScanPDFReportByRunId", new object[] {
                    sessionID,
                    runId}, this.GetScanPDFReportByRunIdOperationCompleted, userState);
    }
    
    private void OnGetScanPDFReportByRunIdOperationCompleted(object arg) {
        if ((this.GetScanPDFReportByRunIdCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanPDFReportByRunIdCompleted(this, new GetScanPDFReportByRunIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateScanRTFReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateScanRTFReport(string sessionID, long scanID) {
        object[] results = this.Invoke("CreateScanRTFReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateScanRTFReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateScanRTFReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateScanRTFReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateScanRTFReportAsync(string sessionID, long scanID) {
        this.CreateScanRTFReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void CreateScanRTFReportAsync(string sessionID, long scanID, object userState) {
        if ((this.CreateScanRTFReportOperationCompleted == null)) {
            this.CreateScanRTFReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScanRTFReportOperationCompleted);
        }
        this.InvokeAsync("CreateScanRTFReport", new object[] {
                    sessionID,
                    scanID}, this.CreateScanRTFReportOperationCompleted, userState);
    }
    
    private void OnCreateScanRTFReportOperationCompleted(object arg) {
        if ((this.CreateScanRTFReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateScanRTFReportCompleted(this, new CreateScanRTFReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanRTFReportStatus", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CXWSResponseScanReportStatus GetScanRTFReportStatus(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanRTFReportStatus", new object[] {
                    sessionID,
                    scanID});
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanRTFReportStatus(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanRTFReportStatus", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus EndGetScanRTFReportStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CXWSResponseScanReportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanRTFReportStatusAsync(string sessionID, long scanID) {
        this.GetScanRTFReportStatusAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanRTFReportStatusAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanRTFReportStatusOperationCompleted == null)) {
            this.GetScanRTFReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanRTFReportStatusOperationCompleted);
        }
        this.InvokeAsync("GetScanRTFReportStatus", new object[] {
                    sessionID,
                    scanID}, this.GetScanRTFReportStatusOperationCompleted, userState);
    }
    
    private void OnGetScanRTFReportStatusOperationCompleted(object arg) {
        if ((this.GetScanRTFReportStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanRTFReportStatusCompleted(this, new GetScanRTFReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanRTFReport", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseScanResults GetScanRTFReport(string sessionID, long scanID) {
        object[] results = this.Invoke("GetScanRTFReport", new object[] {
                    sessionID,
                    scanID});
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetScanRTFReport(string sessionID, long scanID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetScanRTFReport", new object[] {
                    sessionID,
                    scanID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseScanResults EndGetScanRTFReport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseScanResults)(results[0]));
    }
    
    /// <remarks/>
    public void GetScanRTFReportAsync(string sessionID, long scanID) {
        this.GetScanRTFReportAsync(sessionID, scanID, null);
    }
    
    /// <remarks/>
    public void GetScanRTFReportAsync(string sessionID, long scanID, object userState) {
        if ((this.GetScanRTFReportOperationCompleted == null)) {
            this.GetScanRTFReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanRTFReportOperationCompleted);
        }
        this.InvokeAsync("GetScanRTFReport", new object[] {
                    sessionID,
                    scanID}, this.GetScanRTFReportOperationCompleted, userState);
    }
    
    private void OnGetScanRTFReportOperationCompleted(object arg) {
        if ((this.GetScanRTFReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetScanRTFReportCompleted(this, new GetScanRTFReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryDescription", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseQueryDescription GetQueryDescription(string sessionId, int cweId) {
        object[] results = this.Invoke("GetQueryDescription", new object[] {
                    sessionId,
                    cweId});
        return ((CxWSResponseQueryDescription)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetQueryDescription(string sessionId, int cweId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetQueryDescription", new object[] {
                    sessionId,
                    cweId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseQueryDescription EndGetQueryDescription(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseQueryDescription)(results[0]));
    }
    
    /// <remarks/>
    public void GetQueryDescriptionAsync(string sessionId, int cweId) {
        this.GetQueryDescriptionAsync(sessionId, cweId, null);
    }
    
    /// <remarks/>
    public void GetQueryDescriptionAsync(string sessionId, int cweId, object userState) {
        if ((this.GetQueryDescriptionOperationCompleted == null)) {
            this.GetQueryDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryDescriptionOperationCompleted);
        }
        this.InvokeAsync("GetQueryDescription", new object[] {
                    sessionId,
                    cweId}, this.GetQueryDescriptionOperationCompleted, userState);
    }
    
    private void OnGetQueryDescriptionOperationCompleted(object arg) {
        if ((this.GetQueryDescriptionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetQueryDescriptionCompleted(this, new GetQueryDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourceByScanID", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSourceContent GetSourceByScanID(string sessionID, long scanID, string fileToRetreive) {
        object[] results = this.Invoke("GetSourceByScanID", new object[] {
                    sessionID,
                    scanID,
                    fileToRetreive});
        return ((CxWSResponseSourceContent)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSourceByScanID(string sessionID, long scanID, string fileToRetreive, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSourceByScanID", new object[] {
                    sessionID,
                    scanID,
                    fileToRetreive}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSourceContent EndGetSourceByScanID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSourceContent)(results[0]));
    }
    
    /// <remarks/>
    public void GetSourceByScanIDAsync(string sessionID, long scanID, string fileToRetreive) {
        this.GetSourceByScanIDAsync(sessionID, scanID, fileToRetreive, null);
    }
    
    /// <remarks/>
    public void GetSourceByScanIDAsync(string sessionID, long scanID, string fileToRetreive, object userState) {
        if ((this.GetSourceByScanIDOperationCompleted == null)) {
            this.GetSourceByScanIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceByScanIDOperationCompleted);
        }
        this.InvokeAsync("GetSourceByScanID", new object[] {
                    sessionID,
                    scanID,
                    fileToRetreive}, this.GetSourceByScanIDOperationCompleted, userState);
    }
    
    private void OnGetSourceByScanIDOperationCompleted(object arg) {
        if ((this.GetSourceByScanIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSourceByScanIDCompleted(this, new GetSourceByScanIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultStateList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseResultStateList GetResultStateList(string sessionID) {
        object[] results = this.Invoke("GetResultStateList", new object[] {
                    sessionID});
        return ((CxWSResponseResultStateList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResultStateList(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResultStateList", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseResultStateList EndGetResultStateList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseResultStateList)(results[0]));
    }
    
    /// <remarks/>
    public void GetResultStateListAsync(string sessionID) {
        this.GetResultStateListAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetResultStateListAsync(string sessionID, object userState) {
        if ((this.GetResultStateListOperationCompleted == null)) {
            this.GetResultStateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultStateListOperationCompleted);
        }
        this.InvokeAsync("GetResultStateList", new object[] {
                    sessionID}, this.GetResultStateListOperationCompleted, userState);
    }
    
    private void OnGetResultStateListOperationCompleted(object arg) {
        if ((this.GetResultStateListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetResultStateListCompleted(this, new GetResultStateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ForgotPassword", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse ForgotPassword(string loginUrl, string email) {
        object[] results = this.Invoke("ForgotPassword", new object[] {
                    loginUrl,
                    email});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginForgotPassword(string loginUrl, string email, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ForgotPassword", new object[] {
                    loginUrl,
                    email}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndForgotPassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void ForgotPasswordAsync(string loginUrl, string email) {
        this.ForgotPasswordAsync(loginUrl, email, null);
    }
    
    /// <remarks/>
    public void ForgotPasswordAsync(string loginUrl, string email, object userState) {
        if ((this.ForgotPasswordOperationCompleted == null)) {
            this.ForgotPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForgotPasswordOperationCompleted);
        }
        this.InvokeAsync("ForgotPassword", new object[] {
                    loginUrl,
                    email}, this.ForgotPasswordOperationCompleted, userState);
    }
    
    private void OnForgotPasswordOperationCompleted(object arg) {
        if ((this.ForgotPasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ForgotPasswordCompleted(this, new ForgotPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ResetPasswordByEmail", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse ResetPasswordByEmail(string passwordChangePageUrl, string email) {
        object[] results = this.Invoke("ResetPasswordByEmail", new object[] {
                    passwordChangePageUrl,
                    email});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginResetPasswordByEmail(string passwordChangePageUrl, string email, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ResetPasswordByEmail", new object[] {
                    passwordChangePageUrl,
                    email}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndResetPasswordByEmail(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void ResetPasswordByEmailAsync(string passwordChangePageUrl, string email) {
        this.ResetPasswordByEmailAsync(passwordChangePageUrl, email, null);
    }
    
    /// <remarks/>
    public void ResetPasswordByEmailAsync(string passwordChangePageUrl, string email, object userState) {
        if ((this.ResetPasswordByEmailOperationCompleted == null)) {
            this.ResetPasswordByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordByEmailOperationCompleted);
        }
        this.InvokeAsync("ResetPasswordByEmail", new object[] {
                    passwordChangePageUrl,
                    email}, this.ResetPasswordByEmailOperationCompleted, userState);
    }
    
    private void OnResetPasswordByEmailOperationCompleted(object arg) {
        if ((this.ResetPasswordByEmailCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ResetPasswordByEmailCompleted(this, new ResetPasswordByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CheckChangePasswordToken", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CheckChangePasswordToken(string token) {
        object[] results = this.Invoke("CheckChangePasswordToken", new object[] {
                    token});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckChangePasswordToken(string token, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckChangePasswordToken", new object[] {
                    token}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCheckChangePasswordToken(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CheckChangePasswordTokenAsync(string token) {
        this.CheckChangePasswordTokenAsync(token, null);
    }
    
    /// <remarks/>
    public void CheckChangePasswordTokenAsync(string token, object userState) {
        if ((this.CheckChangePasswordTokenOperationCompleted == null)) {
            this.CheckChangePasswordTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckChangePasswordTokenOperationCompleted);
        }
        this.InvokeAsync("CheckChangePasswordToken", new object[] {
                    token}, this.CheckChangePasswordTokenOperationCompleted, userState);
    }
    
    private void OnCheckChangePasswordTokenOperationCompleted(object arg) {
        if ((this.CheckChangePasswordTokenCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckChangePasswordTokenCompleted(this, new CheckChangePasswordTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ChangePasswordWithToken", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse ChangePasswordWithToken(string token, string password) {
        object[] results = this.Invoke("ChangePasswordWithToken", new object[] {
                    token,
                    password});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePasswordWithToken(string token, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePasswordWithToken", new object[] {
                    token,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndChangePasswordWithToken(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordWithTokenAsync(string token, string password) {
        this.ChangePasswordWithTokenAsync(token, password, null);
    }
    
    /// <remarks/>
    public void ChangePasswordWithTokenAsync(string token, string password, object userState) {
        if ((this.ChangePasswordWithTokenOperationCompleted == null)) {
            this.ChangePasswordWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordWithTokenOperationCompleted);
        }
        this.InvokeAsync("ChangePasswordWithToken", new object[] {
                    token,
                    password}, this.ChangePasswordWithTokenOperationCompleted, userState);
    }
    
    private void OnChangePasswordWithTokenOperationCompleted(object arg) {
        if ((this.ChangePasswordWithTokenCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordWithTokenCompleted(this, new ChangePasswordWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ChangePassword", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse ChangePassword(string sessionID, string oldPsw, string newPsw) {
        object[] results = this.Invoke("ChangePassword", new object[] {
                    sessionID,
                    oldPsw,
                    newPsw});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePassword(string sessionID, string oldPsw, string newPsw, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePassword", new object[] {
                    sessionID,
                    oldPsw,
                    newPsw}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndChangePassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordAsync(string sessionID, string oldPsw, string newPsw) {
        this.ChangePasswordAsync(sessionID, oldPsw, newPsw, null);
    }
    
    /// <remarks/>
    public void ChangePasswordAsync(string sessionID, string oldPsw, string newPsw, object userState) {
        if ((this.ChangePasswordOperationCompleted == null)) {
            this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
        }
        this.InvokeAsync("ChangePassword", new object[] {
                    sessionID,
                    oldPsw,
                    newPsw}, this.ChangePasswordOperationCompleted, userState);
    }
    
    private void OnChangePasswordOperationCompleted(object arg) {
        if ((this.ChangePasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompanies", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseGroupList GetCompanies() {
        object[] results = this.Invoke("GetCompanies", new object[0]);
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompanies(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompanies", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseGroupList EndGetCompanies(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompaniesAsync() {
        this.GetCompaniesAsync(null);
    }
    
    /// <remarks/>
    public void GetCompaniesAsync(object userState) {
        if ((this.GetCompaniesOperationCompleted == null)) {
            this.GetCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesOperationCompleted);
        }
        this.InvokeAsync("GetCompanies", new object[0], this.GetCompaniesOperationCompleted, userState);
    }
    
    private void OnGetCompaniesOperationCompleted(object arg) {
        if ((this.GetCompaniesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompaniesCompleted(this, new GetCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RegisterPendingUser", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse RegisterPendingUser(WebClientPendingUser pendingUser, string pendingUsersTableUrl) {
        object[] results = this.Invoke("RegisterPendingUser", new object[] {
                    pendingUser,
                    pendingUsersTableUrl});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRegisterPendingUser(WebClientPendingUser pendingUser, string pendingUsersTableUrl, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RegisterPendingUser", new object[] {
                    pendingUser,
                    pendingUsersTableUrl}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndRegisterPendingUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void RegisterPendingUserAsync(WebClientPendingUser pendingUser, string pendingUsersTableUrl) {
        this.RegisterPendingUserAsync(pendingUser, pendingUsersTableUrl, null);
    }
    
    /// <remarks/>
    public void RegisterPendingUserAsync(WebClientPendingUser pendingUser, string pendingUsersTableUrl, object userState) {
        if ((this.RegisterPendingUserOperationCompleted == null)) {
            this.RegisterPendingUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPendingUserOperationCompleted);
        }
        this.InvokeAsync("RegisterPendingUser", new object[] {
                    pendingUser,
                    pendingUsersTableUrl}, this.RegisterPendingUserOperationCompleted, userState);
    }
    
    private void OnRegisterPendingUserOperationCompleted(object arg) {
        if ((this.RegisterPendingUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RegisterPendingUserCompleted(this, new RegisterPendingUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPendingUsersList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePendingUsersList GetPendingUsersList(string sessionID) {
        object[] results = this.Invoke("GetPendingUsersList", new object[] {
                    sessionID});
        return ((CxWSResponsePendingUsersList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPendingUsersList(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPendingUsersList", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePendingUsersList EndGetPendingUsersList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePendingUsersList)(results[0]));
    }
    
    /// <remarks/>
    public void GetPendingUsersListAsync(string sessionID) {
        this.GetPendingUsersListAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetPendingUsersListAsync(string sessionID, object userState) {
        if ((this.GetPendingUsersListOperationCompleted == null)) {
            this.GetPendingUsersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingUsersListOperationCompleted);
        }
        this.InvokeAsync("GetPendingUsersList", new object[] {
                    sessionID}, this.GetPendingUsersListOperationCompleted, userState);
    }
    
    private void OnGetPendingUsersListOperationCompleted(object arg) {
        if ((this.GetPendingUsersListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPendingUsersListCompleted(this, new GetPendingUsersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeletePendingUsers", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeletePendingUsers(string sessionID, int[] userIdList) {
        object[] results = this.Invoke("DeletePendingUsers", new object[] {
                    sessionID,
                    userIdList});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeletePendingUsers(string sessionID, int[] userIdList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeletePendingUsers", new object[] {
                    sessionID,
                    userIdList}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeletePendingUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeletePendingUsersAsync(string sessionID, int[] userIdList) {
        this.DeletePendingUsersAsync(sessionID, userIdList, null);
    }
    
    /// <remarks/>
    public void DeletePendingUsersAsync(string sessionID, int[] userIdList, object userState) {
        if ((this.DeletePendingUsersOperationCompleted == null)) {
            this.DeletePendingUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingUsersOperationCompleted);
        }
        this.InvokeAsync("DeletePendingUsers", new object[] {
                    sessionID,
                    userIdList}, this.DeletePendingUsersOperationCompleted, userState);
    }
    
    private void OnDeletePendingUsersOperationCompleted(object arg) {
        if ((this.DeletePendingUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeletePendingUsersCompleted(this, new DeletePendingUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ApprovePendingUsers", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse ApprovePendingUsers(string sessionID, WebClientApprovedUser[] userList) {
        object[] results = this.Invoke("ApprovePendingUsers", new object[] {
                    sessionID,
                    userList});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginApprovePendingUsers(string sessionID, WebClientApprovedUser[] userList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ApprovePendingUsers", new object[] {
                    sessionID,
                    userList}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndApprovePendingUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void ApprovePendingUsersAsync(string sessionID, WebClientApprovedUser[] userList) {
        this.ApprovePendingUsersAsync(sessionID, userList, null);
    }
    
    /// <remarks/>
    public void ApprovePendingUsersAsync(string sessionID, WebClientApprovedUser[] userList, object userState) {
        if ((this.ApprovePendingUsersOperationCompleted == null)) {
            this.ApprovePendingUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApprovePendingUsersOperationCompleted);
        }
        this.InvokeAsync("ApprovePendingUsers", new object[] {
                    sessionID,
                    userList}, this.ApprovePendingUsersOperationCompleted, userState);
    }
    
    private void OnApprovePendingUsersOperationCompleted(object arg) {
        if ((this.ApprovePendingUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ApprovePendingUsersCompleted(this, new ApprovePendingUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetUserProfileData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseProfileData GetUserProfileData(string sessionID) {
        object[] results = this.Invoke("GetUserProfileData", new object[] {
                    sessionID});
        return ((CxWSResponseProfileData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserProfileData(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserProfileData", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseProfileData EndGetUserProfileData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseProfileData)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserProfileDataAsync(string sessionID) {
        this.GetUserProfileDataAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetUserProfileDataAsync(string sessionID, object userState) {
        if ((this.GetUserProfileDataOperationCompleted == null)) {
            this.GetUserProfileDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProfileDataOperationCompleted);
        }
        this.InvokeAsync("GetUserProfileData", new object[] {
                    sessionID}, this.GetUserProfileDataOperationCompleted, userState);
    }
    
    private void OnGetUserProfileDataOperationCompleted(object arg) {
        if ((this.GetUserProfileDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserProfileDataCompleted(this, new GetUserProfileDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateUserProfileData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateUserProfileData(string sessionID, ProfileData userProfileData) {
        object[] results = this.Invoke("UpdateUserProfileData", new object[] {
                    sessionID,
                    userProfileData});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUserProfileData(string sessionID, ProfileData userProfileData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserProfileData", new object[] {
                    sessionID,
                    userProfileData}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateUserProfileData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateUserProfileDataAsync(string sessionID, ProfileData userProfileData) {
        this.UpdateUserProfileDataAsync(sessionID, userProfileData, null);
    }
    
    /// <remarks/>
    public void UpdateUserProfileDataAsync(string sessionID, ProfileData userProfileData, object userState) {
        if ((this.UpdateUserProfileDataOperationCompleted == null)) {
            this.UpdateUserProfileDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserProfileDataOperationCompleted);
        }
        this.InvokeAsync("UpdateUserProfileData", new object[] {
                    sessionID,
                    userProfileData}, this.UpdateUserProfileDataOperationCompleted, userState);
    }
    
    private void OnUpdateUserProfileDataOperationCompleted(object arg) {
        if ((this.UpdateUserProfileDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserProfileDataCompleted(this, new UpdateUserProfileDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsers", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseUserData GetAllUsers(string sessionID) {
        object[] results = this.Invoke("GetAllUsers", new object[] {
                    sessionID});
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUsers(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUsers", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseUserData EndGetAllUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUsersAsync(string sessionID) {
        this.GetAllUsersAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetAllUsersAsync(string sessionID, object userState) {
        if ((this.GetAllUsersOperationCompleted == null)) {
            this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
        }
        this.InvokeAsync("GetAllUsers", new object[] {
                    sessionID}, this.GetAllUsersOperationCompleted, userState);
    }
    
    private void OnGetAllUsersOperationCompleted(object arg) {
        if ((this.GetAllUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsersInGroup", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseUserData GetAllUsersInGroup(string sessionID, string groupID, bool isRecursive) {
        object[] results = this.Invoke("GetAllUsersInGroup", new object[] {
                    sessionID,
                    groupID,
                    isRecursive});
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUsersInGroup(string sessionID, string groupID, bool isRecursive, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUsersInGroup", new object[] {
                    sessionID,
                    groupID,
                    isRecursive}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseUserData EndGetAllUsersInGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseUserData)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUsersInGroupAsync(string sessionID, string groupID, bool isRecursive) {
        this.GetAllUsersInGroupAsync(sessionID, groupID, isRecursive, null);
    }
    
    /// <remarks/>
    public void GetAllUsersInGroupAsync(string sessionID, string groupID, bool isRecursive, object userState) {
        if ((this.GetAllUsersInGroupOperationCompleted == null)) {
            this.GetAllUsersInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersInGroupOperationCompleted);
        }
        this.InvokeAsync("GetAllUsersInGroup", new object[] {
                    sessionID,
                    groupID,
                    isRecursive}, this.GetAllUsersInGroupOperationCompleted, userState);
    }
    
    private void OnGetAllUsersInGroupOperationCompleted(object arg) {
        if ((this.GetAllUsersInGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUsersInGroupCompleted(this, new GetAllUsersInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteUser", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteUser(string sessionID, int userID) {
        object[] results = this.Invoke("DeleteUser", new object[] {
                    sessionID,
                    userID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteUser(string sessionID, int userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteUser", new object[] {
                    sessionID,
                    userID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteUserAsync(string sessionID, int userID) {
        this.DeleteUserAsync(sessionID, userID, null);
    }
    
    /// <remarks/>
    public void DeleteUserAsync(string sessionID, int userID, object userState) {
        if ((this.DeleteUserOperationCompleted == null)) {
            this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
        }
        this.InvokeAsync("DeleteUser", new object[] {
                    sessionID,
                    userID}, this.DeleteUserOperationCompleted, userState);
    }
    
    private void OnDeleteUserOperationCompleted(object arg) {
        if ((this.DeleteUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetHierarchyGroupTree", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseHierarchyGroupNodes GetHierarchyGroupTree(string sessionID) {
        object[] results = this.Invoke("GetHierarchyGroupTree", new object[] {
                    sessionID});
        return ((CxWSResponseHierarchyGroupNodes)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetHierarchyGroupTree(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetHierarchyGroupTree", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseHierarchyGroupNodes EndGetHierarchyGroupTree(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseHierarchyGroupNodes)(results[0]));
    }
    
    /// <remarks/>
    public void GetHierarchyGroupTreeAsync(string sessionID) {
        this.GetHierarchyGroupTreeAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetHierarchyGroupTreeAsync(string sessionID, object userState) {
        if ((this.GetHierarchyGroupTreeOperationCompleted == null)) {
            this.GetHierarchyGroupTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHierarchyGroupTreeOperationCompleted);
        }
        this.InvokeAsync("GetHierarchyGroupTree", new object[] {
                    sessionID}, this.GetHierarchyGroupTreeOperationCompleted, userState);
    }
    
    private void OnGetHierarchyGroupTreeOperationCompleted(object arg) {
        if ((this.GetHierarchyGroupTreeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetHierarchyGroupTreeCompleted(this, new GetHierarchyGroupTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetUserActivationState", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SetUserActivationState(string sessionID, int userID, bool activationState) {
        object[] results = this.Invoke("SetUserActivationState", new object[] {
                    sessionID,
                    userID,
                    activationState});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserActivationState(string sessionID, int userID, bool activationState, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserActivationState", new object[] {
                    sessionID,
                    userID,
                    activationState}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSetUserActivationState(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SetUserActivationStateAsync(string sessionID, int userID, bool activationState) {
        this.SetUserActivationStateAsync(sessionID, userID, activationState, null);
    }
    
    /// <remarks/>
    public void SetUserActivationStateAsync(string sessionID, int userID, bool activationState, object userState) {
        if ((this.SetUserActivationStateOperationCompleted == null)) {
            this.SetUserActivationStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserActivationStateOperationCompleted);
        }
        this.InvokeAsync("SetUserActivationState", new object[] {
                    sessionID,
                    userID,
                    activationState}, this.SetUserActivationStateOperationCompleted, userState);
    }
    
    private void OnSetUserActivationStateOperationCompleted(object arg) {
        if ((this.SetUserActivationStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserActivationStateCompleted(this, new SetUserActivationStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/AddNewUser", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse AddNewUser(string sessionID, UserData userData) {
        object[] results = this.Invoke("AddNewUser", new object[] {
                    sessionID,
                    userData});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddNewUser(string sessionID, UserData userData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddNewUser", new object[] {
                    sessionID,
                    userData}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndAddNewUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void AddNewUserAsync(string sessionID, UserData userData) {
        this.AddNewUserAsync(sessionID, userData, null);
    }
    
    /// <remarks/>
    public void AddNewUserAsync(string sessionID, UserData userData, object userState) {
        if ((this.AddNewUserOperationCompleted == null)) {
            this.AddNewUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewUserOperationCompleted);
        }
        this.InvokeAsync("AddNewUser", new object[] {
                    sessionID,
                    userData}, this.AddNewUserOperationCompleted, userState);
    }
    
    private void OnAddNewUserOperationCompleted(object arg) {
        if ((this.AddNewUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddNewUserCompleted(this, new AddNewUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateUserData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateUserData(string sessionID, UserData userData) {
        object[] results = this.Invoke("UpdateUserData", new object[] {
                    sessionID,
                    userData});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUserData(string sessionID, UserData userData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserData", new object[] {
                    sessionID,
                    userData}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateUserData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateUserDataAsync(string sessionID, UserData userData) {
        this.UpdateUserDataAsync(sessionID, userData, null);
    }
    
    /// <remarks/>
    public void UpdateUserDataAsync(string sessionID, UserData userData, object userState) {
        if ((this.UpdateUserDataOperationCompleted == null)) {
            this.UpdateUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserDataOperationCompleted);
        }
        this.InvokeAsync("UpdateUserData", new object[] {
                    sessionID,
                    userData}, this.UpdateUserDataOperationCompleted, userState);
    }
    
    private void OnUpdateUserDataOperationCompleted(object arg) {
        if ((this.UpdateUserDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserDataCompleted(this, new UpdateUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServerLicenseData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseServerLicenseData GetServerLicenseData(string sessionID) {
        object[] results = this.Invoke("GetServerLicenseData", new object[] {
                    sessionID});
        return ((CxWSResponseServerLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServerLicenseData(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServerLicenseData", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseServerLicenseData EndGetServerLicenseData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseServerLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public void GetServerLicenseDataAsync(string sessionID) {
        this.GetServerLicenseDataAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetServerLicenseDataAsync(string sessionID, object userState) {
        if ((this.GetServerLicenseDataOperationCompleted == null)) {
            this.GetServerLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLicenseDataOperationCompleted);
        }
        this.InvokeAsync("GetServerLicenseData", new object[] {
                    sessionID}, this.GetServerLicenseDataOperationCompleted, userState);
    }
    
    private void OnGetServerLicenseDataOperationCompleted(object arg) {
        if ((this.GetServerLicenseDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServerLicenseDataCompleted(this, new GetServerLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetUsersLicenseData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseUsersLicenseData GetUsersLicenseData(string sessionID, string groupID) {
        object[] results = this.Invoke("GetUsersLicenseData", new object[] {
                    sessionID,
                    groupID});
        return ((CxWSResponseUsersLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUsersLicenseData(string sessionID, string groupID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsersLicenseData", new object[] {
                    sessionID,
                    groupID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseUsersLicenseData EndGetUsersLicenseData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseUsersLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public void GetUsersLicenseDataAsync(string sessionID, string groupID) {
        this.GetUsersLicenseDataAsync(sessionID, groupID, null);
    }
    
    /// <remarks/>
    public void GetUsersLicenseDataAsync(string sessionID, string groupID, object userState) {
        if ((this.GetUsersLicenseDataOperationCompleted == null)) {
            this.GetUsersLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersLicenseDataOperationCompleted);
        }
        this.InvokeAsync("GetUsersLicenseData", new object[] {
                    sessionID,
                    groupID}, this.GetUsersLicenseDataOperationCompleted, userState);
    }
    
    private void OnGetUsersLicenseDataOperationCompleted(object arg) {
        if ((this.GetUsersLicenseDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUsersLicenseDataCompleted(this, new GetUsersLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompaniesLicenseData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseCompaniesLicenseData GetCompaniesLicenseData(string sessionID, string groupID) {
        object[] results = this.Invoke("GetCompaniesLicenseData", new object[] {
                    sessionID,
                    groupID});
        return ((CxWSResponseCompaniesLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompaniesLicenseData(string sessionID, string groupID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompaniesLicenseData", new object[] {
                    sessionID,
                    groupID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseCompaniesLicenseData EndGetCompaniesLicenseData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseCompaniesLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompaniesLicenseDataAsync(string sessionID, string groupID) {
        this.GetCompaniesLicenseDataAsync(sessionID, groupID, null);
    }
    
    /// <remarks/>
    public void GetCompaniesLicenseDataAsync(string sessionID, string groupID, object userState) {
        if ((this.GetCompaniesLicenseDataOperationCompleted == null)) {
            this.GetCompaniesLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesLicenseDataOperationCompleted);
        }
        this.InvokeAsync("GetCompaniesLicenseData", new object[] {
                    sessionID,
                    groupID}, this.GetCompaniesLicenseDataOperationCompleted, userState);
    }
    
    private void OnGetCompaniesLicenseDataOperationCompleted(object arg) {
        if ((this.GetCompaniesLicenseDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompaniesLicenseDataCompleted(this, new GetCompaniesLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSPLicenseData", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSPLicenseData GetSPLicenseData(string sessionID, string groupID) {
        object[] results = this.Invoke("GetSPLicenseData", new object[] {
                    sessionID,
                    groupID});
        return ((CxWSResponseSPLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSPLicenseData(string sessionID, string groupID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSPLicenseData", new object[] {
                    sessionID,
                    groupID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSPLicenseData EndGetSPLicenseData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSPLicenseData)(results[0]));
    }
    
    /// <remarks/>
    public void GetSPLicenseDataAsync(string sessionID, string groupID) {
        this.GetSPLicenseDataAsync(sessionID, groupID, null);
    }
    
    /// <remarks/>
    public void GetSPLicenseDataAsync(string sessionID, string groupID, object userState) {
        if ((this.GetSPLicenseDataOperationCompleted == null)) {
            this.GetSPLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSPLicenseDataOperationCompleted);
        }
        this.InvokeAsync("GetSPLicenseData", new object[] {
                    sessionID,
                    groupID}, this.GetSPLicenseDataOperationCompleted, userState);
    }
    
    private void OnGetSPLicenseDataOperationCompleted(object arg) {
        if ((this.GetSPLicenseDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSPLicenseDataCompleted(this, new GetSPLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateUserGroups", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateUserGroups(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role) {
        object[] results = this.Invoke("UpdateUserGroups", new object[] {
                    sessionID,
                    userID,
                    unsubscribedGroups,
                    subscribedGroups,
                    role});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUserGroups(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserGroups", new object[] {
                    sessionID,
                    userID,
                    unsubscribedGroups,
                    subscribedGroups,
                    role}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateUserGroups(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateUserGroupsAsync(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role) {
        this.UpdateUserGroupsAsync(sessionID, userID, unsubscribedGroups, subscribedGroups, role, null);
    }
    
    /// <remarks/>
    public void UpdateUserGroupsAsync(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role, object userState) {
        if ((this.UpdateUserGroupsOperationCompleted == null)) {
            this.UpdateUserGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserGroupsOperationCompleted);
        }
        this.InvokeAsync("UpdateUserGroups", new object[] {
                    sessionID,
                    userID,
                    unsubscribedGroups,
                    subscribedGroups,
                    role}, this.UpdateUserGroupsOperationCompleted, userState);
    }
    
    private void OnUpdateUserGroupsOperationCompleted(object arg) {
        if ((this.UpdateUserGroupsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserGroupsCompleted(this, new UpdateUserGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompaniesList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseGroupList GetCompaniesList() {
        object[] results = this.Invoke("GetCompaniesList", new object[0]);
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompaniesList(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompaniesList", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseGroupList EndGetCompaniesList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseGroupList)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompaniesListAsync() {
        this.GetCompaniesListAsync(null);
    }
    
    /// <remarks/>
    public void GetCompaniesListAsync(object userState) {
        if ((this.GetCompaniesListOperationCompleted == null)) {
            this.GetCompaniesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesListOperationCompleted);
        }
        this.InvokeAsync("GetCompaniesList", new object[0], this.GetCompaniesListOperationCompleted, userState);
    }
    
    private void OnGetCompaniesListOperationCompleted(object arg) {
        if ((this.GetCompaniesListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompaniesListCompleted(this, new GetCompaniesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidUserName", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse IsValidUserName(string sessionID, string username) {
        object[] results = this.Invoke("IsValidUserName", new object[] {
                    sessionID,
                    username});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsValidUserName(string sessionID, string username, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsValidUserName", new object[] {
                    sessionID,
                    username}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndIsValidUserName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void IsValidUserNameAsync(string sessionID, string username) {
        this.IsValidUserNameAsync(sessionID, username, null);
    }
    
    /// <remarks/>
    public void IsValidUserNameAsync(string sessionID, string username, object userState) {
        if ((this.IsValidUserNameOperationCompleted == null)) {
            this.IsValidUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidUserNameOperationCompleted);
        }
        this.InvokeAsync("IsValidUserName", new object[] {
                    sessionID,
                    username}, this.IsValidUserNameOperationCompleted, userState);
    }
    
    private void OnIsValidUserNameOperationCompleted(object arg) {
        if ((this.IsValidUserNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsValidUserNameCompleted(this, new IsValidUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAvailbleDomainNames", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseNameList GetAvailbleDomainNames(string sessionID) {
        object[] results = this.Invoke("GetAvailbleDomainNames", new object[] {
                    sessionID});
        return ((CxWSResponseNameList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAvailbleDomainNames(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAvailbleDomainNames", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseNameList EndGetAvailbleDomainNames(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseNameList)(results[0]));
    }
    
    /// <remarks/>
    public void GetAvailbleDomainNamesAsync(string sessionID) {
        this.GetAvailbleDomainNamesAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetAvailbleDomainNamesAsync(string sessionID, object userState) {
        if ((this.GetAvailbleDomainNamesOperationCompleted == null)) {
            this.GetAvailbleDomainNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailbleDomainNamesOperationCompleted);
        }
        this.InvokeAsync("GetAvailbleDomainNames", new object[] {
                    sessionID}, this.GetAvailbleDomainNamesOperationCompleted, userState);
    }
    
    private void OnGetAvailbleDomainNamesOperationCompleted(object arg) {
        if ((this.GetAvailbleDomainNamesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAvailbleDomainNamesCompleted(this, new GetAvailbleDomainNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsersFromDomain", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseDomainUserList GetAllUsersFromDomain(string sessionID, string domain, string i_SearchPattern) {
        object[] results = this.Invoke("GetAllUsersFromDomain", new object[] {
                    sessionID,
                    domain,
                    i_SearchPattern});
        return ((CxWSResponseDomainUserList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUsersFromDomain(string sessionID, string domain, string i_SearchPattern, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUsersFromDomain", new object[] {
                    sessionID,
                    domain,
                    i_SearchPattern}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseDomainUserList EndGetAllUsersFromDomain(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseDomainUserList)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUsersFromDomainAsync(string sessionID, string domain, string i_SearchPattern) {
        this.GetAllUsersFromDomainAsync(sessionID, domain, i_SearchPattern, null);
    }
    
    /// <remarks/>
    public void GetAllUsersFromDomainAsync(string sessionID, string domain, string i_SearchPattern, object userState) {
        if ((this.GetAllUsersFromDomainOperationCompleted == null)) {
            this.GetAllUsersFromDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersFromDomainOperationCompleted);
        }
        this.InvokeAsync("GetAllUsersFromDomain", new object[] {
                    sessionID,
                    domain,
                    i_SearchPattern}, this.GetAllUsersFromDomainOperationCompleted, userState);
    }
    
    private void OnGetAllUsersFromDomainOperationCompleted(object arg) {
        if ((this.GetAllUsersFromDomainCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUsersFromDomainCompleted(this, new GetAllUsersFromDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewTeam", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateNewTeam(string sessionID, string parentTeamID, string newTeamName) {
        object[] results = this.Invoke("CreateNewTeam", new object[] {
                    sessionID,
                    parentTeamID,
                    newTeamName});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateNewTeam(string sessionID, string parentTeamID, string newTeamName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateNewTeam", new object[] {
                    sessionID,
                    parentTeamID,
                    newTeamName}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateNewTeam(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateNewTeamAsync(string sessionID, string parentTeamID, string newTeamName) {
        this.CreateNewTeamAsync(sessionID, parentTeamID, newTeamName, null);
    }
    
    /// <remarks/>
    public void CreateNewTeamAsync(string sessionID, string parentTeamID, string newTeamName, object userState) {
        if ((this.CreateNewTeamOperationCompleted == null)) {
            this.CreateNewTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTeamOperationCompleted);
        }
        this.InvokeAsync("CreateNewTeam", new object[] {
                    sessionID,
                    parentTeamID,
                    newTeamName}, this.CreateNewTeamOperationCompleted, userState);
    }
    
    private void OnCreateNewTeamOperationCompleted(object arg) {
        if ((this.CreateNewTeamCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateNewTeamCompleted(this, new CreateNewTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RenameTeam", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse RenameTeam(string sessionID, string teamID, string newTeamName) {
        object[] results = this.Invoke("RenameTeam", new object[] {
                    sessionID,
                    teamID,
                    newTeamName});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRenameTeam(string sessionID, string teamID, string newTeamName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RenameTeam", new object[] {
                    sessionID,
                    teamID,
                    newTeamName}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndRenameTeam(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void RenameTeamAsync(string sessionID, string teamID, string newTeamName) {
        this.RenameTeamAsync(sessionID, teamID, newTeamName, null);
    }
    
    /// <remarks/>
    public void RenameTeamAsync(string sessionID, string teamID, string newTeamName, object userState) {
        if ((this.RenameTeamOperationCompleted == null)) {
            this.RenameTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameTeamOperationCompleted);
        }
        this.InvokeAsync("RenameTeam", new object[] {
                    sessionID,
                    teamID,
                    newTeamName}, this.RenameTeamOperationCompleted, userState);
    }
    
    private void OnRenameTeamOperationCompleted(object arg) {
        if ((this.RenameTeamCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RenameTeamCompleted(this, new RenameTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllTeams", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseTeamData GetAllTeams(string sessionID) {
        object[] results = this.Invoke("GetAllTeams", new object[] {
                    sessionID});
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllTeams(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllTeams", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseTeamData EndGetAllTeams(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllTeamsAsync(string sessionID) {
        this.GetAllTeamsAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetAllTeamsAsync(string sessionID, object userState) {
        if ((this.GetAllTeamsOperationCompleted == null)) {
            this.GetAllTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTeamsOperationCompleted);
        }
        this.InvokeAsync("GetAllTeams", new object[] {
                    sessionID}, this.GetAllTeamsOperationCompleted, userState);
    }
    
    private void OnGetAllTeamsOperationCompleted(object arg) {
        if ((this.GetAllTeamsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllTeamsCompleted(this, new GetAllTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteTeam", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteTeam(string sessionID, string teamID) {
        object[] results = this.Invoke("DeleteTeam", new object[] {
                    sessionID,
                    teamID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteTeam(string sessionID, string teamID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteTeam", new object[] {
                    sessionID,
                    teamID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteTeam(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteTeamAsync(string sessionID, string teamID) {
        this.DeleteTeamAsync(sessionID, teamID, null);
    }
    
    /// <remarks/>
    public void DeleteTeamAsync(string sessionID, string teamID, object userState) {
        if ((this.DeleteTeamOperationCompleted == null)) {
            this.DeleteTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTeamOperationCompleted);
        }
        this.InvokeAsync("DeleteTeam", new object[] {
                    sessionID,
                    teamID}, this.DeleteTeamOperationCompleted, userState);
    }
    
    private void OnDeleteTeamOperationCompleted(object arg) {
        if ((this.DeleteTeamCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteTeamCompleted(this, new DeleteTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewCompany", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateNewCompany(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions) {
        object[] results = this.Invoke("CreateNewCompany", new object[] {
                    sessionID,
                    ParentSP,
                    newTCompanyName,
                    companyManagers,
                    scanners,
                    reviewers,
                    allowActions});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateNewCompany(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateNewCompany", new object[] {
                    sessionID,
                    ParentSP,
                    newTCompanyName,
                    companyManagers,
                    scanners,
                    reviewers,
                    allowActions}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateNewCompany(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateNewCompanyAsync(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions) {
        this.CreateNewCompanyAsync(sessionID, ParentSP, newTCompanyName, companyManagers, scanners, reviewers, allowActions, null);
    }
    
    /// <remarks/>
    public void CreateNewCompanyAsync(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions, object userState) {
        if ((this.CreateNewCompanyOperationCompleted == null)) {
            this.CreateNewCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewCompanyOperationCompleted);
        }
        this.InvokeAsync("CreateNewCompany", new object[] {
                    sessionID,
                    ParentSP,
                    newTCompanyName,
                    companyManagers,
                    scanners,
                    reviewers,
                    allowActions}, this.CreateNewCompanyOperationCompleted, userState);
    }
    
    private void OnCreateNewCompanyOperationCompleted(object arg) {
        if ((this.CreateNewCompanyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateNewCompanyCompleted(this, new CreateNewCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewServiceProvider", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse CreateNewServiceProvider(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers) {
        object[] results = this.Invoke("CreateNewServiceProvider", new object[] {
                    sessionID,
                    newSpName,
                    spManagersint,
                    companyManagers,
                    scanners,
                    reviewers});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateNewServiceProvider(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateNewServiceProvider", new object[] {
                    sessionID,
                    newSpName,
                    spManagersint,
                    companyManagers,
                    scanners,
                    reviewers}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndCreateNewServiceProvider(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void CreateNewServiceProviderAsync(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers) {
        this.CreateNewServiceProviderAsync(sessionID, newSpName, spManagersint, companyManagers, scanners, reviewers, null);
    }
    
    /// <remarks/>
    public void CreateNewServiceProviderAsync(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers, object userState) {
        if ((this.CreateNewServiceProviderOperationCompleted == null)) {
            this.CreateNewServiceProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewServiceProviderOperationCompleted);
        }
        this.InvokeAsync("CreateNewServiceProvider", new object[] {
                    sessionID,
                    newSpName,
                    spManagersint,
                    companyManagers,
                    scanners,
                    reviewers}, this.CreateNewServiceProviderOperationCompleted, userState);
    }
    
    private void OnCreateNewServiceProviderOperationCompleted(object arg) {
        if ((this.CreateNewServiceProviderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateNewServiceProviderCompleted(this, new CreateNewServiceProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RenameCompany", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse RenameCompany(string sessionID, string teamID, string newTeamName) {
        object[] results = this.Invoke("RenameCompany", new object[] {
                    sessionID,
                    teamID,
                    newTeamName});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRenameCompany(string sessionID, string teamID, string newTeamName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RenameCompany", new object[] {
                    sessionID,
                    teamID,
                    newTeamName}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndRenameCompany(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void RenameCompanyAsync(string sessionID, string teamID, string newTeamName) {
        this.RenameCompanyAsync(sessionID, teamID, newTeamName, null);
    }
    
    /// <remarks/>
    public void RenameCompanyAsync(string sessionID, string teamID, string newTeamName, object userState) {
        if ((this.RenameCompanyOperationCompleted == null)) {
            this.RenameCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameCompanyOperationCompleted);
        }
        this.InvokeAsync("RenameCompany", new object[] {
                    sessionID,
                    teamID,
                    newTeamName}, this.RenameCompanyOperationCompleted, userState);
    }
    
    private void OnRenameCompanyOperationCompleted(object arg) {
        if ((this.RenameCompanyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RenameCompanyCompleted(this, new RenameCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllCompanies", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseTeamData GetAllCompanies(string sessionID) {
        object[] results = this.Invoke("GetAllCompanies", new object[] {
                    sessionID});
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllCompanies(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllCompanies", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseTeamData EndGetAllCompanies(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllCompaniesAsync(string sessionID) {
        this.GetAllCompaniesAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetAllCompaniesAsync(string sessionID, object userState) {
        if ((this.GetAllCompaniesOperationCompleted == null)) {
            this.GetAllCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCompaniesOperationCompleted);
        }
        this.InvokeAsync("GetAllCompanies", new object[] {
                    sessionID}, this.GetAllCompaniesOperationCompleted, userState);
    }
    
    private void OnGetAllCompaniesOperationCompleted(object arg) {
        if ((this.GetAllCompaniesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllCompaniesCompleted(this, new GetAllCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllSPs", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseTeamData GetAllSPs(string sessionID) {
        object[] results = this.Invoke("GetAllSPs", new object[] {
                    sessionID});
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllSPs(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllSPs", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseTeamData EndGetAllSPs(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllSPsAsync(string sessionID) {
        this.GetAllSPsAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetAllSPsAsync(string sessionID, object userState) {
        if ((this.GetAllSPsOperationCompleted == null)) {
            this.GetAllSPsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSPsOperationCompleted);
        }
        this.InvokeAsync("GetAllSPs", new object[] {
                    sessionID}, this.GetAllSPsOperationCompleted, userState);
    }
    
    private void OnGetAllSPsOperationCompleted(object arg) {
        if ((this.GetAllSPsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllSPsCompleted(this, new GetAllSPsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteCompany", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteCompany(string sessionID, string teamID) {
        object[] results = this.Invoke("DeleteCompany", new object[] {
                    sessionID,
                    teamID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteCompany(string sessionID, string teamID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteCompany", new object[] {
                    sessionID,
                    teamID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteCompany(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteCompanyAsync(string sessionID, string teamID) {
        this.DeleteCompanyAsync(sessionID, teamID, null);
    }
    
    /// <remarks/>
    public void DeleteCompanyAsync(string sessionID, string teamID, object userState) {
        if ((this.DeleteCompanyOperationCompleted == null)) {
            this.DeleteCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCompanyOperationCompleted);
        }
        this.InvokeAsync("DeleteCompany", new object[] {
                    sessionID,
                    teamID}, this.DeleteCompanyOperationCompleted, userState);
    }
    
    private void OnDeleteCompanyOperationCompleted(object arg) {
        if ((this.DeleteCompanyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteCompanyCompleted(this, new DeleteCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteSP", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse DeleteSP(string sessionID, string teamID) {
        object[] results = this.Invoke("DeleteSP", new object[] {
                    sessionID,
                    teamID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteSP(string sessionID, string teamID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteSP", new object[] {
                    sessionID,
                    teamID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndDeleteSP(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteSPAsync(string sessionID, string teamID) {
        this.DeleteSPAsync(sessionID, teamID, null);
    }
    
    /// <remarks/>
    public void DeleteSPAsync(string sessionID, string teamID, object userState) {
        if ((this.DeleteSPOperationCompleted == null)) {
            this.DeleteSPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSPOperationCompleted);
        }
        this.InvokeAsync("DeleteSP", new object[] {
                    sessionID,
                    teamID}, this.DeleteSPOperationCompleted, userState);
    }
    
    private void OnDeleteSPOperationCompleted(object arg) {
        if ((this.DeleteSPCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteSPCompleted(this, new DeleteSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidCompanyName", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse IsValidCompanyName(string sessionID, string companyName, string serviceProviderID) {
        object[] results = this.Invoke("IsValidCompanyName", new object[] {
                    sessionID,
                    companyName,
                    serviceProviderID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsValidCompanyName(string sessionID, string companyName, string serviceProviderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsValidCompanyName", new object[] {
                    sessionID,
                    companyName,
                    serviceProviderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndIsValidCompanyName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void IsValidCompanyNameAsync(string sessionID, string companyName, string serviceProviderID) {
        this.IsValidCompanyNameAsync(sessionID, companyName, serviceProviderID, null);
    }
    
    /// <remarks/>
    public void IsValidCompanyNameAsync(string sessionID, string companyName, string serviceProviderID, object userState) {
        if ((this.IsValidCompanyNameOperationCompleted == null)) {
            this.IsValidCompanyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidCompanyNameOperationCompleted);
        }
        this.InvokeAsync("IsValidCompanyName", new object[] {
                    sessionID,
                    companyName,
                    serviceProviderID}, this.IsValidCompanyNameOperationCompleted, userState);
    }
    
    private void OnIsValidCompanyNameOperationCompleted(object arg) {
        if ((this.IsValidCompanyNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsValidCompanyNameCompleted(this, new IsValidCompanyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompanyTeams", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseTeamData GetCompanyTeams(string sessionID, string companyID) {
        object[] results = this.Invoke("GetCompanyTeams", new object[] {
                    sessionID,
                    companyID});
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompanyTeams(string sessionID, string companyID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompanyTeams", new object[] {
                    sessionID,
                    companyID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseTeamData EndGetCompanyTeams(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompanyTeamsAsync(string sessionID, string companyID) {
        this.GetCompanyTeamsAsync(sessionID, companyID, null);
    }
    
    /// <remarks/>
    public void GetCompanyTeamsAsync(string sessionID, string companyID, object userState) {
        if ((this.GetCompanyTeamsOperationCompleted == null)) {
            this.GetCompanyTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyTeamsOperationCompleted);
        }
        this.InvokeAsync("GetCompanyTeams", new object[] {
                    sessionID,
                    companyID}, this.GetCompanyTeamsOperationCompleted, userState);
    }
    
    private void OnGetCompanyTeamsOperationCompleted(object arg) {
        if ((this.GetCompanyTeamsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompanyTeamsCompleted(this, new GetCompanyTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServiceProviderTeams", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseTeamData GetServiceProviderTeams(string sessionID, string spID) {
        object[] results = this.Invoke("GetServiceProviderTeams", new object[] {
                    sessionID,
                    spID});
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceProviderTeams(string sessionID, string spID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceProviderTeams", new object[] {
                    sessionID,
                    spID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseTeamData EndGetServiceProviderTeams(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public void GetServiceProviderTeamsAsync(string sessionID, string spID) {
        this.GetServiceProviderTeamsAsync(sessionID, spID, null);
    }
    
    /// <remarks/>
    public void GetServiceProviderTeamsAsync(string sessionID, string spID, object userState) {
        if ((this.GetServiceProviderTeamsOperationCompleted == null)) {
            this.GetServiceProviderTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceProviderTeamsOperationCompleted);
        }
        this.InvokeAsync("GetServiceProviderTeams", new object[] {
                    sessionID,
                    spID}, this.GetServiceProviderTeamsOperationCompleted, userState);
    }
    
    private void OnGetServiceProviderTeamsOperationCompleted(object arg) {
        if ((this.GetServiceProviderTeamsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServiceProviderTeamsCompleted(this, new GetServiceProviderTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServiceProviderCompanies", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseTeamData GetServiceProviderCompanies(string sessionID, string spID) {
        object[] results = this.Invoke("GetServiceProviderCompanies", new object[] {
                    sessionID,
                    spID});
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceProviderCompanies(string sessionID, string spID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceProviderCompanies", new object[] {
                    sessionID,
                    spID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseTeamData EndGetServiceProviderCompanies(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseTeamData)(results[0]));
    }
    
    /// <remarks/>
    public void GetServiceProviderCompaniesAsync(string sessionID, string spID) {
        this.GetServiceProviderCompaniesAsync(sessionID, spID, null);
    }
    
    /// <remarks/>
    public void GetServiceProviderCompaniesAsync(string sessionID, string spID, object userState) {
        if ((this.GetServiceProviderCompaniesOperationCompleted == null)) {
            this.GetServiceProviderCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceProviderCompaniesOperationCompleted);
        }
        this.InvokeAsync("GetServiceProviderCompanies", new object[] {
                    sessionID,
                    spID}, this.GetServiceProviderCompaniesOperationCompleted, userState);
    }
    
    private void OnGetServiceProviderCompaniesOperationCompleted(object arg) {
        if ((this.GetServiceProviderCompaniesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServiceProviderCompaniesCompleted(this, new GetServiceProviderCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompanyProperties", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWsResponseCompanyProperties GetCompanyProperties(string sessionID, string companyID) {
        object[] results = this.Invoke("GetCompanyProperties", new object[] {
                    sessionID,
                    companyID});
        return ((CxWsResponseCompanyProperties)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompanyProperties(string sessionID, string companyID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompanyProperties", new object[] {
                    sessionID,
                    companyID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWsResponseCompanyProperties EndGetCompanyProperties(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWsResponseCompanyProperties)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompanyPropertiesAsync(string sessionID, string companyID) {
        this.GetCompanyPropertiesAsync(sessionID, companyID, null);
    }
    
    /// <remarks/>
    public void GetCompanyPropertiesAsync(string sessionID, string companyID, object userState) {
        if ((this.GetCompanyPropertiesOperationCompleted == null)) {
            this.GetCompanyPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyPropertiesOperationCompleted);
        }
        this.InvokeAsync("GetCompanyProperties", new object[] {
                    sessionID,
                    companyID}, this.GetCompanyPropertiesOperationCompleted, userState);
    }
    
    private void OnGetCompanyPropertiesOperationCompleted(object arg) {
        if ((this.GetCompanyPropertiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompanyPropertiesCompleted(this, new GetCompanyPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetUserAsCompanyManager", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SetUserAsCompanyManager(string sessionID, string companyID, long userID) {
        object[] results = this.Invoke("SetUserAsCompanyManager", new object[] {
                    sessionID,
                    companyID,
                    userID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserAsCompanyManager(string sessionID, string companyID, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserAsCompanyManager", new object[] {
                    sessionID,
                    companyID,
                    userID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSetUserAsCompanyManager(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SetUserAsCompanyManagerAsync(string sessionID, string companyID, long userID) {
        this.SetUserAsCompanyManagerAsync(sessionID, companyID, userID, null);
    }
    
    /// <remarks/>
    public void SetUserAsCompanyManagerAsync(string sessionID, string companyID, long userID, object userState) {
        if ((this.SetUserAsCompanyManagerOperationCompleted == null)) {
            this.SetUserAsCompanyManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserAsCompanyManagerOperationCompleted);
        }
        this.InvokeAsync("SetUserAsCompanyManager", new object[] {
                    sessionID,
                    companyID,
                    userID}, this.SetUserAsCompanyManagerOperationCompleted, userState);
    }
    
    private void OnSetUserAsCompanyManagerOperationCompleted(object arg) {
        if ((this.SetUserAsCompanyManagerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserAsCompanyManagerCompleted(this, new SetUserAsCompanyManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetUserAsServiceProviderManager", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SetUserAsServiceProviderManager(string sessionID, string spID, long userID) {
        object[] results = this.Invoke("SetUserAsServiceProviderManager", new object[] {
                    sessionID,
                    spID,
                    userID});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserAsServiceProviderManager(string sessionID, string spID, long userID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserAsServiceProviderManager", new object[] {
                    sessionID,
                    spID,
                    userID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSetUserAsServiceProviderManager(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SetUserAsServiceProviderManagerAsync(string sessionID, string spID, long userID) {
        this.SetUserAsServiceProviderManagerAsync(sessionID, spID, userID, null);
    }
    
    /// <remarks/>
    public void SetUserAsServiceProviderManagerAsync(string sessionID, string spID, long userID, object userState) {
        if ((this.SetUserAsServiceProviderManagerOperationCompleted == null)) {
            this.SetUserAsServiceProviderManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserAsServiceProviderManagerOperationCompleted);
        }
        this.InvokeAsync("SetUserAsServiceProviderManager", new object[] {
                    sessionID,
                    spID,
                    userID}, this.SetUserAsServiceProviderManagerOperationCompleted, userState);
    }
    
    private void OnSetUserAsServiceProviderManagerOperationCompleted(object arg) {
        if ((this.SetUserAsServiceProviderManagerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserAsServiceProviderManagerCompleted(this, new SetUserAsServiceProviderManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidServiceProviderName", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse IsValidServiceProviderName(string sessionID, string serviceProviderName) {
        object[] results = this.Invoke("IsValidServiceProviderName", new object[] {
                    sessionID,
                    serviceProviderName});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsValidServiceProviderName(string sessionID, string serviceProviderName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsValidServiceProviderName", new object[] {
                    sessionID,
                    serviceProviderName}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndIsValidServiceProviderName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void IsValidServiceProviderNameAsync(string sessionID, string serviceProviderName) {
        this.IsValidServiceProviderNameAsync(sessionID, serviceProviderName, null);
    }
    
    /// <remarks/>
    public void IsValidServiceProviderNameAsync(string sessionID, string serviceProviderName, object userState) {
        if ((this.IsValidServiceProviderNameOperationCompleted == null)) {
            this.IsValidServiceProviderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidServiceProviderNameOperationCompleted);
        }
        this.InvokeAsync("IsValidServiceProviderName", new object[] {
                    sessionID,
                    serviceProviderName}, this.IsValidServiceProviderNameOperationCompleted, userState);
    }
    
    private void OnIsValidServiceProviderNameOperationCompleted(object arg) {
        if ((this.IsValidServiceProviderNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsValidServiceProviderNameCompleted(this, new IsValidServiceProviderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateCompanyProperties", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse UpdateCompanyProperties(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers) {
        object[] results = this.Invoke("UpdateCompanyProperties", new object[] {
                    sessionID,
                    companyID,
                    companyName,
                    maxReviewers,
                    maxScanners,
                    maxManagers});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateCompanyProperties(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCompanyProperties", new object[] {
                    sessionID,
                    companyID,
                    companyName,
                    maxReviewers,
                    maxScanners,
                    maxManagers}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndUpdateCompanyProperties(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateCompanyPropertiesAsync(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers) {
        this.UpdateCompanyPropertiesAsync(sessionID, companyID, companyName, maxReviewers, maxScanners, maxManagers, null);
    }
    
    /// <remarks/>
    public void UpdateCompanyPropertiesAsync(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers, object userState) {
        if ((this.UpdateCompanyPropertiesOperationCompleted == null)) {
            this.UpdateCompanyPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCompanyPropertiesOperationCompleted);
        }
        this.InvokeAsync("UpdateCompanyProperties", new object[] {
                    sessionID,
                    companyID,
                    companyName,
                    maxReviewers,
                    maxScanners,
                    maxManagers}, this.UpdateCompanyPropertiesOperationCompleted, userState);
    }
    
    private void OnUpdateCompanyPropertiesOperationCompleted(object arg) {
        if ((this.UpdateCompanyPropertiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCompanyPropertiesCompleted(this, new UpdateCompanyPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetSystemSettings", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse SetSystemSettings(string sessionID, SystemSettings settings) {
        object[] results = this.Invoke("SetSystemSettings", new object[] {
                    sessionID,
                    settings});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetSystemSettings(string sessionID, SystemSettings settings, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetSystemSettings", new object[] {
                    sessionID,
                    settings}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndSetSystemSettings(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void SetSystemSettingsAsync(string sessionID, SystemSettings settings) {
        this.SetSystemSettingsAsync(sessionID, settings, null);
    }
    
    /// <remarks/>
    public void SetSystemSettingsAsync(string sessionID, SystemSettings settings, object userState) {
        if ((this.SetSystemSettingsOperationCompleted == null)) {
            this.SetSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemSettingsOperationCompleted);
        }
        this.InvokeAsync("SetSystemSettings", new object[] {
                    sessionID,
                    settings}, this.SetSystemSettingsOperationCompleted, userState);
    }
    
    private void OnSetSystemSettingsOperationCompleted(object arg) {
        if ((this.SetSystemSettingsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetSystemSettingsCompleted(this, new SetSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServerLanguageList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseSystemLanguages GetServerLanguageList(string sessionID) {
        object[] results = this.Invoke("GetServerLanguageList", new object[] {
                    sessionID});
        return ((CxWSResponseSystemLanguages)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServerLanguageList(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServerLanguageList", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseSystemLanguages EndGetServerLanguageList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseSystemLanguages)(results[0]));
    }
    
    /// <remarks/>
    public void GetServerLanguageListAsync(string sessionID) {
        this.GetServerLanguageListAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetServerLanguageListAsync(string sessionID, object userState) {
        if ((this.GetServerLanguageListOperationCompleted == null)) {
            this.GetServerLanguageListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLanguageListOperationCompleted);
        }
        this.InvokeAsync("GetServerLanguageList", new object[] {
                    sessionID}, this.GetServerLanguageListOperationCompleted, userState);
    }
    
    private void OnGetServerLanguageListOperationCompleted(object arg) {
        if ((this.GetServerLanguageListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetServerLanguageListCompleted(this, new GetServerLanguageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSystemSettings", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWsResponseSystemSettings GetSystemSettings(string sessionID) {
        object[] results = this.Invoke("GetSystemSettings", new object[] {
                    sessionID});
        return ((CxWsResponseSystemSettings)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSystemSettings(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemSettings", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWsResponseSystemSettings EndGetSystemSettings(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWsResponseSystemSettings)(results[0]));
    }
    
    /// <remarks/>
    public void GetSystemSettingsAsync(string sessionID) {
        this.GetSystemSettingsAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetSystemSettingsAsync(string sessionID, object userState) {
        if ((this.GetSystemSettingsOperationCompleted == null)) {
            this.GetSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemSettingsOperationCompleted);
        }
        this.InvokeAsync("GetSystemSettings", new object[] {
                    sessionID}, this.GetSystemSettingsOperationCompleted, userState);
    }
    
    private void OnGetSystemSettingsOperationCompleted(object arg) {
        if ((this.GetSystemSettingsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSystemSettingsCompleted(this, new GetSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/VerifySupportedVersion", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSBasicRepsonse VerifySupportedVersion(CxClientType clientType, string clientVersion, string APIVersion) {
        object[] results = this.Invoke("VerifySupportedVersion", new object[] {
                    clientType,
                    clientVersion,
                    APIVersion});
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginVerifySupportedVersion(CxClientType clientType, string clientVersion, string APIVersion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("VerifySupportedVersion", new object[] {
                    clientType,
                    clientVersion,
                    APIVersion}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse EndVerifySupportedVersion(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSBasicRepsonse)(results[0]));
    }
    
    /// <remarks/>
    public void VerifySupportedVersionAsync(CxClientType clientType, string clientVersion, string APIVersion) {
        this.VerifySupportedVersionAsync(clientType, clientVersion, APIVersion, null);
    }
    
    /// <remarks/>
    public void VerifySupportedVersionAsync(CxClientType clientType, string clientVersion, string APIVersion, object userState) {
        if ((this.VerifySupportedVersionOperationCompleted == null)) {
            this.VerifySupportedVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySupportedVersionOperationCompleted);
        }
        this.InvokeAsync("VerifySupportedVersion", new object[] {
                    clientType,
                    clientVersion,
                    APIVersion}, this.VerifySupportedVersionOperationCompleted, userState);
    }
    
    private void OnVerifySupportedVersionOperationCompleted(object arg) {
        if ((this.VerifySupportedVersionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.VerifySupportedVersionCompleted(this, new VerifySupportedVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetInstallationSettings", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponseInstallationSettings GetInstallationSettings(string sessionID) {
        object[] results = this.Invoke("GetInstallationSettings", new object[] {
                    sessionID});
        return ((CxWSResponseInstallationSettings)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetInstallationSettings(string sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetInstallationSettings", new object[] {
                    sessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponseInstallationSettings EndGetInstallationSettings(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponseInstallationSettings)(results[0]));
    }
    
    /// <remarks/>
    public void GetInstallationSettingsAsync(string sessionID) {
        this.GetInstallationSettingsAsync(sessionID, null);
    }
    
    /// <remarks/>
    public void GetInstallationSettingsAsync(string sessionID, object userState) {
        if ((this.GetInstallationSettingsOperationCompleted == null)) {
            this.GetInstallationSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstallationSettingsOperationCompleted);
        }
        this.InvokeAsync("GetInstallationSettings", new object[] {
                    sessionID}, this.GetInstallationSettingsOperationCompleted, userState);
    }
    
    private void OnGetInstallationSettingsOperationCompleted(object arg) {
        if ((this.GetInstallationSettingsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetInstallationSettingsCompleted(this, new GetInstallationSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPresetList", RequestNamespace="http://Checkmarx.com/", ResponseNamespace="http://Checkmarx.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public CxWSResponsePresetList GetPresetList(string SessionID) {
        object[] results = this.Invoke("GetPresetList", new object[] {
                    SessionID});
        return ((CxWSResponsePresetList)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPresetList(string SessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPresetList", new object[] {
                    SessionID}, callback, asyncState);
    }
    
    /// <remarks/>
    public CxWSResponsePresetList EndGetPresetList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CxWSResponsePresetList)(results[0]));
    }
    
    /// <remarks/>
    public void GetPresetListAsync(string SessionID) {
        this.GetPresetListAsync(SessionID, null);
    }
    
    /// <remarks/>
    public void GetPresetListAsync(string SessionID, object userState) {
        if ((this.GetPresetListOperationCompleted == null)) {
            this.GetPresetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresetListOperationCompleted);
        }
        this.InvokeAsync("GetPresetList", new object[] {
                    SessionID}, this.GetPresetListOperationCompleted, userState);
    }
    
    private void OnGetPresetListOperationCompleted(object arg) {
        if ((this.GetPresetListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPresetListCompleted(this, new GetPresetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxQueryCollectionResponse : CxWSBasicRepsonse {
    
    private CxWSQueryGroup[] queryGroupsField;
    
    /// <remarks/>
    public CxWSQueryGroup[] QueryGroups {
        get {
            return this.queryGroupsField;
        }
        set {
            this.queryGroupsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSQueryGroup {
    
    private string nameField;
    
    private int[] impactsField;
    
    private long packageIdField;
    
    private CxWSQuery[] queriesField;
    
    private bool isReadOnlyField;
    
    private bool isEncryptedField;
    
    private string descriptionField;
    
    private int languageField;
    
    private string languageNameField;
    
    private string packageTypeNameField;
    
    private long projectIdField;
    
    private CxWSPackageTypeEnum packageTypeField;
    
    private string packageFullNameField;
    
    private QueryStatus statusField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public int[] Impacts {
        get {
            return this.impactsField;
        }
        set {
            this.impactsField = value;
        }
    }
    
    /// <remarks/>
    public long PackageId {
        get {
            return this.packageIdField;
        }
        set {
            this.packageIdField = value;
        }
    }
    
    /// <remarks/>
    public CxWSQuery[] Queries {
        get {
            return this.queriesField;
        }
        set {
            this.queriesField = value;
        }
    }
    
    /// <remarks/>
    public bool IsReadOnly {
        get {
            return this.isReadOnlyField;
        }
        set {
            this.isReadOnlyField = value;
        }
    }
    
    /// <remarks/>
    public bool IsEncrypted {
        get {
            return this.isEncryptedField;
        }
        set {
            this.isEncryptedField = value;
        }
    }
    
    /// <remarks/>
    public string Description {
        get {
            return this.descriptionField;
        }
        set {
            this.descriptionField = value;
        }
    }
    
    /// <remarks/>
    public int Language {
        get {
            return this.languageField;
        }
        set {
            this.languageField = value;
        }
    }
    
    /// <remarks/>
    public string LanguageName {
        get {
            return this.languageNameField;
        }
        set {
            this.languageNameField = value;
        }
    }
    
    /// <remarks/>
    public string PackageTypeName {
        get {
            return this.packageTypeNameField;
        }
        set {
            this.packageTypeNameField = value;
        }
    }
    
    /// <remarks/>
    public long ProjectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public CxWSPackageTypeEnum PackageType {
        get {
            return this.packageTypeField;
        }
        set {
            this.packageTypeField = value;
        }
    }
    
    /// <remarks/>
    public string PackageFullName {
        get {
            return this.packageFullNameField;
        }
        set {
            this.packageFullNameField = value;
        }
    }
    
    /// <remarks/>
    public QueryStatus Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSQuery {
    
    private string nameField;
    
    private long queryIdField;
    
    private string sourceField;
    
    private long cweField;
    
    private bool isExecutableField;
    
    private bool isEncryptedField;
    
    private int severityField;
    
    private long packageIdField;
    
    private QueryStatus statusField;
    
    private CxWSQueryType typeField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public string Source {
        get {
            return this.sourceField;
        }
        set {
            this.sourceField = value;
        }
    }
    
    /// <remarks/>
    public long Cwe {
        get {
            return this.cweField;
        }
        set {
            this.cweField = value;
        }
    }
    
    /// <remarks/>
    public bool IsExecutable {
        get {
            return this.isExecutableField;
        }
        set {
            this.isExecutableField = value;
        }
    }
    
    /// <remarks/>
    public bool IsEncrypted {
        get {
            return this.isEncryptedField;
        }
        set {
            this.isEncryptedField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public long PackageId {
        get {
            return this.packageIdField;
        }
        set {
            this.packageIdField = value;
        }
    }
    
    /// <remarks/>
    public QueryStatus Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public CxWSQueryType Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum QueryStatus {
    
    /// <remarks/>
    Original,
    
    /// <remarks/>
    New,
    
    /// <remarks/>
    Edited,
    
    /// <remarks/>
    Deleted,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CxWSQueryType {
    
    /// <remarks/>
    Draft,
    
    /// <remarks/>
    Regular,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class Preset {
    
    private string presetNameField;
    
    private long idField;
    
    private string owningUserField;
    
    private bool isUserAllowToUpdateField;
    
    private bool isUserAllowToDeleteField;
    
    /// <remarks/>
    public string PresetName {
        get {
            return this.presetNameField;
        }
        set {
            this.presetNameField = value;
        }
    }
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string owningUser {
        get {
            return this.owningUserField;
        }
        set {
            this.owningUserField = value;
        }
    }
    
    /// <remarks/>
    public bool isUserAllowToUpdate {
        get {
            return this.isUserAllowToUpdateField;
        }
        set {
            this.isUserAllowToUpdateField = value;
        }
    }
    
    /// <remarks/>
    public bool isUserAllowToDelete {
        get {
            return this.isUserAllowToDeleteField;
        }
        set {
            this.isUserAllowToDeleteField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class InstallationSetting {
    
    private string nameField;
    
    private string idField;
    
    private string versionField;
    
    private string hotfixField;
    
    private string instllationPathField;
    
    private bool isInstalledField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string Version {
        get {
            return this.versionField;
        }
        set {
            this.versionField = value;
        }
    }
    
    /// <remarks/>
    public string Hotfix {
        get {
            return this.hotfixField;
        }
        set {
            this.hotfixField = value;
        }
    }
    
    /// <remarks/>
    public string InstllationPath {
        get {
            return this.instllationPathField;
        }
        set {
            this.instllationPathField = value;
        }
    }
    
    /// <remarks/>
    public bool IsInstalled {
        get {
            return this.isInstalledField;
        }
        set {
            this.isInstalledField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SystemLanguage {
    
    private int languageLCIDField;
    
    private bool isDefaultField;
    
    /// <remarks/>
    public int languageLCID {
        get {
            return this.languageLCIDField;
        }
        set {
            this.languageLCIDField = value;
        }
    }
    
    /// <remarks/>
    public bool isDefault {
        get {
            return this.isDefaultField;
        }
        set {
            this.isDefaultField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SystemSettings {
    
    private string reportFolderField;
    
    private string resultFolderField;
    
    private string executablesFolderField;
    
    private string sMTPHostField;
    
    private int sMTPPortField;
    
    private string sMTPUserNameField;
    
    private string sMTPPasswordField;
    
    private bool sMTPUseDefaultCredentialsField;
    
    private bool smtpOverSslField;
    
    private string sMTPEncryptionField;
    
    private int maxScansField;
    
    private int completedScanShowTimeInMinField;
    
    private CxPredefinedCommand[] commandsField;
    
    private string webServerField;
    
    private int defaultLanguageField;
    
    private bool allowAutoSignInField;
    
    /// <remarks/>
    public string ReportFolder {
        get {
            return this.reportFolderField;
        }
        set {
            this.reportFolderField = value;
        }
    }
    
    /// <remarks/>
    public string ResultFolder {
        get {
            return this.resultFolderField;
        }
        set {
            this.resultFolderField = value;
        }
    }
    
    /// <remarks/>
    public string ExecutablesFolder {
        get {
            return this.executablesFolderField;
        }
        set {
            this.executablesFolderField = value;
        }
    }
    
    /// <remarks/>
    public string SMTPHost {
        get {
            return this.sMTPHostField;
        }
        set {
            this.sMTPHostField = value;
        }
    }
    
    /// <remarks/>
    public int SMTPPort {
        get {
            return this.sMTPPortField;
        }
        set {
            this.sMTPPortField = value;
        }
    }
    
    /// <remarks/>
    public string SMTPUserName {
        get {
            return this.sMTPUserNameField;
        }
        set {
            this.sMTPUserNameField = value;
        }
    }
    
    /// <remarks/>
    public string SMTPPassword {
        get {
            return this.sMTPPasswordField;
        }
        set {
            this.sMTPPasswordField = value;
        }
    }
    
    /// <remarks/>
    public bool SMTPUseDefaultCredentials {
        get {
            return this.sMTPUseDefaultCredentialsField;
        }
        set {
            this.sMTPUseDefaultCredentialsField = value;
        }
    }
    
    /// <remarks/>
    public bool SmtpOverSsl {
        get {
            return this.smtpOverSslField;
        }
        set {
            this.smtpOverSslField = value;
        }
    }
    
    /// <remarks/>
    public string SMTPEncryption {
        get {
            return this.sMTPEncryptionField;
        }
        set {
            this.sMTPEncryptionField = value;
        }
    }
    
    /// <remarks/>
    public int MaxScans {
        get {
            return this.maxScansField;
        }
        set {
            this.maxScansField = value;
        }
    }
    
    /// <remarks/>
    public int CompletedScanShowTimeInMin {
        get {
            return this.completedScanShowTimeInMinField;
        }
        set {
            this.completedScanShowTimeInMinField = value;
        }
    }
    
    /// <remarks/>
    public CxPredefinedCommand[] commands {
        get {
            return this.commandsField;
        }
        set {
            this.commandsField = value;
        }
    }
    
    /// <remarks/>
    public string WebServer {
        get {
            return this.webServerField;
        }
        set {
            this.webServerField = value;
        }
    }
    
    /// <remarks/>
    public int DefaultLanguage {
        get {
            return this.defaultLanguageField;
        }
        set {
            this.defaultLanguageField = value;
        }
    }
    
    /// <remarks/>
    public bool AllowAutoSignIn {
        get {
            return this.allowAutoSignInField;
        }
        set {
            this.allowAutoSignInField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPredefinedCommand {
    
    private string nameField;
    
    private string commandField;
    
    private CxPredefinedCommandType commandTypeField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string Command {
        get {
            return this.commandField;
        }
        set {
            this.commandField = value;
        }
    }
    
    /// <remarks/>
    public CxPredefinedCommandType CommandType {
        get {
            return this.commandTypeField;
        }
        set {
            this.commandTypeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CxPredefinedCommandType {
    
    /// <remarks/>
    SourceControlCommand,
    
    /// <remarks/>
    PostScan,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class TeamData {
    
    private Group teamField;
    
    private Group companyField;
    
    private Group serviceProviderField;
    
    /// <remarks/>
    public Group Team {
        get {
            return this.teamField;
        }
        set {
            this.teamField = value;
        }
    }
    
    /// <remarks/>
    public Group Company {
        get {
            return this.companyField;
        }
        set {
            this.companyField = value;
        }
    }
    
    /// <remarks/>
    public Group ServiceProvider {
        get {
            return this.serviceProviderField;
        }
        set {
            this.serviceProviderField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(HierarchyGroupNode))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class Group {
    
    private string groupNameField;
    
    private string idField;
    
    private GroupType typeField;
    
    private string guidField;
    
    /// <remarks/>
    public string GroupName {
        get {
            return this.groupNameField;
        }
        set {
            this.groupNameField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public GroupType Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public string Guid {
        get {
            return this.guidField;
        }
        set {
            this.guidField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum GroupType {
    
    /// <remarks/>
    Team,
    
    /// <remarks/>
    Company,
    
    /// <remarks/>
    SP,
    
    /// <remarks/>
    Server,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class HierarchyGroupNode : Group {
    
    private HierarchyGroupNode[] childsField;
    
    private bool membershipField;
    
    /// <remarks/>
    public HierarchyGroupNode[] Childs {
        get {
            return this.childsField;
        }
        set {
            this.childsField = value;
        }
    }
    
    /// <remarks/>
    public bool Membership {
        get {
            return this.membershipField;
        }
        set {
            this.membershipField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxDomainUser {
    
    private string usernameField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private string emailField;
    
    private string uPNField;
    
    /// <remarks/>
    public string Username {
        get {
            return this.usernameField;
        }
        set {
            this.usernameField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string UPN {
        get {
            return this.uPNField;
        }
        set {
            this.uPNField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SupportedLanguage {
    
    private string languageField;
    
    private bool isSupportedField;
    
    /// <remarks/>
    public string language {
        get {
            return this.languageField;
        }
        set {
            this.languageField = value;
        }
    }
    
    /// <remarks/>
    public bool isSupported {
        get {
            return this.isSupportedField;
        }
        set {
            this.isSupportedField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProfileData {
    
    private string userNameField;
    
    private string firstNameField;
    
    private int userPreferedLanguageLCIDField;
    
    private string lastNameField;
    
    private string jobTitleField;
    
    private string emailField;
    
    private string phoneField;
    
    private string cellPhoneField;
    
    private string skypeField;
    
    private string countryField;
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public int UserPreferedLanguageLCID {
        get {
            return this.userPreferedLanguageLCIDField;
        }
        set {
            this.userPreferedLanguageLCIDField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public string JobTitle {
        get {
            return this.jobTitleField;
        }
        set {
            this.jobTitleField = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string Phone {
        get {
            return this.phoneField;
        }
        set {
            this.phoneField = value;
        }
    }
    
    /// <remarks/>
    public string CellPhone {
        get {
            return this.cellPhoneField;
        }
        set {
            this.cellPhoneField = value;
        }
    }
    
    /// <remarks/>
    public string Skype {
        get {
            return this.skypeField;
        }
        set {
            this.skypeField = value;
        }
    }
    
    /// <remarks/>
    public string Country {
        get {
            return this.countryField;
        }
        set {
            this.countryField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class WebClientApprovedUser {
    
    private int userIDField;
    
    private string companyIDField;
    
    private System.DateTime expirationDateField;
    
    private string teamIdField;
    
    private string loginUrlField;
    
    /// <remarks/>
    public int UserID {
        get {
            return this.userIDField;
        }
        set {
            this.userIDField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyID {
        get {
            return this.companyIDField;
        }
        set {
            this.companyIDField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime ExpirationDate {
        get {
            return this.expirationDateField;
        }
        set {
            this.expirationDateField = value;
        }
    }
    
    /// <remarks/>
    public string TeamId {
        get {
            return this.teamIdField;
        }
        set {
            this.teamIdField = value;
        }
    }
    
    /// <remarks/>
    public string LoginUrl {
        get {
            return this.loginUrlField;
        }
        set {
            this.loginUrlField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class WebClientPendingUser {
    
    private long idField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private string passwordField;
    
    private string jobTitleField;
    
    private string userNameField;
    
    private string phoneField;
    
    private string cellPhoneField;
    
    private string skypeField;
    
    private string companyIDField;
    
    private string companyNameField;
    
    private string countryField;
    
    private Group[] groupsField;
    
    private CxDateTime createdDateField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public string Password {
        get {
            return this.passwordField;
        }
        set {
            this.passwordField = value;
        }
    }
    
    /// <remarks/>
    public string JobTitle {
        get {
            return this.jobTitleField;
        }
        set {
            this.jobTitleField = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string Phone {
        get {
            return this.phoneField;
        }
        set {
            this.phoneField = value;
        }
    }
    
    /// <remarks/>
    public string CellPhone {
        get {
            return this.cellPhoneField;
        }
        set {
            this.cellPhoneField = value;
        }
    }
    
    /// <remarks/>
    public string Skype {
        get {
            return this.skypeField;
        }
        set {
            this.skypeField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyID {
        get {
            return this.companyIDField;
        }
        set {
            this.companyIDField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyName {
        get {
            return this.companyNameField;
        }
        set {
            this.companyNameField = value;
        }
    }
    
    /// <remarks/>
    public string Country {
        get {
            return this.countryField;
        }
        set {
            this.countryField = value;
        }
    }
    
    /// <remarks/>
    public Group[] Groups {
        get {
            return this.groupsField;
        }
        set {
            this.groupsField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime CreatedDate {
        get {
            return this.createdDateField;
        }
        set {
            this.createdDateField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxDateTime {
    
    private int hourField;
    
    private int minuteField;
    
    private int secondField;
    
    private int dayField;
    
    private int monthField;
    
    private int yearField;
    
    /// <remarks/>
    public int Hour {
        get {
            return this.hourField;
        }
        set {
            this.hourField = value;
        }
    }
    
    /// <remarks/>
    public int Minute {
        get {
            return this.minuteField;
        }
        set {
            this.minuteField = value;
        }
    }
    
    /// <remarks/>
    public int Second {
        get {
            return this.secondField;
        }
        set {
            this.secondField = value;
        }
    }
    
    /// <remarks/>
    public int Day {
        get {
            return this.dayField;
        }
        set {
            this.dayField = value;
        }
    }
    
    /// <remarks/>
    public int Month {
        get {
            return this.monthField;
        }
        set {
            this.monthField = value;
        }
    }
    
    /// <remarks/>
    public int Year {
        get {
            return this.yearField;
        }
        set {
            this.yearField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ResultState {
    
    private string resultNameField;
    
    private long resultIDField;
    
    /// <remarks/>
    public string ResultName {
        get {
            return this.resultNameField;
        }
        set {
            this.resultNameField = value;
        }
    }
    
    /// <remarks/>
    public long ResultID {
        get {
            return this.resultIDField;
        }
        set {
            this.resultIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWsScanCompareCount {
    
    private int newField;
    
    private int fixedField;
    
    private int reOccuredField;
    
    /// <remarks/>
    public int New {
        get {
            return this.newField;
        }
        set {
            this.newField = value;
        }
    }
    
    /// <remarks/>
    public int Fixed {
        get {
            return this.fixedField;
        }
        set {
            this.fixedField = value;
        }
    }
    
    /// <remarks/>
    public int ReOccured {
        get {
            return this.reOccuredField;
        }
        set {
            this.reOccuredField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class Vulerability {
    
    private string nameField;
    
    private string severityField;
    
    private long countField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public long Count {
        get {
            return this.countField;
        }
        set {
            this.countField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ScanDisplayData {
    
    private long scanIDField;
    
    private bool isAllowedToDeleteField;
    
    private CxDateTime queuedDateTimeField;
    
    private int riskLevelScoreField;
    
    private CxDateTime finishedDateTimeField;
    
    private long projectIdField;
    
    private string projectNameField;
    
    private string projectOwnerField;
    
    private string teamNameField;
    
    private bool isIncrementalField;
    
    private CxPortalScanReportStatus reportExistsField;
    
    private CxPortalScanReportStatus excelExistsField;
    
    private CxPortalScanReportStatus xMLExistsField;
    
    /// <remarks/>
    public long ScanID {
        get {
            return this.scanIDField;
        }
        set {
            this.scanIDField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToDelete {
        get {
            return this.isAllowedToDeleteField;
        }
        set {
            this.isAllowedToDeleteField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime QueuedDateTime {
        get {
            return this.queuedDateTimeField;
        }
        set {
            this.queuedDateTimeField = value;
        }
    }
    
    /// <remarks/>
    public int RiskLevelScore {
        get {
            return this.riskLevelScoreField;
        }
        set {
            this.riskLevelScoreField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime FinishedDateTime {
        get {
            return this.finishedDateTimeField;
        }
        set {
            this.finishedDateTimeField = value;
        }
    }
    
    /// <remarks/>
    public long ProjectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectOwner {
        get {
            return this.projectOwnerField;
        }
        set {
            this.projectOwnerField = value;
        }
    }
    
    /// <remarks/>
    public string TeamName {
        get {
            return this.teamNameField;
        }
        set {
            this.teamNameField = value;
        }
    }
    
    /// <remarks/>
    public bool IsIncremental {
        get {
            return this.isIncrementalField;
        }
        set {
            this.isIncrementalField = value;
        }
    }
    
    /// <remarks/>
    public CxPortalScanReportStatus ReportExists {
        get {
            return this.reportExistsField;
        }
        set {
            this.reportExistsField = value;
        }
    }
    
    /// <remarks/>
    public CxPortalScanReportStatus ExcelExists {
        get {
            return this.excelExistsField;
        }
        set {
            this.excelExistsField = value;
        }
    }
    
    /// <remarks/>
    public CxPortalScanReportStatus XMLExists {
        get {
            return this.xMLExistsField;
        }
        set {
            this.xMLExistsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CxPortalScanReportStatus {
    
    /// <remarks/>
    InProcess,
    
    /// <remarks/>
    Created,
    
    /// <remarks/>
    None,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ResultStateData {
    
    private long scanIdField;
    
    private long pathIdField;
    
    private long projectIdField;
    
    private string remarksField;
    
    private int resultLabelTypeField;
    
    private string dataField;
    
    /// <remarks/>
    public long scanId {
        get {
            return this.scanIdField;
        }
        set {
            this.scanIdField = value;
        }
    }
    
    /// <remarks/>
    public long PathId {
        get {
            return this.pathIdField;
        }
        set {
            this.pathIdField = value;
        }
    }
    
    /// <remarks/>
    public long projectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public string Remarks {
        get {
            return this.remarksField;
        }
        set {
            this.remarksField = value;
        }
    }
    
    /// <remarks/>
    public int ResultLabelType {
        get {
            return this.resultLabelTypeField;
        }
        set {
            this.resultLabelTypeField = value;
        }
    }
    
    /// <remarks/>
    public string data {
        get {
            return this.dataField;
        }
        set {
            this.dataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ScanRiskLevel {
    
    private int quantityField;
    
    private int severityField;
    
    /// <remarks/>
    public int Quantity {
        get {
            return this.quantityField;
        }
        set {
            this.quantityField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProjectScansRiskLevel {
    
    private string labelField;
    
    private ScanRiskLevel scanRiskParamsField;
    
    /// <remarks/>
    public string Label {
        get {
            return this.labelField;
        }
        set {
            this.labelField = value;
        }
    }
    
    /// <remarks/>
    public ScanRiskLevel ScanRiskParams {
        get {
            return this.scanRiskParamsField;
        }
        set {
            this.scanRiskParamsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProjectScansResultSummary {
    
    private string labelField;
    
    private int highField;
    
    private int mediumField;
    
    private int lowField;
    
    private int infoField;
    
    /// <remarks/>
    public string Label {
        get {
            return this.labelField;
        }
        set {
            this.labelField = value;
        }
    }
    
    /// <remarks/>
    public int High {
        get {
            return this.highField;
        }
        set {
            this.highField = value;
        }
    }
    
    /// <remarks/>
    public int Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    public int Low {
        get {
            return this.lowField;
        }
        set {
            this.lowField = value;
        }
    }
    
    /// <remarks/>
    public int Info {
        get {
            return this.infoField;
        }
        set {
            this.infoField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class UserPermission {
    
    private bool isAllowedToDeleteField;
    
    private bool isAllowedToDuplicateField;
    
    private bool isAllowedToRunField;
    
    private bool isAllowedToUpdateField;
    
    /// <remarks/>
    public bool IsAllowedToDelete {
        get {
            return this.isAllowedToDeleteField;
        }
        set {
            this.isAllowedToDeleteField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToDuplicate {
        get {
            return this.isAllowedToDuplicateField;
        }
        set {
            this.isAllowedToDuplicateField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToRun {
        get {
            return this.isAllowedToRunField;
        }
        set {
            this.isAllowedToRunField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToUpdate {
        get {
            return this.isAllowedToUpdateField;
        }
        set {
            this.isAllowedToUpdateField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProjectDisplayData {
    
    private UserPermission permissionField;
    
    private long projectIDField;
    
    private string serviceProviderField;
    
    private string companyField;
    
    private string ownerField;
    
    private string projectNameField;
    
    private string groupField;
    
    private string presetField;
    
    private CxDateTime lastScanDateField;
    
    private int totalScansField;
    
    /// <remarks/>
    public UserPermission Permission {
        get {
            return this.permissionField;
        }
        set {
            this.permissionField = value;
        }
    }
    
    /// <remarks/>
    public long projectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceProvider {
        get {
            return this.serviceProviderField;
        }
        set {
            this.serviceProviderField = value;
        }
    }
    
    /// <remarks/>
    public string Company {
        get {
            return this.companyField;
        }
        set {
            this.companyField = value;
        }
    }
    
    /// <remarks/>
    public string Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string Group {
        get {
            return this.groupField;
        }
        set {
            this.groupField = value;
        }
    }
    
    /// <remarks/>
    public string Preset {
        get {
            return this.presetField;
        }
        set {
            this.presetField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime LastScanDate {
        get {
            return this.lastScanDateField;
        }
        set {
            this.lastScanDateField = value;
        }
    }
    
    /// <remarks/>
    public int TotalScans {
        get {
            return this.totalScansField;
        }
        set {
            this.totalScansField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxProjectData {
    
    private long projectIDField;
    
    private CxProjectSourceType sourceTypeField;
    
    private string companyField;
    
    private string ownerField;
    
    private string projectNameField;
    
    private string groupField;
    
    /// <remarks/>
    public long ProjectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public CxProjectSourceType SourceType {
        get {
            return this.sourceTypeField;
        }
        set {
            this.sourceTypeField = value;
        }
    }
    
    /// <remarks/>
    public string Company {
        get {
            return this.companyField;
        }
        set {
            this.companyField = value;
        }
    }
    
    /// <remarks/>
    public string Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string Group {
        get {
            return this.groupField;
        }
        set {
            this.groupField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CxProjectSourceType {
    
    /// <remarks/>
    LocalPath,
    
    /// <remarks/>
    UNC,
    
    /// <remarks/>
    TFS,
    
    /// <remarks/>
    SVN,
    
    /// <remarks/>
    SourceSafe,
    
    /// <remarks/>
    External,
    
    /// <remarks/>
    CVS,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ScanAction {
    
    private string[] parametersField;
    
    private ScanEventType triggerField;
    
    private ScanActionType actionField;
    
    /// <remarks/>
    public string[] Parameters {
        get {
            return this.parametersField;
        }
        set {
            this.parametersField = value;
        }
    }
    
    /// <remarks/>
    public ScanEventType Trigger {
        get {
            return this.triggerField;
        }
        set {
            this.triggerField = value;
        }
    }
    
    /// <remarks/>
    public ScanActionType Action {
        get {
            return this.actionField;
        }
        set {
            this.actionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum ScanEventType {
    
    /// <remarks/>
    BeforeScanStarts,
    
    /// <remarks/>
    AfterScanSucceeds,
    
    /// <remarks/>
    OnScanFailure,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum ScanActionType {
    
    /// <remarks/>
    EmailNotification,
    
    /// <remarks/>
    PostScanAction,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ScanActionSettings {
    
    private ScanAction[] scanActionListField;
    
    /// <remarks/>
    public ScanAction[] ScanActionList {
        get {
            return this.scanActionListField;
        }
        set {
            this.scanActionListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ScheduleSettings {
    
    private ScheduleType scheduleField;
    
    private DayOfWeek[] scheduledDaysField;
    
    private CxDateTime timeField;
    
    /// <remarks/>
    public ScheduleType Schedule {
        get {
            return this.scheduleField;
        }
        set {
            this.scheduleField = value;
        }
    }
    
    /// <remarks/>
    public DayOfWeek[] ScheduledDays {
        get {
            return this.scheduledDaysField;
        }
        set {
            this.scheduledDaysField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime Time {
        get {
            return this.timeField;
        }
        set {
            this.timeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum ScheduleType {
    
    /// <remarks/>
    None,
    
    /// <remarks/>
    Now,
    
    /// <remarks/>
    Weekly,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum DayOfWeek {
    
    /// <remarks/>
    Sunday,
    
    /// <remarks/>
    Monday,
    
    /// <remarks/>
    Tuesday,
    
    /// <remarks/>
    Wednesday,
    
    /// <remarks/>
    Thursday,
    
    /// <remarks/>
    Friday,
    
    /// <remarks/>
    Saturday,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProjectConfiguration {
    
    private ProjectSettings projectSettingsField;
    
    private SourceCodeSettings sourceCodeSettingsField;
    
    private ScheduleSettings scheduleSettingsField;
    
    private ScanActionSettings scanActionSettingsField;
    
    /// <remarks/>
    public ProjectSettings ProjectSettings {
        get {
            return this.projectSettingsField;
        }
        set {
            this.projectSettingsField = value;
        }
    }
    
    /// <remarks/>
    public SourceCodeSettings SourceCodeSettings {
        get {
            return this.sourceCodeSettingsField;
        }
        set {
            this.sourceCodeSettingsField = value;
        }
    }
    
    /// <remarks/>
    public ScheduleSettings ScheduleSettings {
        get {
            return this.scheduleSettingsField;
        }
        set {
            this.scheduleSettingsField = value;
        }
    }
    
    /// <remarks/>
    public ScanActionSettings ScanActionSettings {
        get {
            return this.scanActionSettingsField;
        }
        set {
            this.scanActionSettingsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProjectSettings {
    
    private long projectIDField;
    
    private string projectNameField;
    
    private long presetIDField;
    
    private string associatedGroupIDField;
    
    private long scanConfigurationIDField;
    
    /// <remarks/>
    public long projectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public long PresetID {
        get {
            return this.presetIDField;
        }
        set {
            this.presetIDField = value;
        }
    }
    
    /// <remarks/>
    public string AssociatedGroupID {
        get {
            return this.associatedGroupIDField;
        }
        set {
            this.associatedGroupIDField = value;
        }
    }
    
    /// <remarks/>
    public long ScanConfigurationID {
        get {
            return this.scanConfigurationIDField;
        }
        set {
            this.scanConfigurationIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SourceCodeSettings {
    
    private SourceLocationType sourceOriginField;
    
    private Credentials userCredentialsField;
    
    private ScanPath[] pathListField;
    
    private SourceControlSettings sourceControlSettingField;
    
    private LocalCodeContainer packagedCodeField;
    
    private string sourcePullingActionField;
    
    /// <remarks/>
    public SourceLocationType SourceOrigin {
        get {
            return this.sourceOriginField;
        }
        set {
            this.sourceOriginField = value;
        }
    }
    
    /// <remarks/>
    public Credentials UserCredentials {
        get {
            return this.userCredentialsField;
        }
        set {
            this.userCredentialsField = value;
        }
    }
    
    /// <remarks/>
    public ScanPath[] PathList {
        get {
            return this.pathListField;
        }
        set {
            this.pathListField = value;
        }
    }
    
    /// <remarks/>
    public SourceControlSettings SourceControlSetting {
        get {
            return this.sourceControlSettingField;
        }
        set {
            this.sourceControlSettingField = value;
        }
    }
    
    /// <remarks/>
    public LocalCodeContainer PackagedCode {
        get {
            return this.packagedCodeField;
        }
        set {
            this.packagedCodeField = value;
        }
    }
    
    /// <remarks/>
    public string SourcePullingAction {
        get {
            return this.sourcePullingActionField;
        }
        set {
            this.sourcePullingActionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum SourceLocationType {
    
    /// <remarks/>
    Local,
    
    /// <remarks/>
    Shared,
    
    /// <remarks/>
    SourceControl,
    
    /// <remarks/>
    SourcePulling,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class Credentials {
    
    private string userField;
    
    private string passField;
    
    /// <remarks/>
    public string User {
        get {
            return this.userField;
        }
        set {
            this.userField = value;
        }
    }
    
    /// <remarks/>
    public string Pass {
        get {
            return this.passField;
        }
        set {
            this.passField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ScanPath {
    
    private string pathField;
    
    private bool includeSubTreeField;
    
    /// <remarks/>
    public string Path {
        get {
            return this.pathField;
        }
        set {
            this.pathField = value;
        }
    }
    
    /// <remarks/>
    public bool IncludeSubTree {
        get {
            return this.includeSubTreeField;
        }
        set {
            this.includeSubTreeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SourceControlSettings {
    
    private int portField;
    
    private bool useSSLField;
    
    private bool useSSHField;
    
    private string serverNameField;
    
    private RepositoryType repositoryField;
    
    private Credentials userCredentialsField;
    
    private SourceControlProtocolType protocolField;
    
    private string repositoryNameField;
    
    private string protocolParametersField;
    
    private string gITBranchField;
    
    private GitLsRemoteViewType gitLsViewTypeField;
    
    private string sSHPublicKeyField;
    
    private string sSHPrivateKeyField;
    
    /// <remarks/>
    public int Port {
        get {
            return this.portField;
        }
        set {
            this.portField = value;
        }
    }
    
    /// <remarks/>
    public bool UseSSL {
        get {
            return this.useSSLField;
        }
        set {
            this.useSSLField = value;
        }
    }
    
    /// <remarks/>
    public bool UseSSH {
        get {
            return this.useSSHField;
        }
        set {
            this.useSSHField = value;
        }
    }
    
    /// <remarks/>
    public string ServerName {
        get {
            return this.serverNameField;
        }
        set {
            this.serverNameField = value;
        }
    }
    
    /// <remarks/>
    public RepositoryType Repository {
        get {
            return this.repositoryField;
        }
        set {
            this.repositoryField = value;
        }
    }
    
    /// <remarks/>
    public Credentials UserCredentials {
        get {
            return this.userCredentialsField;
        }
        set {
            this.userCredentialsField = value;
        }
    }
    
    /// <remarks/>
    public SourceControlProtocolType Protocol {
        get {
            return this.protocolField;
        }
        set {
            this.protocolField = value;
        }
    }
    
    /// <remarks/>
    public string RepositoryName {
        get {
            return this.repositoryNameField;
        }
        set {
            this.repositoryNameField = value;
        }
    }
    
    /// <remarks/>
    public string ProtocolParameters {
        get {
            return this.protocolParametersField;
        }
        set {
            this.protocolParametersField = value;
        }
    }
    
    /// <remarks/>
    public string GITBranch {
        get {
            return this.gITBranchField;
        }
        set {
            this.gITBranchField = value;
        }
    }
    
    /// <remarks/>
    public GitLsRemoteViewType GitLsViewType {
        get {
            return this.gitLsViewTypeField;
        }
        set {
            this.gitLsViewTypeField = value;
        }
    }
    
    /// <remarks/>
    public string SSHPublicKey {
        get {
            return this.sSHPublicKeyField;
        }
        set {
            this.sSHPublicKeyField = value;
        }
    }
    
    /// <remarks/>
    public string SSHPrivateKey {
        get {
            return this.sSHPrivateKeyField;
        }
        set {
            this.sSHPrivateKeyField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum RepositoryType {
    
    /// <remarks/>
    TFS,
    
    /// <remarks/>
    SVN,
    
    /// <remarks/>
    CVS,
    
    /// <remarks/>
    GIT,
    
    /// <remarks/>
    NONE,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum SourceControlProtocolType {
    
    /// <remarks/>
    WindowsAuthentication,
    
    /// <remarks/>
    SSL,
    
    /// <remarks/>
    SSH,
    
    /// <remarks/>
    PasswordServer,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum GitLsRemoteViewType {
    
    /// <remarks/>
    TAGS,
    
    /// <remarks/>
    HEADS,
    
    /// <remarks/>
    TAGS_AND_HEADS,
    
    /// <remarks/>
    ALL,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class LocalCodeContainer {
    
    private byte[] zippedFileField;
    
    private string fileNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] ZippedFile {
        get {
            return this.zippedFileField;
        }
        set {
            this.zippedFileField = value;
        }
    }
    
    /// <remarks/>
    public string FileName {
        get {
            return this.fileNameField;
        }
        set {
            this.fileNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class Action {
    
    private string actionNameField;
    
    /// <remarks/>
    public string ActionName {
        get {
            return this.actionNameField;
        }
        set {
            this.actionNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ConfigurationSet {
    
    private string configSetNameField;
    
    private long idField;
    
    /// <remarks/>
    public string ConfigSetName {
        get {
            return this.configSetNameField;
        }
        set {
            this.configSetNameField = value;
        }
    }
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResultSummary {
    
    private long queryIdField;
    
    private string queryNameField;
    
    private string queryGroupNameField;
    
    private long countField;
    
    private int severityField;
    
    private long cweField;
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public string QueryName {
        get {
            return this.queryNameField;
        }
        set {
            this.queryNameField = value;
        }
    }
    
    /// <remarks/>
    public string QueryGroupName {
        get {
            return this.queryGroupNameField;
        }
        set {
            this.queryGroupNameField = value;
        }
    }
    
    /// <remarks/>
    public long Count {
        get {
            return this.countField;
        }
        set {
            this.countField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public long Cwe {
        get {
            return this.cweField;
        }
        set {
            this.cweField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class AuditScanResult {
    
    private long queryIdField;
    
    private string queryNameField;
    
    private string querySourceField;
    
    private int severityField;
    
    private string queryGroupNameField;
    
    private long cWEField;
    
    private string[] debugMessagesField;
    
    private string[] compilationMessagesField;
    
    private CxWSResultPath[] pathPerResultField;
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public string QueryName {
        get {
            return this.queryNameField;
        }
        set {
            this.queryNameField = value;
        }
    }
    
    /// <remarks/>
    public string QuerySource {
        get {
            return this.querySourceField;
        }
        set {
            this.querySourceField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public string QueryGroupName {
        get {
            return this.queryGroupNameField;
        }
        set {
            this.queryGroupNameField = value;
        }
    }
    
    /// <remarks/>
    public long CWE {
        get {
            return this.cWEField;
        }
        set {
            this.cWEField = value;
        }
    }
    
    /// <remarks/>
    public string[] DebugMessages {
        get {
            return this.debugMessagesField;
        }
        set {
            this.debugMessagesField = value;
        }
    }
    
    /// <remarks/>
    public string[] CompilationMessages {
        get {
            return this.compilationMessagesField;
        }
        set {
            this.compilationMessagesField = value;
        }
    }
    
    /// <remarks/>
    public CxWSResultPath[] PathPerResult {
        get {
            return this.pathPerResultField;
        }
        set {
            this.pathPerResultField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResultPath {
    
    private long similarityIdField;
    
    private long pathIdField;
    
    private string commentField;
    
    private int stateField;
    
    private int severityField;
    
    private string assignedUserField;
    
    private CxWSPathNode[] nodesField;
    
    /// <remarks/>
    public long SimilarityId {
        get {
            return this.similarityIdField;
        }
        set {
            this.similarityIdField = value;
        }
    }
    
    /// <remarks/>
    public long PathId {
        get {
            return this.pathIdField;
        }
        set {
            this.pathIdField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public int State {
        get {
            return this.stateField;
        }
        set {
            this.stateField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public string AssignedUser {
        get {
            return this.assignedUserField;
        }
        set {
            this.assignedUserField = value;
        }
    }
    
    /// <remarks/>
    public CxWSPathNode[] Nodes {
        get {
            return this.nodesField;
        }
        set {
            this.nodesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSPathNode {
    
    private int columnField;
    
    private string fullNameField;
    
    private string fileNameField;
    
    private int lengthField;
    
    private int lineField;
    
    private string nameField;
    
    private int dOM_IdField;
    
    private int methodLineField;
    
    private int pathNodeIdField;
    
    /// <remarks/>
    public int Column {
        get {
            return this.columnField;
        }
        set {
            this.columnField = value;
        }
    }
    
    /// <remarks/>
    public string FullName {
        get {
            return this.fullNameField;
        }
        set {
            this.fullNameField = value;
        }
    }
    
    /// <remarks/>
    public string FileName {
        get {
            return this.fileNameField;
        }
        set {
            this.fileNameField = value;
        }
    }
    
    /// <remarks/>
    public int Length {
        get {
            return this.lengthField;
        }
        set {
            this.lengthField = value;
        }
    }
    
    /// <remarks/>
    public int Line {
        get {
            return this.lineField;
        }
        set {
            this.lineField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public int DOM_Id {
        get {
            return this.dOM_IdField;
        }
        set {
            this.dOM_IdField = value;
        }
    }
    
    /// <remarks/>
    public int MethodLine {
        get {
            return this.methodLineField;
        }
        set {
            this.methodLineField = value;
        }
    }
    
    /// <remarks/>
    public int PathNodeId {
        get {
            return this.pathNodeIdField;
        }
        set {
            this.pathNodeIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class AuditResultsCollection {
    
    private AuditScanResult[] resultsField;
    
    /// <remarks/>
    public AuditScanResult[] Results {
        get {
            return this.resultsField;
        }
        set {
            this.resultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class ProjectBasicSettings {
    
    private string projectNameField;
    
    private string associatedGroupIDField;
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string AssociatedGroupID {
        get {
            return this.associatedGroupIDField;
        }
        set {
            this.associatedGroupIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseBasicProjectData {
    
    private string nameField;
    
    private long idField;
    
    private CxWSResponseBasicScanData[] scansField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public CxWSResponseBasicScanData[] scans {
        get {
            return this.scansField;
        }
        set {
            this.scansField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseBasicScanData : CxWSBasicRepsonse {
    
    private string nameField;
    
    private long idField;
    
    private string sourceIdField;
    
    private string commentField;
    
    private long resultIdField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string SourceId {
        get {
            return this.sourceIdField;
        }
        set {
            this.sourceIdField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public long ResultId {
        get {
            return this.resultIdField;
        }
        set {
            this.resultIdField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePresetList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseInstallationSettings))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseSystemSettings))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSystemLanguages))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseTeamData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseDomainUserList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseUsersLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCompaniesLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseCompanyProperties))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSPLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseHierarchyGroupNodes))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProfileData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePendingUsersList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultStateList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceContent))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueryDescription))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanResults))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CXWSResponseScanReportStatus))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceScanCompareResults))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanCompareReport))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanCompareSummary))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanSummary))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanProperties))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScansDisplayData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsProjectChartData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsProjectProperties))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectConfig))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsDisplayData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueueRunID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanStatusArray))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCountLines))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceActionList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseFileSystemLayer))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseConfigSetList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseGroupList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCache))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CXWSResponseResultSummary))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultCollection))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceContainer))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsScansList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseRunID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseEngineServerId))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseEngineServers))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasPackage))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSessionID))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLoginData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasLoginData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePivotLayouts))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanStatus))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseBasicScanData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePivotTable))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseBool))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseUserData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseNameList))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePredefinedCommands))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultPaths))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceFileNames))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceResultPath))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceScanResults))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceQuerisForScanAndId))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceQuerisForScan))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePresetDetails))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxQueryCollectionResponse))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSBasicRepsonse {
    
    private bool isSuccesfullField;
    
    private string errorMessageField;
    
    /// <remarks/>
    public bool IsSuccesfull {
        get {
            return this.isSuccesfullField;
        }
        set {
            this.isSuccesfullField = value;
        }
    }
    
    /// <remarks/>
    public string ErrorMessage {
        get {
            return this.errorMessageField;
        }
        set {
            this.errorMessageField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsePresetList : CxWSBasicRepsonse {
    
    private Preset[] presetListField;
    
    /// <remarks/>
    public Preset[] PresetList {
        get {
            return this.presetListField;
        }
        set {
            this.presetListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseInstallationSettings : CxWSBasicRepsonse {
    
    private InstallationSetting[] installationSettingsListField;
    
    /// <remarks/>
    public InstallationSetting[] InstallationSettingsList {
        get {
            return this.installationSettingsListField;
        }
        set {
            this.installationSettingsListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWsResponseSystemSettings : CxWSBasicRepsonse {
    
    private SystemSettings sysSettingsField;
    
    /// <remarks/>
    public SystemSettings SysSettings {
        get {
            return this.sysSettingsField;
        }
        set {
            this.sysSettingsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSystemLanguages : CxWSBasicRepsonse {
    
    private SystemLanguage[] listField;
    
    /// <remarks/>
    public SystemLanguage[] list {
        get {
            return this.listField;
        }
        set {
            this.listField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseTeamData : CxWSBasicRepsonse {
    
    private TeamData[] teamDataListField;
    
    /// <remarks/>
    public TeamData[] TeamDataList {
        get {
            return this.teamDataListField;
        }
        set {
            this.teamDataListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseDomainUserList : CxWSBasicRepsonse {
    
    private CxDomainUser[] userListField;
    
    /// <remarks/>
    public CxDomainUser[] UserList {
        get {
            return this.userListField;
        }
        set {
            this.userListField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCompaniesLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseCompanyProperties))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSPLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseUsersLicenseData : CxWSBasicRepsonse {
    
    private int maxReviewersField;
    
    private int currentReviewersField;
    
    private int maxScannersField;
    
    private int currentScannersField;
    
    /// <remarks/>
    public int MaxReviewers {
        get {
            return this.maxReviewersField;
        }
        set {
            this.maxReviewersField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentReviewers {
        get {
            return this.currentReviewersField;
        }
        set {
            this.currentReviewersField = value;
        }
    }
    
    /// <remarks/>
    public int MaxScanners {
        get {
            return this.maxScannersField;
        }
        set {
            this.maxScannersField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentScanners {
        get {
            return this.currentScannersField;
        }
        set {
            this.currentScannersField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseCompanyProperties))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSPLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseCompaniesLicenseData : CxWSResponseUsersLicenseData {
    
    private int maxCompanyManagersField;
    
    private int currentCompanyManagersField;
    
    private int maxCompanyManagersWithAuditField;
    
    private int currentCompanyManagersWithAuditField;
    
    private int maxCompaniesField;
    
    private int currentCompaniesField;
    
    /// <remarks/>
    public int MaxCompanyManagers {
        get {
            return this.maxCompanyManagersField;
        }
        set {
            this.maxCompanyManagersField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentCompanyManagers {
        get {
            return this.currentCompanyManagersField;
        }
        set {
            this.currentCompanyManagersField = value;
        }
    }
    
    /// <remarks/>
    public int MaxCompanyManagersWithAudit {
        get {
            return this.maxCompanyManagersWithAuditField;
        }
        set {
            this.maxCompanyManagersWithAuditField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentCompanyManagersWithAudit {
        get {
            return this.currentCompanyManagersWithAuditField;
        }
        set {
            this.currentCompanyManagersWithAuditField = value;
        }
    }
    
    /// <remarks/>
    public int MaxCompanies {
        get {
            return this.maxCompaniesField;
        }
        set {
            this.maxCompaniesField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentCompanies {
        get {
            return this.currentCompaniesField;
        }
        set {
            this.currentCompaniesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWsResponseCompanyProperties : CxWSResponseCompaniesLicenseData {
    
    private string companyNameField;
    
    private CxPermission permissionField;
    
    /// <remarks/>
    public string CompanyName {
        get {
            return this.companyNameField;
        }
        set {
            this.companyNameField = value;
        }
    }
    
    /// <remarks/>
    public CxPermission permission {
        get {
            return this.permissionField;
        }
        set {
            this.permissionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPermission {
    
    private long idField;
    
    private bool viewPreScanActionsField;
    
    private bool viewPostScanActionsField;
    
    /// <remarks/>
    public long Id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public bool ViewPreScanActions {
        get {
            return this.viewPreScanActionsField;
        }
        set {
            this.viewPreScanActionsField = value;
        }
    }
    
    /// <remarks/>
    public bool ViewPostScanActions {
        get {
            return this.viewPostScanActionsField;
        }
        set {
            this.viewPostScanActionsField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSPLicenseData : CxWSResponseCompaniesLicenseData {
    
    private int maxSPManagersField;
    
    private int currentSPManagersField;
    
    private int currentSPsField;
    
    private int maxSPsField;
    
    /// <remarks/>
    public int MaxSPManagers {
        get {
            return this.maxSPManagersField;
        }
        set {
            this.maxSPManagersField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentSPManagers {
        get {
            return this.currentSPManagersField;
        }
        set {
            this.currentSPManagersField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentSPs {
        get {
            return this.currentSPsField;
        }
        set {
            this.currentSPsField = value;
        }
    }
    
    /// <remarks/>
    public int MaxSPs {
        get {
            return this.maxSPsField;
        }
        set {
            this.maxSPsField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseServerManagersLicenseData : CxWSResponseSPLicenseData {
    
    private int maxServerManagersField;
    
    private int currentServerManagersField;
    
    private int maxServerManagersWithAuditField;
    
    private int currentServerManagersWithAuditField;
    
    /// <remarks/>
    public int MaxServerManagers {
        get {
            return this.maxServerManagersField;
        }
        set {
            this.maxServerManagersField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentServerManagers {
        get {
            return this.currentServerManagersField;
        }
        set {
            this.currentServerManagersField = value;
        }
    }
    
    /// <remarks/>
    public int MaxServerManagersWithAudit {
        get {
            return this.maxServerManagersWithAuditField;
        }
        set {
            this.maxServerManagersWithAuditField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentServerManagersWithAudit {
        get {
            return this.currentServerManagersWithAuditField;
        }
        set {
            this.currentServerManagersWithAuditField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseServerLicenseData : CxWSResponseServerManagersLicenseData {
    
    private string expirationDateField;
    
    private string maxConcurrentScansField;
    
    private string maxLOCField;
    
    private string hIDField;
    
    private SupportedLanguage[] supportedLanguagesField;
    
    /// <remarks/>
    public string ExpirationDate {
        get {
            return this.expirationDateField;
        }
        set {
            this.expirationDateField = value;
        }
    }
    
    /// <remarks/>
    public string MaxConcurrentScans {
        get {
            return this.maxConcurrentScansField;
        }
        set {
            this.maxConcurrentScansField = value;
        }
    }
    
    /// <remarks/>
    public string MaxLOC {
        get {
            return this.maxLOCField;
        }
        set {
            this.maxLOCField = value;
        }
    }
    
    /// <remarks/>
    public string HID {
        get {
            return this.hIDField;
        }
        set {
            this.hIDField = value;
        }
    }
    
    /// <remarks/>
    public SupportedLanguage[] SupportedLanguages {
        get {
            return this.supportedLanguagesField;
        }
        set {
            this.supportedLanguagesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseHierarchyGroupNodes : CxWSBasicRepsonse {
    
    private HierarchyGroupNode[] hierarchyGroupNodesField;
    
    /// <remarks/>
    public HierarchyGroupNode[] HierarchyGroupNodes {
        get {
            return this.hierarchyGroupNodesField;
        }
        set {
            this.hierarchyGroupNodesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseProfileData : CxWSBasicRepsonse {
    
    private ProfileData profileDataField;
    
    /// <remarks/>
    public ProfileData ProfileData {
        get {
            return this.profileDataField;
        }
        set {
            this.profileDataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsePendingUsersList : CxWSBasicRepsonse {
    
    private WebClientPendingUser[] pendingUsersListField;
    
    /// <remarks/>
    public WebClientPendingUser[] pendingUsersList {
        get {
            return this.pendingUsersListField;
        }
        set {
            this.pendingUsersListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseResultStateList : CxWSBasicRepsonse {
    
    private ResultState[] resultStateListField;
    
    /// <remarks/>
    public ResultState[] ResultStateList {
        get {
            return this.resultStateListField;
        }
        set {
            this.resultStateListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSourceContent : CxWSBasicRepsonse {
    
    private string sourceField;
    
    private string encodeField;
    
    /// <remarks/>
    public string Source {
        get {
            return this.sourceField;
        }
        set {
            this.sourceField = value;
        }
    }
    
    /// <remarks/>
    public string Encode {
        get {
            return this.encodeField;
        }
        set {
            this.encodeField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseQueryDescription : CxWSBasicRepsonse {
    
    private string queryDescriptionField;
    
    /// <remarks/>
    public string QueryDescription {
        get {
            return this.queryDescriptionField;
        }
        set {
            this.queryDescriptionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanResults : CxWSBasicRepsonse {
    
    private byte[] scanResultsField;
    
    private bool containsAllResultsField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] ScanResults {
        get {
            return this.scanResultsField;
        }
        set {
            this.scanResultsField = value;
        }
    }
    
    /// <remarks/>
    public bool containsAllResults {
        get {
            return this.containsAllResultsField;
        }
        set {
            this.containsAllResultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CXWSResponseScanReportStatus : CxWSBasicRepsonse {
    
    private bool scanReportReadyField;
    
    /// <remarks/>
    public bool scanReportReady {
        get {
            return this.scanReportReadyField;
        }
        set {
            this.scanReportReadyField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponceScanCompareResults : CxWSBasicRepsonse {
    
    private CxWSSingleResultCompareData[] resultsField;
    
    /// <remarks/>
    public CxWSSingleResultCompareData[] Results {
        get {
            return this.resultsField;
        }
        set {
            this.resultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSSingleResultCompareData : CxWSSingleResultData {
    
    private CompareStatusType resultStatusField;
    
    private long scanIDField;
    
    private string queryNameField;
    
    /// <remarks/>
    public CompareStatusType ResultStatus {
        get {
            return this.resultStatusField;
        }
        set {
            this.resultStatusField = value;
        }
    }
    
    /// <remarks/>
    public long ScanID {
        get {
            return this.scanIDField;
        }
        set {
            this.scanIDField = value;
        }
    }
    
    /// <remarks/>
    public string QueryName {
        get {
            return this.queryNameField;
        }
        set {
            this.queryNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="CxDataTypes.xsd")]
public enum CompareStatusType {
    
    /// <remarks/>
    Fixed,
    
    /// <remarks/>
    Reoccured,
    
    /// <remarks/>
    New,
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSSingleResultCompareData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSSingleResultData {
    
    private long queryIdField;
    
    private long pathIdField;
    
    private string sourceFolderField;
    
    private string sourceFileField;
    
    private long sourceLineField;
    
    private string sourceObjectField;
    
    private string destFolderField;
    
    private string destFileField;
    
    private long destLineField;
    
    private string destObjectField;
    
    private string commentField;
    
    private int stateField;
    
    private int severityField;
    
    private string assignedUserField;
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public long PathId {
        get {
            return this.pathIdField;
        }
        set {
            this.pathIdField = value;
        }
    }
    
    /// <remarks/>
    public string SourceFolder {
        get {
            return this.sourceFolderField;
        }
        set {
            this.sourceFolderField = value;
        }
    }
    
    /// <remarks/>
    public string SourceFile {
        get {
            return this.sourceFileField;
        }
        set {
            this.sourceFileField = value;
        }
    }
    
    /// <remarks/>
    public long SourceLine {
        get {
            return this.sourceLineField;
        }
        set {
            this.sourceLineField = value;
        }
    }
    
    /// <remarks/>
    public string SourceObject {
        get {
            return this.sourceObjectField;
        }
        set {
            this.sourceObjectField = value;
        }
    }
    
    /// <remarks/>
    public string DestFolder {
        get {
            return this.destFolderField;
        }
        set {
            this.destFolderField = value;
        }
    }
    
    /// <remarks/>
    public string DestFile {
        get {
            return this.destFileField;
        }
        set {
            this.destFileField = value;
        }
    }
    
    /// <remarks/>
    public long DestLine {
        get {
            return this.destLineField;
        }
        set {
            this.destLineField = value;
        }
    }
    
    /// <remarks/>
    public string DestObject {
        get {
            return this.destObjectField;
        }
        set {
            this.destObjectField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public int State {
        get {
            return this.stateField;
        }
        set {
            this.stateField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public string AssignedUser {
        get {
            return this.assignedUserField;
        }
        set {
            this.assignedUserField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanCompareReport : CxWSBasicRepsonse {
    
    private byte[] reportField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] Report {
        get {
            return this.reportField;
        }
        set {
            this.reportField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanCompareSummary : CxWSBasicRepsonse {
    
    private CxWsScanCompareCount totalField;
    
    private CxWsScanCompareCount highField;
    
    private CxWsScanCompareCount mediumField;
    
    private CxWsScanCompareCount lowField;
    
    private CxWsScanCompareCount infoField;
    
    /// <remarks/>
    public CxWsScanCompareCount Total {
        get {
            return this.totalField;
        }
        set {
            this.totalField = value;
        }
    }
    
    /// <remarks/>
    public CxWsScanCompareCount High {
        get {
            return this.highField;
        }
        set {
            this.highField = value;
        }
    }
    
    /// <remarks/>
    public CxWsScanCompareCount Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    public CxWsScanCompareCount Low {
        get {
            return this.lowField;
        }
        set {
            this.lowField = value;
        }
    }
    
    /// <remarks/>
    public CxWsScanCompareCount Info {
        get {
            return this.infoField;
        }
        set {
            this.infoField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanSummary : CxWSBasicRepsonse {
    
    private CxDateTime startedField;
    
    private CxDateTime finishedField;
    
    private int scanRiskField;
    
    private string presetField;
    
    private string pathField;
    
    private string commentField;
    
    private long lOCField;
    
    private long filesCountField;
    
    private int highField;
    
    private int mediumField;
    
    private int lowField;
    
    private int infoField;
    
    private int scanRiskSeverityField;
    
    private int scanRiskQuantityField;
    
    private bool isIncrementalField;
    
    /// <remarks/>
    public CxDateTime Started {
        get {
            return this.startedField;
        }
        set {
            this.startedField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime Finished {
        get {
            return this.finishedField;
        }
        set {
            this.finishedField = value;
        }
    }
    
    /// <remarks/>
    public int ScanRisk {
        get {
            return this.scanRiskField;
        }
        set {
            this.scanRiskField = value;
        }
    }
    
    /// <remarks/>
    public string Preset {
        get {
            return this.presetField;
        }
        set {
            this.presetField = value;
        }
    }
    
    /// <remarks/>
    public string Path {
        get {
            return this.pathField;
        }
        set {
            this.pathField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public long LOC {
        get {
            return this.lOCField;
        }
        set {
            this.lOCField = value;
        }
    }
    
    /// <remarks/>
    public long FilesCount {
        get {
            return this.filesCountField;
        }
        set {
            this.filesCountField = value;
        }
    }
    
    /// <remarks/>
    public int High {
        get {
            return this.highField;
        }
        set {
            this.highField = value;
        }
    }
    
    /// <remarks/>
    public int Medium {
        get {
            return this.mediumField;
        }
        set {
            this.mediumField = value;
        }
    }
    
    /// <remarks/>
    public int Low {
        get {
            return this.lowField;
        }
        set {
            this.lowField = value;
        }
    }
    
    /// <remarks/>
    public int Info {
        get {
            return this.infoField;
        }
        set {
            this.infoField = value;
        }
    }
    
    /// <remarks/>
    public int ScanRiskSeverity {
        get {
            return this.scanRiskSeverityField;
        }
        set {
            this.scanRiskSeverityField = value;
        }
    }
    
    /// <remarks/>
    public int ScanRiskQuantity {
        get {
            return this.scanRiskQuantityField;
        }
        set {
            this.scanRiskQuantityField = value;
        }
    }
    
    /// <remarks/>
    public bool IsIncremental {
        get {
            return this.isIncrementalField;
        }
        set {
            this.isIncrementalField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanProperties : CxWSBasicRepsonse {
    
    private Vulerability[] top5VulnesField;
    
    private ScanRiskLevel scanRiskParamsField;
    
    private string commentField;
    
    /// <remarks/>
    public Vulerability[] Top5Vulnes {
        get {
            return this.top5VulnesField;
        }
        set {
            this.top5VulnesField = value;
        }
    }
    
    /// <remarks/>
    public ScanRiskLevel ScanRiskParams {
        get {
            return this.scanRiskParamsField;
        }
        set {
            this.scanRiskParamsField = value;
        }
    }
    
    /// <remarks/>
    public string Comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScansDisplayData : CxWSBasicRepsonse {
    
    private ScanDisplayData[] scanListField;
    
    /// <remarks/>
    public ScanDisplayData[] ScanList {
        get {
            return this.scanListField;
        }
        set {
            this.scanListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsProjectChartData : CxWSBasicRepsonse {
    
    private ProjectScansRiskLevel[] scansRiskLevelListField;
    
    private ProjectScansResultSummary[] scanResultSummaryListField;
    
    /// <remarks/>
    public ProjectScansRiskLevel[] ScansRiskLevelList {
        get {
            return this.scansRiskLevelListField;
        }
        set {
            this.scansRiskLevelListField = value;
        }
    }
    
    /// <remarks/>
    public ProjectScansResultSummary[] ScanResultSummaryList {
        get {
            return this.scanResultSummaryListField;
        }
        set {
            this.scanResultSummaryListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsProjectProperties : CxWSBasicRepsonse {
    
    private CxWSResponseProjectConfig projectConfigField;
    
    private CxWSResponsProjectChartData projectChartDataField;
    
    /// <remarks/>
    public CxWSResponseProjectConfig ProjectConfig {
        get {
            return this.projectConfigField;
        }
        set {
            this.projectConfigField = value;
        }
    }
    
    /// <remarks/>
    public CxWSResponsProjectChartData ProjectChartData {
        get {
            return this.projectChartDataField;
        }
        set {
            this.projectChartDataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseProjectConfig : CxWSBasicRepsonse {
    
    private ProjectConfiguration projectConfigField;
    
    private UserPermission permissionField;
    
    /// <remarks/>
    public ProjectConfiguration ProjectConfig {
        get {
            return this.projectConfigField;
        }
        set {
            this.projectConfigField = value;
        }
    }
    
    /// <remarks/>
    public UserPermission Permission {
        get {
            return this.permissionField;
        }
        set {
            this.permissionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseProjectsDisplayData : CxWSBasicRepsonse {
    
    private ProjectDisplayData[] projectListField;
    
    /// <remarks/>
    public ProjectDisplayData[] projectList {
        get {
            return this.projectListField;
        }
        set {
            this.projectListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseProjectsData : CxWSBasicRepsonse {
    
    private CxProjectData[] projectsListField;
    
    /// <remarks/>
    public CxProjectData[] ProjectsList {
        get {
            return this.projectsListField;
        }
        set {
            this.projectsListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseQueueRunID : CxWSBasicRepsonse {
    
    private string runIdField;
    
    /// <remarks/>
    public string RunId {
        get {
            return this.runIdField;
        }
        set {
            this.runIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanStatusArray : CxWSBasicRepsonse {
    
    private CxWSResponseScanStatus[] statusArrField;
    
    /// <remarks/>
    public CxWSResponseScanStatus[] statusArr {
        get {
            return this.statusArrField;
        }
        set {
            this.statusArrField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseScanStatus : CxWSBasicRepsonse {
    
    private int currentStageField;
    
    private int queuePositionField;
    
    private int totalPercentField;
    
    private int currentStagePercentField;
    
    private string ownerField;
    
    private string stageNameField;
    
    private string stageMessageField;
    
    private string stepMessageField;
    
    private string stepDetailsField;
    
    private long resultIdField;
    
    private long scanIdField;
    
    private long projectIdField;
    
    private long taskIdField;
    
    private string taskNameField;
    
    private string projectNameField;
    
    private string runIdField;
    
    private string sourceIdField;
    
    private long lOCField;
    
    private CxDateTime timeScheduledField;
    
    private CxDateTime elapsedTimeField;
    
    private CxDateTime timeFinishedField;
    
    private CxDateTime timeBeginWorkingField;
    
    private CurrentStatusEnum currentStatusField;
    
    /// <remarks/>
    public int CurrentStage {
        get {
            return this.currentStageField;
        }
        set {
            this.currentStageField = value;
        }
    }
    
    /// <remarks/>
    public int QueuePosition {
        get {
            return this.queuePositionField;
        }
        set {
            this.queuePositionField = value;
        }
    }
    
    /// <remarks/>
    public int TotalPercent {
        get {
            return this.totalPercentField;
        }
        set {
            this.totalPercentField = value;
        }
    }
    
    /// <remarks/>
    public int CurrentStagePercent {
        get {
            return this.currentStagePercentField;
        }
        set {
            this.currentStagePercentField = value;
        }
    }
    
    /// <remarks/>
    public string Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public string StageName {
        get {
            return this.stageNameField;
        }
        set {
            this.stageNameField = value;
        }
    }
    
    /// <remarks/>
    public string StageMessage {
        get {
            return this.stageMessageField;
        }
        set {
            this.stageMessageField = value;
        }
    }
    
    /// <remarks/>
    public string StepMessage {
        get {
            return this.stepMessageField;
        }
        set {
            this.stepMessageField = value;
        }
    }
    
    /// <remarks/>
    public string StepDetails {
        get {
            return this.stepDetailsField;
        }
        set {
            this.stepDetailsField = value;
        }
    }
    
    /// <remarks/>
    public long ResultId {
        get {
            return this.resultIdField;
        }
        set {
            this.resultIdField = value;
        }
    }
    
    /// <remarks/>
    public long ScanId {
        get {
            return this.scanIdField;
        }
        set {
            this.scanIdField = value;
        }
    }
    
    /// <remarks/>
    public long ProjectId {
        get {
            return this.projectIdField;
        }
        set {
            this.projectIdField = value;
        }
    }
    
    /// <remarks/>
    public long TaskId {
        get {
            return this.taskIdField;
        }
        set {
            this.taskIdField = value;
        }
    }
    
    /// <remarks/>
    public string TaskName {
        get {
            return this.taskNameField;
        }
        set {
            this.taskNameField = value;
        }
    }
    
    /// <remarks/>
    public string ProjectName {
        get {
            return this.projectNameField;
        }
        set {
            this.projectNameField = value;
        }
    }
    
    /// <remarks/>
    public string RunId {
        get {
            return this.runIdField;
        }
        set {
            this.runIdField = value;
        }
    }
    
    /// <remarks/>
    public string SourceId {
        get {
            return this.sourceIdField;
        }
        set {
            this.sourceIdField = value;
        }
    }
    
    /// <remarks/>
    public long LOC {
        get {
            return this.lOCField;
        }
        set {
            this.lOCField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime TimeScheduled {
        get {
            return this.timeScheduledField;
        }
        set {
            this.timeScheduledField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime ElapsedTime {
        get {
            return this.elapsedTimeField;
        }
        set {
            this.elapsedTimeField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime TimeFinished {
        get {
            return this.timeFinishedField;
        }
        set {
            this.timeFinishedField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime TimeBeginWorking {
        get {
            return this.timeBeginWorkingField;
        }
        set {
            this.timeBeginWorkingField = value;
        }
    }
    
    /// <remarks/>
    public CurrentStatusEnum CurrentStatus {
        get {
            return this.currentStatusField;
        }
        set {
            this.currentStatusField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CurrentStatusEnum {
    
    /// <remarks/>
    Queued,
    
    /// <remarks/>
    Working,
    
    /// <remarks/>
    Finished,
    
    /// <remarks/>
    Failed,
    
    /// <remarks/>
    Canceled,
    
    /// <remarks/>
    Deleted,
    
    /// <remarks/>
    Unknown,
    
    /// <remarks/>
    Unzipping,
    
    /// <remarks/>
    WaitingToProcess,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseCountLines : CxWSBasicRepsonse {
    
    private int numOfLinesField;
    
    /// <remarks/>
    public int NumOfLines {
        get {
            return this.numOfLinesField;
        }
        set {
            this.numOfLinesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseProjectID : CxWSBasicRepsonse {
    
    private long projectIDField;
    
    /// <remarks/>
    public long ProjectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSourceActionList : CxWSBasicRepsonse {
    
    private Action[] actionListField;
    
    /// <remarks/>
    public Action[] ActionList {
        get {
            return this.actionListField;
        }
        set {
            this.actionListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseFileSystemLayer : CxWSBasicRepsonse {
    
    private string[] folderListField;
    
    /// <remarks/>
    public string[] FolderList {
        get {
            return this.folderListField;
        }
        set {
            this.folderListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseConfigSetList : CxWSBasicRepsonse {
    
    private ConfigurationSet[] configSetListField;
    
    /// <remarks/>
    public ConfigurationSet[] ConfigSetList {
        get {
            return this.configSetListField;
        }
        set {
            this.configSetListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseGroupList : CxWSBasicRepsonse {
    
    private Group[] groupListField;
    
    /// <remarks/>
    public Group[] GroupList {
        get {
            return this.groupListField;
        }
        set {
            this.groupListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseCache : CxWSBasicRepsonse {
    
    private byte[] cacheField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] Cache {
        get {
            return this.cacheField;
        }
        set {
            this.cacheField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CXWSResponseResultSummary : CxWSBasicRepsonse {
    
    private CxWSResultSummary[] summaryListField;
    
    /// <remarks/>
    public CxWSResultSummary[] SummaryList {
        get {
            return this.summaryListField;
        }
        set {
            this.summaryListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseResultCollection : CxWSBasicRepsonse {
    
    private AuditResultsCollection resultCollectionField;
    
    /// <remarks/>
    public AuditResultsCollection ResultCollection {
        get {
            return this.resultCollectionField;
        }
        set {
            this.resultCollectionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSourceContainer : CxWSBasicRepsonse {
    
    private LocalCodeContainer sourceCodeContainerField;
    
    /// <remarks/>
    public LocalCodeContainer sourceCodeContainer {
        get {
            return this.sourceCodeContainerField;
        }
        set {
            this.sourceCodeContainerField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSourceID : CxWSBasicRepsonse {
    
    private long projectIDField;
    
    private string sourceIDField;
    
    /// <remarks/>
    public long ProjectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string SourceID {
        get {
            return this.sourceIDField;
        }
        set {
            this.sourceIDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseProjectsScansList : CxWSBasicRepsonse {
    
    private CxWSResponseBasicProjectData[] projectsField;
    
    /// <remarks/>
    public CxWSResponseBasicProjectData[] projects {
        get {
            return this.projectsField;
        }
        set {
            this.projectsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseRunID : CxWSBasicRepsonse {
    
    private long projectIDField;
    
    private string runIdField;
    
    /// <remarks/>
    public long ProjectID {
        get {
            return this.projectIDField;
        }
        set {
            this.projectIDField = value;
        }
    }
    
    /// <remarks/>
    public string RunId {
        get {
            return this.runIdField;
        }
        set {
            this.runIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseEngineServerId : CxWSBasicRepsonse {
    
    private long idField;
    
    /// <remarks/>
    public long id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseEngineServers : CxWSBasicRepsonse {
    
    private CxEngineServer[] listField;
    
    /// <remarks/>
    public CxEngineServer[] list {
        get {
            return this.listField;
        }
        set {
            this.listField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxEngineServer {
    
    private long idField;
    
    private string uriField;
    
    private int maxScansField;
    
    private string serverNameField;
    
    /// <remarks/>
    public long id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string uri {
        get {
            return this.uriField;
        }
        set {
            this.uriField = value;
        }
    }
    
    /// <remarks/>
    public int maxScans {
        get {
            return this.maxScansField;
        }
        set {
            this.maxScansField = value;
        }
    }
    
    /// <remarks/>
    public string serverName {
        get {
            return this.serverNameField;
        }
        set {
            this.serverNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSaasPackage : CxWSBasicRepsonse {
    
    private SaasPackage[] packagesField;
    
    /// <remarks/>
    public SaasPackage[] packages {
        get {
            return this.packagesField;
        }
        set {
            this.packagesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SaasPackage {
    
    private long idField;
    
    private string nameField;
    
    private long usersField;
    
    private int languagesField;
    
    private long lOCField;
    
    private int presetsNumberField;
    
    private long[] presetsIdsField;
    
    private bool freeField;
    
    private bool sourceControlEnabledField;
    
    private bool createPDFEnabledField;
    
    private bool onlineViewerEnabledField;
    
    private bool pluginsEnabledField;
    
    private bool systemField;
    
    private int scansToDisplayField;
    
    private bool is_DeprecatedField;
    
    /// <remarks/>
    public long Id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public long Users {
        get {
            return this.usersField;
        }
        set {
            this.usersField = value;
        }
    }
    
    /// <remarks/>
    public int Languages {
        get {
            return this.languagesField;
        }
        set {
            this.languagesField = value;
        }
    }
    
    /// <remarks/>
    public long LOC {
        get {
            return this.lOCField;
        }
        set {
            this.lOCField = value;
        }
    }
    
    /// <remarks/>
    public int PresetsNumber {
        get {
            return this.presetsNumberField;
        }
        set {
            this.presetsNumberField = value;
        }
    }
    
    /// <remarks/>
    public long[] PresetsIds {
        get {
            return this.presetsIdsField;
        }
        set {
            this.presetsIdsField = value;
        }
    }
    
    /// <remarks/>
    public bool Free {
        get {
            return this.freeField;
        }
        set {
            this.freeField = value;
        }
    }
    
    /// <remarks/>
    public bool SourceControlEnabled {
        get {
            return this.sourceControlEnabledField;
        }
        set {
            this.sourceControlEnabledField = value;
        }
    }
    
    /// <remarks/>
    public bool CreatePDFEnabled {
        get {
            return this.createPDFEnabledField;
        }
        set {
            this.createPDFEnabledField = value;
        }
    }
    
    /// <remarks/>
    public bool OnlineViewerEnabled {
        get {
            return this.onlineViewerEnabledField;
        }
        set {
            this.onlineViewerEnabledField = value;
        }
    }
    
    /// <remarks/>
    public bool PluginsEnabled {
        get {
            return this.pluginsEnabledField;
        }
        set {
            this.pluginsEnabledField = value;
        }
    }
    
    /// <remarks/>
    public bool System {
        get {
            return this.systemField;
        }
        set {
            this.systemField = value;
        }
    }
    
    /// <remarks/>
    public int ScansToDisplay {
        get {
            return this.scansToDisplayField;
        }
        set {
            this.scansToDisplayField = value;
        }
    }
    
    /// <remarks/>
    public bool Is_Deprecated {
        get {
            return this.is_DeprecatedField;
        }
        set {
            this.is_DeprecatedField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLoginData))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasLoginData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSessionID : CxWSBasicRepsonse {
    
    private string sessionIdField;
    
    /// <remarks/>
    public string SessionId {
        get {
            return this.sessionIdField;
        }
        set {
            this.sessionIdField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasLoginData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseLoginData : CxWSResponseSessionID {
    
    private string familyNameField;
    
    private string firstNameField;
    
    private int userPreferedLanguageLCIDField;
    
    private bool isAllowedToCreateProjectField;
    
    private bool isAllowedToChangeProjectField;
    
    private bool isAllowedToManageUsersField;
    
    private bool isAllowedToViewCompaniesField;
    
    private bool isAllowedToManageCompaniesField;
    
    private bool isAllowedToManageServerField;
    
    private bool isAllowedToViewInstallationDataField;
    
    private bool isAllowedToViewSpField;
    
    private bool isAllowedToManageSpField;
    
    private bool isScannerField;
    
    private bool isAuditorField;
    
    private bool isAllowedToManagePresetsField;
    
    private bool isAllowedToManagePredefinedCommandField;
    
    private bool isAllowedToManagePostScanActionField;
    
    /// <remarks/>
    public string FamilyName {
        get {
            return this.familyNameField;
        }
        set {
            this.familyNameField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public int UserPreferedLanguageLCID {
        get {
            return this.userPreferedLanguageLCIDField;
        }
        set {
            this.userPreferedLanguageLCIDField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToCreateProject {
        get {
            return this.isAllowedToCreateProjectField;
        }
        set {
            this.isAllowedToCreateProjectField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToChangeProject {
        get {
            return this.isAllowedToChangeProjectField;
        }
        set {
            this.isAllowedToChangeProjectField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageUsers {
        get {
            return this.isAllowedToManageUsersField;
        }
        set {
            this.isAllowedToManageUsersField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToViewCompanies {
        get {
            return this.isAllowedToViewCompaniesField;
        }
        set {
            this.isAllowedToViewCompaniesField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageCompanies {
        get {
            return this.isAllowedToManageCompaniesField;
        }
        set {
            this.isAllowedToManageCompaniesField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageServer {
        get {
            return this.isAllowedToManageServerField;
        }
        set {
            this.isAllowedToManageServerField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToViewInstallationData {
        get {
            return this.isAllowedToViewInstallationDataField;
        }
        set {
            this.isAllowedToViewInstallationDataField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToViewSp {
        get {
            return this.isAllowedToViewSpField;
        }
        set {
            this.isAllowedToViewSpField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManageSp {
        get {
            return this.isAllowedToManageSpField;
        }
        set {
            this.isAllowedToManageSpField = value;
        }
    }
    
    /// <remarks/>
    public bool IsScanner {
        get {
            return this.isScannerField;
        }
        set {
            this.isScannerField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAuditor {
        get {
            return this.isAuditorField;
        }
        set {
            this.isAuditorField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManagePresets {
        get {
            return this.isAllowedToManagePresetsField;
        }
        set {
            this.isAllowedToManagePresetsField = value;
        }
    }
    
    /// <remarks/>
    public bool isAllowedToManagePredefinedCommand {
        get {
            return this.isAllowedToManagePredefinedCommandField;
        }
        set {
            this.isAllowedToManagePredefinedCommandField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToManagePostScanAction {
        get {
            return this.isAllowedToManagePostScanActionField;
        }
        set {
            this.isAllowedToManagePostScanActionField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseSaasLoginData : CxWSResponseLoginData {
    
    private bool isAllowedToUseSourceControlField;
    
    private bool isAllowedToCreatePDFField;
    
    private bool isAllowedToUseOnlineViewerField;
    
    private bool isAllowedToUsePluginsField;
    
    /// <remarks/>
    public bool IsAllowedToUseSourceControl {
        get {
            return this.isAllowedToUseSourceControlField;
        }
        set {
            this.isAllowedToUseSourceControlField = value;
        }
    }
    
    /// <remarks/>
    public bool isAllowedToCreatePDF {
        get {
            return this.isAllowedToCreatePDFField;
        }
        set {
            this.isAllowedToCreatePDFField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToUseOnlineViewer {
        get {
            return this.isAllowedToUseOnlineViewerField;
        }
        set {
            this.isAllowedToUseOnlineViewerField = value;
        }
    }
    
    /// <remarks/>
    public bool IsAllowedToUsePlugins {
        get {
            return this.isAllowedToUsePluginsField;
        }
        set {
            this.isAllowedToUsePluginsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsePivotLayouts : CxWSBasicRepsonse {
    
    private CxPivotLayout[] layoutsField;
    
    /// <remarks/>
    public CxPivotLayout[] Layouts {
        get {
            return this.layoutsField;
        }
        set {
            this.layoutsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPivotLayout {
    
    private long idField;
    
    private string nameField;
    
    private long ownerField;
    
    private string serializedDataField;
    
    private string chartTypeField;
    
    private bool isSystemField;
    
    private string owner_TeamField;
    
    private bool isPublicField;
    
    private long viewIdField;
    
    /// <remarks/>
    public long Id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public long Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public string SerializedData {
        get {
            return this.serializedDataField;
        }
        set {
            this.serializedDataField = value;
        }
    }
    
    /// <remarks/>
    public string ChartType {
        get {
            return this.chartTypeField;
        }
        set {
            this.chartTypeField = value;
        }
    }
    
    /// <remarks/>
    public bool IsSystem {
        get {
            return this.isSystemField;
        }
        set {
            this.isSystemField = value;
        }
    }
    
    /// <remarks/>
    public string Owner_Team {
        get {
            return this.owner_TeamField;
        }
        set {
            this.owner_TeamField = value;
        }
    }
    
    /// <remarks/>
    public bool IsPublic {
        get {
            return this.isPublicField;
        }
        set {
            this.isPublicField = value;
        }
    }
    
    /// <remarks/>
    public long ViewId {
        get {
            return this.viewIdField;
        }
        set {
            this.viewIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsePivotTable : CxWSBasicRepsonse {
    
    private CxPivotTable pivotTableField;
    
    /// <remarks/>
    public CxPivotTable PivotTable {
        get {
            return this.pivotTableField;
        }
        set {
            this.pivotTableField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPivotTable {
    
    private CxPivotColumn[] columnsField;
    
    private CxPivotRow[] rowsField;
    
    /// <remarks/>
    public CxPivotColumn[] Columns {
        get {
            return this.columnsField;
        }
        set {
            this.columnsField = value;
        }
    }
    
    /// <remarks/>
    public CxPivotRow[] Rows {
        get {
            return this.rowsField;
        }
        set {
            this.rowsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPivotColumn {
    
    private string nameField;
    
    private string dataTypeNameField;
    
    private string displayNameField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string DataTypeName {
        get {
            return this.dataTypeNameField;
        }
        set {
            this.dataTypeNameField = value;
        }
    }
    
    /// <remarks/>
    public string DisplayName {
        get {
            return this.displayNameField;
        }
        set {
            this.displayNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPivotRow {
    
    private object[] dataField;
    
    /// <remarks/>
    public object[] Data {
        get {
            return this.dataField;
        }
        set {
            this.dataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseBool : CxWSBasicRepsonse {
    
    private bool resultField;
    
    /// <remarks/>
    public bool result {
        get {
            return this.resultField;
        }
        set {
            this.resultField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseUserData : CxWSBasicRepsonse {
    
    private UserData[] userDataListField;
    
    /// <remarks/>
    public UserData[] UserDataList {
        get {
            return this.userDataListField;
        }
        set {
            this.userDataListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class UserData : WebClientUser {
    
    private bool isActiveField;
    
    private Role roleDataField;
    
    /// <remarks/>
    public bool IsActive {
        get {
            return this.isActiveField;
        }
        set {
            this.isActiveField = value;
        }
    }
    
    /// <remarks/>
    public Role RoleData {
        get {
            return this.roleDataField;
        }
        set {
            this.roleDataField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class Role {
    
    private string nameField;
    
    private string idField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(UserData))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class WebClientUser {
    
    private long idField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private int userPreferedLanguageLCIDField;
    
    private string passwordField;
    
    private string jobTitleField;
    
    private string emailField;
    
    private string userNameField;
    
    private string uPNField;
    
    private string phoneField;
    
    private string cellPhoneField;
    
    private string skypeField;
    
    private string companyIDField;
    
    private string companyNameField;
    
    private string willExpireAfterDaysField;
    
    private string countryField;
    
    private Group[] groupListField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public int UserPreferedLanguageLCID {
        get {
            return this.userPreferedLanguageLCIDField;
        }
        set {
            this.userPreferedLanguageLCIDField = value;
        }
    }
    
    /// <remarks/>
    public string Password {
        get {
            return this.passwordField;
        }
        set {
            this.passwordField = value;
        }
    }
    
    /// <remarks/>
    public string JobTitle {
        get {
            return this.jobTitleField;
        }
        set {
            this.jobTitleField = value;
        }
    }
    
    /// <remarks/>
    public string Email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string UPN {
        get {
            return this.uPNField;
        }
        set {
            this.uPNField = value;
        }
    }
    
    /// <remarks/>
    public string Phone {
        get {
            return this.phoneField;
        }
        set {
            this.phoneField = value;
        }
    }
    
    /// <remarks/>
    public string CellPhone {
        get {
            return this.cellPhoneField;
        }
        set {
            this.cellPhoneField = value;
        }
    }
    
    /// <remarks/>
    public string Skype {
        get {
            return this.skypeField;
        }
        set {
            this.skypeField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyID {
        get {
            return this.companyIDField;
        }
        set {
            this.companyIDField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyName {
        get {
            return this.companyNameField;
        }
        set {
            this.companyNameField = value;
        }
    }
    
    /// <remarks/>
    public string willExpireAfterDays {
        get {
            return this.willExpireAfterDaysField;
        }
        set {
            this.willExpireAfterDaysField = value;
        }
    }
    
    /// <remarks/>
    public string country {
        get {
            return this.countryField;
        }
        set {
            this.countryField = value;
        }
    }
    
    /// <remarks/>
    public Group[] GroupList {
        get {
            return this.groupListField;
        }
        set {
            this.groupListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseNameList : CxWSBasicRepsonse {
    
    private string[] nameListField;
    
    /// <remarks/>
    public string[] NameList {
        get {
            return this.nameListField;
        }
        set {
            this.nameListField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsePredefinedCommands : CxWSBasicRepsonse {
    
    private CxPredefinedCommand[] commandsField;
    
    /// <remarks/>
    public CxPredefinedCommand[] commands {
        get {
            return this.commandsField;
        }
        set {
            this.commandsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponseResultPaths : CxWSBasicRepsonse {
    
    private CxWSResultPath[] pathsField;
    
    /// <remarks/>
    public CxWSResultPath[] Paths {
        get {
            return this.pathsField;
        }
        set {
            this.pathsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponceFileNames : CxWSBasicRepsonse {
    
    private string[] fileNamesField;
    
    /// <remarks/>
    public string[] fileNames {
        get {
            return this.fileNamesField;
        }
        set {
            this.fileNamesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponceResultPath : CxWSBasicRepsonse {
    
    private CxWSResultPath pathField;
    
    /// <remarks/>
    public CxWSResultPath Path {
        get {
            return this.pathField;
        }
        set {
            this.pathField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponceScanResults : CxWSBasicRepsonse {
    
    private CxWSSingleResultData[] resultsField;
    
    /// <remarks/>
    public CxWSSingleResultData[] Results {
        get {
            return this.resultsField;
        }
        set {
            this.resultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponceQuerisForScanAndId : CxWSBasicRepsonse {
    
    private CxWSQueryVulnerabilityData[] queriesField;
    
    private long scanIdField;
    
    /// <remarks/>
    public CxWSQueryVulnerabilityData[] Queries {
        get {
            return this.queriesField;
        }
        set {
            this.queriesField = value;
        }
    }
    
    /// <remarks/>
    public long scanId {
        get {
            return this.scanIdField;
        }
        set {
            this.scanIdField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSQueryVulnerabilityData {
    
    private long queryIdField;
    
    private string queryNameField;
    
    private long groupIdField;
    
    private string groupNameField;
    
    private int severityField;
    
    private long cWEField;
    
    private int amountOfResultsField;
    
    /// <remarks/>
    public long QueryId {
        get {
            return this.queryIdField;
        }
        set {
            this.queryIdField = value;
        }
    }
    
    /// <remarks/>
    public string QueryName {
        get {
            return this.queryNameField;
        }
        set {
            this.queryNameField = value;
        }
    }
    
    /// <remarks/>
    public long GroupId {
        get {
            return this.groupIdField;
        }
        set {
            this.groupIdField = value;
        }
    }
    
    /// <remarks/>
    public string GroupName {
        get {
            return this.groupNameField;
        }
        set {
            this.groupNameField = value;
        }
    }
    
    /// <remarks/>
    public int Severity {
        get {
            return this.severityField;
        }
        set {
            this.severityField = value;
        }
    }
    
    /// <remarks/>
    public long CWE {
        get {
            return this.cWEField;
        }
        set {
            this.cWEField = value;
        }
    }
    
    /// <remarks/>
    public int AmountOfResults {
        get {
            return this.amountOfResultsField;
        }
        set {
            this.amountOfResultsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponceQuerisForScan : CxWSBasicRepsonse {
    
    private CxWSQueryVulnerabilityData[] queriesField;
    
    /// <remarks/>
    public CxWSQueryVulnerabilityData[] Queries {
        get {
            return this.queriesField;
        }
        set {
            this.queriesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxWSResponsePresetDetails : CxWSBasicRepsonse {
    
    private CxPresetDetails presetField;
    
    /// <remarks/>
    public CxPresetDetails preset {
        get {
            return this.presetField;
        }
        set {
            this.presetField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CxPresetDetails {
    
    private long[] queryIdsField;
    
    private long idField;
    
    private string nameField;
    
    private string owningteamField;
    
    private bool isPublicField;
    
    private string ownerField;
    
    private bool isUserAllowToUpdateField;
    
    private bool isUserAllowToDeleteField;
    
    /// <remarks/>
    public long[] queryIds {
        get {
            return this.queryIdsField;
        }
        set {
            this.queryIdsField = value;
        }
    }
    
    /// <remarks/>
    public long id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string owningteam {
        get {
            return this.owningteamField;
        }
        set {
            this.owningteamField = value;
        }
    }
    
    /// <remarks/>
    public bool isPublic {
        get {
            return this.isPublicField;
        }
        set {
            this.isPublicField = value;
        }
    }
    
    /// <remarks/>
    public string owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public bool isUserAllowToUpdate {
        get {
            return this.isUserAllowToUpdateField;
        }
        set {
            this.isUserAllowToUpdateField = value;
        }
    }
    
    /// <remarks/>
    public bool isUserAllowToDelete {
        get {
            return this.isUserAllowToDeleteField;
        }
        set {
            this.isUserAllowToDeleteField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class CliScanArgs {
    
    private ProjectSettings prjSettingsField;
    
    private SourceCodeSettings srcCodeSettingsField;
    
    private bool isPrivateScanField;
    
    private bool isIncrementalField;
    
    /// <remarks/>
    public ProjectSettings PrjSettings {
        get {
            return this.prjSettingsField;
        }
        set {
            this.prjSettingsField = value;
        }
    }
    
    /// <remarks/>
    public SourceCodeSettings SrcCodeSettings {
        get {
            return this.srcCodeSettingsField;
        }
        set {
            this.srcCodeSettingsField = value;
        }
    }
    
    /// <remarks/>
    public bool IsPrivateScan {
        get {
            return this.isPrivateScanField;
        }
        set {
            this.isPrivateScanField = value;
        }
    }
    
    /// <remarks/>
    public bool IsIncremental {
        get {
            return this.isIncrementalField;
        }
        set {
            this.isIncrementalField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public partial class SaasPendingUser {
    
    private long idField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private string passwordField;
    
    private string userNameField;
    
    private string phoneField;
    
    private string companyNameField;
    
    private string industryField;
    
    private string activationTokenField;
    
    private long languagesField;
    
    private long packageIdField;
    
    private CxDateTime createdDateField;
    
    private bool isActivatedField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public string Password {
        get {
            return this.passwordField;
        }
        set {
            this.passwordField = value;
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string Phone {
        get {
            return this.phoneField;
        }
        set {
            this.phoneField = value;
        }
    }
    
    /// <remarks/>
    public string CompanyName {
        get {
            return this.companyNameField;
        }
        set {
            this.companyNameField = value;
        }
    }
    
    /// <remarks/>
    public string Industry {
        get {
            return this.industryField;
        }
        set {
            this.industryField = value;
        }
    }
    
    /// <remarks/>
    public string ActivationToken {
        get {
            return this.activationTokenField;
        }
        set {
            this.activationTokenField = value;
        }
    }
    
    /// <remarks/>
    public long Languages {
        get {
            return this.languagesField;
        }
        set {
            this.languagesField = value;
        }
    }
    
    /// <remarks/>
    public long PackageId {
        get {
            return this.packageIdField;
        }
        set {
            this.packageIdField = value;
        }
    }
    
    /// <remarks/>
    public CxDateTime CreatedDate {
        get {
            return this.createdDateField;
        }
        set {
            this.createdDateField = value;
        }
    }
    
    /// <remarks/>
    public bool IsActivated {
        get {
            return this.isActivatedField;
        }
        set {
            this.isActivatedField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CxWSPackageTypeEnum {
    
    /// <remarks/>
    Cx,
    
    /// <remarks/>
    Corporate,
    
    /// <remarks/>
    Project,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum PivotViewClientType {
    
    /// <remarks/>
    AllProjectScans,
    
    /// <remarks/>
    LastMonthProjectScans,
    
    /// <remarks/>
    ProjectsLastScan,
    
    /// <remarks/>
    LastWeekOWASPTop10,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com/")]
public enum CxClientType {
    
    /// <remarks/>
    CLI,
    
    /// <remarks/>
    Eclipse,
    
    /// <remarks/>
    VS,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueryCollectionCompletedEventHandler(object sender, GetQueryCollectionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueryCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueryCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxQueryCollectionResponse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxQueryCollectionResponse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPresetDetailsCompletedEventHandler(object sender, GetPresetDetailsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPresetDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPresetDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePresetDetails Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePresetDetails)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateNewPresetCompletedEventHandler(object sender, CreateNewPresetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateNewPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateNewPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePresetDetails Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePresetDetails)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdatePresetCompletedEventHandler(object sender, UpdatePresetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdatePresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdatePresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePresetDetails Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePresetDetails)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeletePresetCompletedEventHandler(object sender, DeletePresetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeletePresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeletePresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsValidPresetNameCompletedEventHandler(object sender, IsValidPresetNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsValidPresetNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsValidPresetNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueriesForScanCompletedEventHandler(object sender, GetQueriesForScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueriesForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueriesForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceQuerisForScan Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceQuerisForScan)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueriesForScanByRunIdCompletedEventHandler(object sender, GetQueriesForScanByRunIdCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueriesForScanByRunIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueriesForScanByRunIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceQuerisForScanAndId Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceQuerisForScanAndId)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultsForQueryCompletedEventHandler(object sender, GetResultsForQueryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultsForQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultsForQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultsForQueryQroupCompletedEventHandler(object sender, GetResultsForQueryQroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultsForQueryQroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultsForQueryQroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultsForScanCompletedEventHandler(object sender, GetResultsForScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultsForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultsForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultPathCompletedEventHandler(object sender, GetResultPathCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceResultPath Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceResultPath)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetFileNamesForPathCompletedEventHandler(object sender, GetFileNamesForPathCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetFileNamesForPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetFileNamesForPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceFileNames Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceFileNames)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultPathsForQueryCompletedEventHandler(object sender, GetResultPathsForQueryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultPathsForQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultPathsForQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseResultPaths Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseResultPaths)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultsBySeverityCompletedEventHandler(object sender, GetResultsBySeverityCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultsBySeverityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultsBySeverityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SavePredefinedCommandsCompletedEventHandler(object sender, SavePredefinedCommandsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SavePredefinedCommandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SavePredefinedCommandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPredefinedCommandsCompletedEventHandler(object sender, GetPredefinedCommandsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPredefinedCommandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPredefinedCommandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePredefinedCommands Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePredefinedCommands)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetExecutableListCompletedEventHandler(object sender, GetExecutableListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetExecutableListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetExecutableListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseNameList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseNameList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdatePermissionCompletedEventHandler(object sender, UpdatePermissionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdatePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdatePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectAssignUsersCompletedEventHandler(object sender, GetProjectAssignUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectAssignUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectAssignUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseUserData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseUserData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsAllowAutoSignInCompletedEventHandler(object sender, IsAllowAutoSignInCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsAllowAutoSignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsAllowAutoSignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseBool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseBool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPivotDataCompletedEventHandler(object sender, GetPivotDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPivotDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPivotDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePivotTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePivotTable)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPivotLayoutsCompletedEventHandler(object sender, GetPivotLayoutsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPivotLayoutsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPivotLayoutsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePivotLayouts Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePivotLayouts)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SavePivotLayoutCompletedEventHandler(object sender, SavePivotLayoutCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SavePivotLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SavePivotLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeletePivotLayoutCompletedEventHandler(object sender, DeletePivotLayoutCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeletePivotLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeletePivotLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RegisterSaasPendingUserCompletedEventHandler(object sender, RegisterSaasPendingUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RegisterSaasPendingUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RegisterSaasPendingUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ActivateSaasUserCompletedEventHandler(object sender, ActivateSaasUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ActivateSaasUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ActivateSaasUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSaasLoginData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSaasLoginData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSaasPackagesCompletedEventHandler(object sender, GetSaasPackagesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSaasPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSaasPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSaasPackage Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSaasPackage)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SaasLoginCompletedEventHandler(object sender, SaasLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SaasLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SaasLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSaasLoginData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSaasLoginData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetEngineServersCompletedEventHandler(object sender, GetEngineServersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetEngineServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetEngineServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseEngineServers Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseEngineServers)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateEngineServerCompletedEventHandler(object sender, UpdateEngineServerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateEngineServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateEngineServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateEngineServerCompletedEventHandler(object sender, CreateEngineServerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateEngineServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateEngineServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseEngineServerId Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseEngineServerId)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteEngineServerCompletedEventHandler(object sender, DeleteEngineServerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteEngineServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteEngineServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ScanCompletedEventHandler(object sender, ScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectsWithScansCompletedEventHandler(object sender, GetProjectsWithScansCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectsWithScansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectsWithScansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectsScansList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectsScansList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UploadProjectWithDefaultSettingsCompletedEventHandler(object sender, UploadProjectWithDefaultSettingsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UploadProjectWithDefaultSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadProjectWithDefaultSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSourceID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSourceID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSourceCodeForScanCompletedEventHandler(object sender, GetSourceCodeForScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSourceCodeForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSourceCodeForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSourceContainer Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSourceContainer)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueryCollectionForLanguageCompletedEventHandler(object sender, GetQueryCollectionForLanguageCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueryCollectionForLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueryCollectionForLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxQueryCollectionResponse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxQueryCollectionResponse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UploadQueriesCompletedEventHandler(object sender, UploadQueriesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UploadQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void AddScanResultsToProjectCompletedEventHandler(object sender, AddScanResultsToProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddScanResultsToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddScanResultsToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseBasicScanData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseBasicScanData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultsCompletedEventHandler(object sender, GetResultsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseResultCollection Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseResultCollection)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultSummaryCompletedEventHandler(object sender, GetResultSummaryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CXWSResponseResultSummary Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CXWSResponseResultSummary)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCacheCompletedEventHandler(object sender, GetCacheCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseCache Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseCache)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseLoginData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseLoginData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SsoLoginCompletedEventHandler(object sender, SsoLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SsoLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SsoLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseLoginData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseLoginData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAssociatedGroupsListCompletedEventHandler(object sender, GetAssociatedGroupsListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAssociatedGroupsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAssociatedGroupsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseGroupList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseGroupList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetConfigurationSetListCompletedEventHandler(object sender, GetConfigurationSetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConfigurationSetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetConfigurationSetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseConfigSetList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseConfigSetList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsValidProjectNameCompletedEventHandler(object sender, IsValidProjectNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsValidProjectNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsValidProjectNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSharedFileSystemLayerCompletedEventHandler(object sender, GetSharedFileSystemLayerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSharedFileSystemLayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSharedFileSystemLayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseFileSystemLayer Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseFileSystemLayer)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetRepositoryFileSystemLayerCompletedEventHandler(object sender, GetRepositoryFileSystemLayerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRepositoryFileSystemLayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRepositoryFileSystemLayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseFileSystemLayer Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseFileSystemLayer)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSourceControlActionListCompletedEventHandler(object sender, GetSourceControlActionListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSourceControlActionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSourceControlActionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSourceActionList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSourceActionList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPostScanActionListCompletedEventHandler(object sender, GetPostScanActionListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPostScanActionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPostScanActionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSourceActionList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSourceActionList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateNewProjectCompletedEventHandler(object sender, CreateNewProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateNewProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateNewProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateAndRunProjectCompletedEventHandler(object sender, CreateAndRunProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateAndRunProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateAndRunProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RunScanAndAddToProjectCompletedEventHandler(object sender, RunScanAndAddToProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunScanAndAddToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunScanAndAddToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CountLinesCompletedEventHandler(object sender, CountLinesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CountLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CountLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseCountLines Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseCountLines)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScansStatusesCompletedEventHandler(object sender, GetScansStatusesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScansStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScansStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanStatusArray Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanStatusArray)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetStatusOfSingleScanCompletedEventHandler(object sender, GetStatusOfSingleScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetStatusOfSingleScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetStatusOfSingleScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void PostponeScanCompletedEventHandler(object sender, PostponeScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PostponeScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PostponeScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseQueueRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseQueueRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CancelScanCompletedEventHandler(object sender, CancelScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CancelScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CancelScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateProjectUserCredentialsCompletedEventHandler(object sender, UpdateProjectUserCredentialsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateProjectUserCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateProjectUserCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectsWithUserCredentialsCompletedEventHandler(object sender, GetProjectsWithUserCredentialsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectsWithUserCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectsWithUserCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectsData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectsData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectsCredentialUsersCompletedEventHandler(object sender, GetProjectsCredentialUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectsCredentialUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectsCredentialUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseNameList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseNameList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectsDisplayDataCompletedEventHandler(object sender, GetProjectsDisplayDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectsDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectsDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectsDisplayData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectsDisplayData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RunProjectImmediatelyCompletedEventHandler(object sender, RunProjectImmediatelyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunProjectImmediatelyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunProjectImmediatelyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RunProjectIncrementallyCompletedEventHandler(object sender, RunProjectIncrementallyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunProjectIncrementallyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunProjectIncrementallyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteProjectCompletedEventHandler(object sender, DeleteProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectConfigurationCompletedEventHandler(object sender, GetProjectConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProjectConfig Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProjectConfig)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectPropertiesCompletedEventHandler(object sender, GetProjectPropertiesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsProjectProperties Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsProjectProperties)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateProjectConfigurationCompletedEventHandler(object sender, UpdateProjectConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateProjectConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateProjectConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateProjectIncrementalConfigurationCompletedEventHandler(object sender, UpdateProjectIncrementalConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateProjectIncrementalConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateProjectIncrementalConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetProjectChartsCompletedEventHandler(object sender, GetProjectChartsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProjectChartsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProjectChartsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsProjectChartData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsProjectChartData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ResetIgnorePathCompletedEventHandler(object sender, ResetIgnorePathCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ResetIgnorePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ResetIgnorePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SetFalsePositiveFlagCompletedEventHandler(object sender, SetFalsePositiveFlagCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetFalsePositiveFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetFalsePositiveFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateResultCommentCompletedEventHandler(object sender, UpdateResultCommentCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateResultCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateResultCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateResultStateCompletedEventHandler(object sender, UpdateResultStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateResultStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateResultStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateSetOfResultStateCompletedEventHandler(object sender, UpdateSetOfResultStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateSetOfResultStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateSetOfResultStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RunScanWithExistingProjectCompletedEventHandler(object sender, RunScanWithExistingProjectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunScanWithExistingProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunScanWithExistingProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseRunID Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseRunID)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScansDisplayDataCompletedEventHandler(object sender, GetScansDisplayDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScansDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScansDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScansDisplayData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScansDisplayData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteScanCompletedEventHandler(object sender, DeleteScanCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanPropertiesCompletedEventHandler(object sender, GetScanPropertiesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanProperties Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanProperties)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateScanCommentCompletedEventHandler(object sender, UpdateScanCommentCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateScanCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateScanCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScansDisplayDataForAllProjectsCompletedEventHandler(object sender, GetScansDisplayDataForAllProjectsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScansDisplayDataForAllProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScansDisplayDataForAllProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScansDisplayData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScansDisplayData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanSummaryCompletedEventHandler(object sender, GetScanSummaryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanSummary Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanSummary)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanCompareSummaryCompletedEventHandler(object sender, GetScanCompareSummaryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanCompareSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanCompareSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanCompareSummary Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanCompareSummary)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanCompareReportCompletedEventHandler(object sender, GetScanCompareReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanCompareReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanCompareReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanCompareReport Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanCompareReport)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCompareScanResultsCompletedEventHandler(object sender, GetCompareScanResultsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompareScanResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompareScanResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponceScanCompareResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponceScanCompareResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateScanPDFReportCompletedEventHandler(object sender, CreateScanPDFReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateScanPDFReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateScanPDFReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateScannedFilesReportCompletedEventHandler(object sender, CreateScannedFilesReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateScannedFilesReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateScannedFilesReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanPDFReportStatusCompletedEventHandler(object sender, GetScanPDFReportStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanPDFReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanPDFReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CXWSResponseScanReportStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScannedFilesReportStatusCompletedEventHandler(object sender, GetScannedFilesReportStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScannedFilesReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScannedFilesReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CXWSResponseScanReportStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanPDFReportCompletedEventHandler(object sender, GetScanPDFReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanPDFReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanPDFReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScannedFilesReportCompletedEventHandler(object sender, GetScannedFilesReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScannedFilesReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScannedFilesReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateScanExcelReportCompletedEventHandler(object sender, CreateScanExcelReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateScanExcelReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateScanExcelReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanExcelReportStatusCompletedEventHandler(object sender, GetScanExcelReportStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanExcelReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanExcelReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CXWSResponseScanReportStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanExcelReportCompletedEventHandler(object sender, GetScanExcelReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanExcelReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanExcelReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateScanXMLReportCompletedEventHandler(object sender, CreateScanXMLReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateScanXMLReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateScanXMLReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanXMLReportStatusCompletedEventHandler(object sender, GetScanXMLReportStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanXMLReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanXMLReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CXWSResponseScanReportStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanXMLReportCompletedEventHandler(object sender, GetScanXMLReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanXMLReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanXMLReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanXMLReportByRunIdCompletedEventHandler(object sender, GetScanXMLReportByRunIdCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanXMLReportByRunIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanXMLReportByRunIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanPDFReportByRunIdCompletedEventHandler(object sender, GetScanPDFReportByRunIdCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanPDFReportByRunIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanPDFReportByRunIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateScanRTFReportCompletedEventHandler(object sender, CreateScanRTFReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateScanRTFReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateScanRTFReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanRTFReportStatusCompletedEventHandler(object sender, GetScanRTFReportStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanRTFReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanRTFReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CXWSResponseScanReportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CXWSResponseScanReportStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetScanRTFReportCompletedEventHandler(object sender, GetScanRTFReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetScanRTFReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetScanRTFReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseScanResults Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseScanResults)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetQueryDescriptionCompletedEventHandler(object sender, GetQueryDescriptionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetQueryDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetQueryDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseQueryDescription Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseQueryDescription)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSourceByScanIDCompletedEventHandler(object sender, GetSourceByScanIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSourceByScanIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSourceByScanIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSourceContent Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSourceContent)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetResultStateListCompletedEventHandler(object sender, GetResultStateListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetResultStateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetResultStateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseResultStateList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseResultStateList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ForgotPasswordCompletedEventHandler(object sender, ForgotPasswordCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ForgotPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ForgotPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ResetPasswordByEmailCompletedEventHandler(object sender, ResetPasswordByEmailCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ResetPasswordByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ResetPasswordByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CheckChangePasswordTokenCompletedEventHandler(object sender, CheckChangePasswordTokenCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckChangePasswordTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckChangePasswordTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ChangePasswordWithTokenCompletedEventHandler(object sender, ChangePasswordWithTokenCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCompaniesCompletedEventHandler(object sender, GetCompaniesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseGroupList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseGroupList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RegisterPendingUserCompletedEventHandler(object sender, RegisterPendingUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RegisterPendingUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RegisterPendingUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPendingUsersListCompletedEventHandler(object sender, GetPendingUsersListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPendingUsersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPendingUsersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePendingUsersList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePendingUsersList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeletePendingUsersCompletedEventHandler(object sender, DeletePendingUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeletePendingUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeletePendingUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ApprovePendingUsersCompletedEventHandler(object sender, ApprovePendingUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ApprovePendingUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ApprovePendingUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetUserProfileDataCompletedEventHandler(object sender, GetUserProfileDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserProfileDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserProfileDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseProfileData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseProfileData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateUserProfileDataCompletedEventHandler(object sender, UpdateUserProfileDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateUserProfileDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserProfileDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseUserData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseUserData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllUsersInGroupCompletedEventHandler(object sender, GetAllUsersInGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUsersInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUsersInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseUserData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseUserData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetHierarchyGroupTreeCompletedEventHandler(object sender, GetHierarchyGroupTreeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetHierarchyGroupTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetHierarchyGroupTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseHierarchyGroupNodes Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseHierarchyGroupNodes)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SetUserActivationStateCompletedEventHandler(object sender, SetUserActivationStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetUserActivationStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserActivationStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void AddNewUserCompletedEventHandler(object sender, AddNewUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddNewUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddNewUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateUserDataCompletedEventHandler(object sender, UpdateUserDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetServerLicenseDataCompletedEventHandler(object sender, GetServerLicenseDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServerLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServerLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseServerLicenseData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseServerLicenseData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetUsersLicenseDataCompletedEventHandler(object sender, GetUsersLicenseDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUsersLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUsersLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseUsersLicenseData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseUsersLicenseData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCompaniesLicenseDataCompletedEventHandler(object sender, GetCompaniesLicenseDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompaniesLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompaniesLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseCompaniesLicenseData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseCompaniesLicenseData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSPLicenseDataCompletedEventHandler(object sender, GetSPLicenseDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSPLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSPLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSPLicenseData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSPLicenseData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateUserGroupsCompletedEventHandler(object sender, UpdateUserGroupsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateUserGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCompaniesListCompletedEventHandler(object sender, GetCompaniesListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompaniesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompaniesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseGroupList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseGroupList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsValidUserNameCompletedEventHandler(object sender, IsValidUserNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsValidUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsValidUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAvailbleDomainNamesCompletedEventHandler(object sender, GetAvailbleDomainNamesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAvailbleDomainNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAvailbleDomainNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseNameList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseNameList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllUsersFromDomainCompletedEventHandler(object sender, GetAllUsersFromDomainCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUsersFromDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUsersFromDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseDomainUserList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseDomainUserList)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateNewTeamCompletedEventHandler(object sender, CreateNewTeamCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateNewTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateNewTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RenameTeamCompletedEventHandler(object sender, RenameTeamCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RenameTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RenameTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllTeamsCompletedEventHandler(object sender, GetAllTeamsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseTeamData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseTeamData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteTeamCompletedEventHandler(object sender, DeleteTeamCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateNewCompanyCompletedEventHandler(object sender, CreateNewCompanyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateNewCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateNewCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void CreateNewServiceProviderCompletedEventHandler(object sender, CreateNewServiceProviderCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateNewServiceProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateNewServiceProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void RenameCompanyCompletedEventHandler(object sender, RenameCompanyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RenameCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RenameCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllCompaniesCompletedEventHandler(object sender, GetAllCompaniesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseTeamData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseTeamData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetAllSPsCompletedEventHandler(object sender, GetAllSPsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllSPsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllSPsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseTeamData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseTeamData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteCompanyCompletedEventHandler(object sender, DeleteCompanyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void DeleteSPCompletedEventHandler(object sender, DeleteSPCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteSPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteSPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsValidCompanyNameCompletedEventHandler(object sender, IsValidCompanyNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsValidCompanyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsValidCompanyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCompanyTeamsCompletedEventHandler(object sender, GetCompanyTeamsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompanyTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompanyTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseTeamData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseTeamData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetServiceProviderTeamsCompletedEventHandler(object sender, GetServiceProviderTeamsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServiceProviderTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServiceProviderTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseTeamData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseTeamData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetServiceProviderCompaniesCompletedEventHandler(object sender, GetServiceProviderCompaniesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServiceProviderCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServiceProviderCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseTeamData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseTeamData)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetCompanyPropertiesCompletedEventHandler(object sender, GetCompanyPropertiesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompanyPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompanyPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWsResponseCompanyProperties Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWsResponseCompanyProperties)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SetUserAsCompanyManagerCompletedEventHandler(object sender, SetUserAsCompanyManagerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetUserAsCompanyManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserAsCompanyManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SetUserAsServiceProviderManagerCompletedEventHandler(object sender, SetUserAsServiceProviderManagerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetUserAsServiceProviderManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserAsServiceProviderManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsValidServiceProviderNameCompletedEventHandler(object sender, IsValidServiceProviderNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsValidServiceProviderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsValidServiceProviderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void UpdateCompanyPropertiesCompletedEventHandler(object sender, UpdateCompanyPropertiesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateCompanyPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCompanyPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void SetSystemSettingsCompletedEventHandler(object sender, SetSystemSettingsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetServerLanguageListCompletedEventHandler(object sender, GetServerLanguageListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetServerLanguageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetServerLanguageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseSystemLanguages Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseSystemLanguages)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetSystemSettingsCompletedEventHandler(object sender, GetSystemSettingsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWsResponseSystemSettings Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWsResponseSystemSettings)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void VerifySupportedVersionCompletedEventHandler(object sender, VerifySupportedVersionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class VerifySupportedVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal VerifySupportedVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSBasicRepsonse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSBasicRepsonse)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetInstallationSettingsCompletedEventHandler(object sender, GetInstallationSettingsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetInstallationSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetInstallationSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponseInstallationSettings Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponseInstallationSettings)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void GetPresetListCompletedEventHandler(object sender, GetPresetListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPresetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPresetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CxWSResponsePresetList Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CxWSResponsePresetList)(this.results[0]));
        }
    }
}
