<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d639372b-a27f-4cc8-851d-853847bb9b75</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1948 - R16 00 08 Sharp Before Preprocessing Token</Title>
    <Category>CWE: 10773</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10773</h1>
  <iframe height="500" src="/content/10773" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1948
Cwe : 10773
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* MISRA CPP RULE 16-0-8
 ------------------------------
 This query ensures that if the # token appears as the first token in line , then it
 shall be immediately followed by a preprocessing token.It also makes sure that  #else and #endif
 not followed by anything but spaces.
 
 The Example below shows code with vulnerability: 

      inf foo()
      {
           int x;
           #define X 8  //compliant
           # ifndef AAA //non-compliant - space after #
                 x=1;
           #else1       //non-compliant - non standard preprocessing token.
                 x=2;
           #endif a     //non-compliant - endif followed by "a" character.
      }
*/

// checks if there is an appearance of # at the beginning of the line which is not directly followed by a preprocessor token
// and in case of "endif" and "else" checks if there are only spaces and new lines following the directive.
result = All.FindByRegex(@"^\s*#(?!include\s|define\s|undef\s|ifndef\s|endif\s*\n+|else\s*\n+|elif\s|ifdef\s|if\s|line\s|error\s|pragma\s)",
	All.NewCxList());</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>