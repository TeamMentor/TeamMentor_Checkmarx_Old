<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>fa9cfcea-5504-450d-bf2a-69db3e786bd3</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1312 - Code Injection</Title>
    <Category>CWE: 94</Category>
    <Phase>PHP High Risk</Phase>
    <Technology>PHP</Technology>
    <Type>With Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>TeamMentor page for: Code Injection</h1>
  <iframe height="300" src="/html/Code_Injection" width="100%">
  </iframe>
  <h1>Content for CWE ID:  94</h1>
  <iframe height="500" src="/content/94" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1312
Cwe : 94
IsExecutable : true
IsEncrypted : false
Severity : 3
PackageId : 1272
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //finds code injection
CxList methods = Find_Methods();
CxList dynamic_method_invoke = methods.FindByShortName("$_Function") + 
	methods.FindByShortName("call_user_func*") +
	methods.FindByShortName("forward_static_call*") + 
	methods.FindByShortName("register_shutdown_function") +
	methods.FindByShortName("register_tick_function");

CxList firstParam = dynamic_method_invoke;
firstParam = All.GetParameters(firstParam, 0);


CxList dynamic_method_creation = 
	methods.FindByShortName("create_function") + 
	methods.FindByShortName("eval");


CxList sanitize = Find_Code_Injection_Sanitize();
CxList inputs = Find_Interactive_Inputs();
CxList infOn = firstParam + dynamic_method_creation;


result = inputs.InfluencingOnAndNotSanitized(infOn, sanitize);
return result;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>