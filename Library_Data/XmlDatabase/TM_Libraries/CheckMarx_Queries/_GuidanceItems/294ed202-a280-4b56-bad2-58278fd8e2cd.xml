<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>294ed202-a280-4b56-bad2-58278fd8e2cd</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1824 - R06 01 Plain Char Type Usage</Title>
    <Category>CWE: 11012</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11012</h1>
  <iframe height="500" src="/content/11012" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1824
Cwe : 11012
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 6-1
------------------------------
This query searches plain char variables used for storage of non character values

	The Example below shows code with vulnerability: 

char c = 5;

*/

// first we build a list of all char typedefs
CxList typedefCharDecls = All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF").GetFathers().FindByType("char");
typedefCharDecls -= typedefCharDecls.FindByExtendedType("signed");
typedefCharDecls -= typedefCharDecls.FindByExtendedType("unsigned");

ArrayList charTypes = new ArrayList();
charTypes.Add("char");
charTypes.Add("*.char");
foreach(CxList cur in typedefCharDecls){
	Declarator g = (Declarator) cur.data.GetByIndex(0);
	if (g == null) {
		continue;
	}
	string typeName = g.Name;
	if (!charTypes.Contains(typeName)){
		charTypes.Add(typeName);
		charTypes.Add("*." + typeName);
	}
}

// now build a list of all plain char declarators
CxList plainChars = All.FindByType(typeof(Declarator)).FindByTypes((string[]) charTypes.ToArray(typeof(string))) - typedefCharDecls;
plainChars -= All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF").GetFathers();
plainChars -= plainChars.FindByExtendedType("signed");
plainChars -= plainChars.FindByExtendedType("unsigned");


//find pointer declarations and remove them from char list
CxList pointers = plainChars.FindByRegex(@"(?:\*\s*)\w", false, false, false);
plainChars -= pointers;
plainChars += All.FindAllReferences(plainChars);

CxList integerLiterals = All.FindByType(typeof(IntegerLiteral));

/* remove array size literals */
integerLiterals -= integerLiterals.GetByAncs(integerLiterals.GetAncOfType(typeof(ArrayCreateExpr)));
integerLiterals -= integerLiterals.FindByRegex(@"\[\w+?\]",false,false,false);

result = integerLiterals.dio(plainChars);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>