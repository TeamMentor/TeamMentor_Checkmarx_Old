<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>85e64ca9-b903-422c-a919-96a0cd7ee3b7</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1823 - R05 07 Identifier Name Reused</Title>
    <Category>CWE: 11011</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11011</h1>
  <iframe height="500" src="/content/11011" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1823
Cwe : 11011
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 5-7
------------------------------
This query searches for identifier names that are reused anywhere in the code

	The Example below shows code with vulnerability: 

int foo();
char foo;

*/

CxList identifiers = Find_Identifiers();

// remove extern delcarations since by definition they do not "declare" an identifier, just repeat it
identifiers -= identifiers.GetByAncs(All.FindByFieldAttributes(Dom.Modifiers.Extern));

// remove method declaration if we have the definition
CxList methodDeclAndDefs = identifiers.FindByType(typeof(MethodDecl));
CxList methodDefs = methodDeclAndDefs * All.FindByType(typeof(StatementCollection)).GetFathers();
CxList methodDecls = methodDeclAndDefs - methodDefs;
CxList doubleMethods = identifiers.GetByAncs(methodDecls.FindByShortName(methodDefs));
identifiers -= doubleMethods;

SortedList identNames = new SortedList();
CxList duplicateNames = All.NewCxList();

// return all the duplicate identifier name instances
foreach(CxList curIdentifier in identifiers)
{
	string curName = (curIdentifier.data.GetByIndex(0) as CSharpGraph).ShortName;
	if (!identNames.Contains(curName)){
		identNames.Add(curName,null);
	}
	else{
		duplicateNames += curIdentifier;
	}
}
identifiers += doubleMethods;
result = identifiers.FindByShortName(duplicateNames);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>