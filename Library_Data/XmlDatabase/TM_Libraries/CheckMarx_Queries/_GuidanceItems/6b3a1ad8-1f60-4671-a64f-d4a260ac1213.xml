<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>6b3a1ad8-1f60-4671-a64f-d4a260ac1213</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1459 - Find Integers</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>Ruby</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1459
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 1280
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*CxList cast = (All.FindByType(typeof(CastExpr)));
CxList NumberCast = new CxList();
foreach(CxList l in cast)
{
	CastExpr ce = l.data.GetByIndex(0) as CastExpr;
	if(ce.TargetType.TypeName.ToLower() == "int" ||
	ce.TargetType.TypeName.ToLower() == "integer" ||
		ce.TargetType.TypeName.ToLower() == "float" ||
		ce.TargetType.TypeName.ToLower() == "bool" ||
		ce.TargetType.TypeName.ToLower() == "boolean" ||
		ce.TargetType.TypeName.ToLower() == "double" ||
		ce.TargetType.TypeName.ToLower() == "number" ||
		ce.TargetType.TypeName.ToLower() == "long")
	{
		NumberCast += 
			All.FindByFathers(All.FindById(ce.NodeId));
	}
}
*/
CxList allMethods = Find_Methods() + All.FindByType(typeof(MemberAccess));
CxList numberSanitizer = 
	allMethods.FindByShortName("round", false) + 
	allMethods.FindByShortName("average", false) + 
	allMethods.FindByShortName("maximum", false) + 
	allMethods.FindByShortName("minimum", false) + 
	allMethods.FindByShortName("sum", false) + 
	allMethods.FindByShortName("doubleval", false) +
	allMethods.FindByShortName("strlen", false) + 
	allMethods.FindByShortName("intval", false) + 
	allMethods.FindByShortName("*count*", false) + 
	allMethods.FindByShortName("*size*", false) + 
	allMethods.FindByShortName("*length*", false) + 
	allMethods.FindByShortName("*position*", false);

result = numberSanitizer + Find_Interactive_Inputs().FindByRegex("to_i");;

//result = All.InfluencedByAndNotSanitized(result, All.FindByType(typeof(BinaryExpr)));
//return All.InfluencedBy(NumberCast);



//CxList ints = All.FindByType("int") + All.FindByType("Int16") + 
//	All.FindByType("Int32") + All.FindByType("Int64") + 
//	All.FindByType("long") + All.FindByType("decimal") + 
//	All.FindByType("float") + All.FindByType("double");
//
//CxList methods = Find_Methods();
//CxList converted = 
//	methods.FindByName("Convert.ToBoolean") +
//	methods.FindByName("Convert.ToByte") +
//	methods.FindByName("Convert.ToSByte") +
//	methods.FindByName("Convert.ToDateTime") +
//	methods.FindByName("Convert.ToInt16") +
//	methods.FindByName("Convert.ToInt32") +
//	methods.FindByName("Convert.ToInt64") +
//	methods.FindByName("Convert.ToDecimal") +
//	methods.FindByName("Convert.ToDouble") +
//	methods.FindByName("Convert.ToSingle") +
//	methods.FindByName("Convert.ToUInt16") +
//	methods.FindByName("Convert.ToUInt32") +
//	methods.FindByName("Convert.ToUInt64") + 
//
//	methods.FindByName("int.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("Int16.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("Int32.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("Int64.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("long.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("decimal.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("double.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("float.Parse", StringComparison.OrdinalIgnoreCase);
//
//

//CxList byNames = All.FindByShortName("*Length*", false) + 
//	All.FindByShortName("*Index*", false) + 
//	All.FindByMemberAccess("Request.MapImageCoordinates") +
//	All.FindByMemberAccess("Request.ContentLength") +
//	All.FindByMemberAccess("Request.TotalBytes") + 
//	(All.FindByMemberAccess("Request.MapImageCoordinates") +
//	All.FindByMemberAccess("Request.ContentLength") +
//	All.FindByMemberAccess("Request.TotalBytes")).GetTargetOfMembers()
//	
//	+ Find_Integers_Components();
//
//CxList binary = All.FindByType(typeof(BinaryExpr));
//CxList booleanConditions =
//	binary.FindByShortName("<_22_29_ _binary.findbyshortname28_22_="" _2b_="">") +
//	binary.FindByShortName("==") +
//	binary.FindByShortName("!=") +
//	binary.FindByShortName("") +
//	binary.FindByShortName("<_3d_22_29_ _binary.findbyshortname28_22_="" _2b_="">=") +
//	binary.FindByShortName("||") +
//	binary.FindByShortName("&amp;&amp;") +
//	All.FindByType(typeof(UnaryExpr)).FindByShortName("Not");
//
//CxList nonSanitizer = All.FindByType(typeof(AssignExpr)).GetByAncs(booleanConditions);
//booleanConditions -= nonSanitizer.GetAncOfType(typeof(BinaryExpr));
//
///*
//CxList methodInts = All.FindByReturnType("int") + All.FindByReturnType("Int16") + 
//	All.FindByReturnType("Int32") + All.FindByReturnType("Int64") + 
//	All.FindByReturnType("long") + All.FindByReturnType("decimal") + 
//	All.FindByReturnType("float") + All.FindByReturnType("double");
//
//methodInts = methods.FindAllReferences(methodInts);
//*/
//result = ints + converted + byNames + booleanConditions/* + methodInts*/;</_3d_22_29_></_22_29_></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>