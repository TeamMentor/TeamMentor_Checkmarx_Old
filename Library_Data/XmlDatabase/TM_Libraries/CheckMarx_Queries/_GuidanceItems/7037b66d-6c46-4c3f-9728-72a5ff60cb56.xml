<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>7037b66d-6c46-4c3f-9728-72a5ff60cb56</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1912 - R10 03 02 Find Override Without Virtual</Title>
    <Category>CWE: 10796</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10796</h1>
  <iframe height="500" src="/content/10796" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1912
Cwe : 10796
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 10-3-2
 ------------------------------
 This query searches for methods that override virtual methods, but are not declared 
 with the virtual keyword.

 The Example below shows code with vulnerability: 

      class Foo
			{
			public:
				virtual void DoSomething() { }
			};
		class Bar : public Foo
			{
			public:
			    void DoSomething(); //Non-compliant
			};

*/

//Find virtual methods.
CxList virtMethod = All.FindByType(typeof(MethodDecl));
virtMethod = virtMethod.FindByFieldAttributes(Modifiers.Virtual);

//Find methods that may be problematic.
CxList protoMethods = All.FindByType(typeof(MethodDecl));
protoMethods -= All.FindByFathers(protoMethods).FindByType(typeof(StatementCollection)).GetFathers();
protoMethods -= virtMethod;
protoMethods = protoMethods.FindByShortName(virtMethod);

CxList virtClasses = All.FindByType(typeof(ClassDecl)).GetClass(virtMethod);
CxList protoClasses = All.FindByType(typeof(ClassDecl)).InheritsFrom(virtMethod);
protoClasses = All.fbt(typeof(ClassDecl));//protoClasses.GetClass(protoMethods);

CxList virtParams = All.FindByType(typeof(ParamDecl));
CxList protoParams = virtParams.GetParameters(protoMethods);
virtParams = virtParams.GetParameters(virtMethod);

CxList virtTyperefs = All.FindByType(typeof(TypeRef)).GetByAncs(virtParams);
CxList protoTyperefs = All.FindByType(typeof(TypeRef)).GetByAncs(protoParams);

foreach (CxList curr in virtMethod) {
	CxList sons = protoClasses.InheritsFrom(virtClasses.GetClass(curr));//Get classes that inherent from curr's class.
	//Get methods with same name that aren't virtual.
	CxList others = protoMethods.FindByShortName(curr);
	others = others.GetByClass(sons);
	CxList currParams = virtParams.GetParameters(curr);
	CxList currTyperefs = virtTyperefs.GetByAncs(currParams);
	bool isOverride = true;
	foreach(CxList other in others) 
	{
		CxList otherTypeRefs = protoParams.GetParameters(other);
		otherTypeRefs = protoTyperefs.GetByAncs(otherTypeRefs);
		//Check if otherMethod overrides currMethod.
		if(sons.FindByShortName(protoClasses.GetClass(other)).Count == 1 &amp;&amp;
			currTyperefs.Count == otherTypeRefs.Count) 
		{
			for(int i = 0; i </pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>