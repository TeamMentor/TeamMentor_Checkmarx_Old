<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>8aa3df9b-fc82-4b0e-9d70-67ffc9cb4a38</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1815 - R03 04 Not Explained Pragma Usage</Title>
    <Category>CWE: 11003</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11003</h1>
  <iframe height="500" src="/content/11003" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1815
Cwe : 11003
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 3-4
------------------------------
This query searches for usage of #pragma not explained by a comment in same line, or start of line above it

	The Example below shows code with vulnerability: 

void foo () 
{
    #pragma OPTIMIZE ON
    int i = 1; // irrelevent comment
    
}

*/

CxList dummy;
CxList commentFinds = All.NewCxList();
CxList pragmaFinds = All.NewCxList();
dummy = All.FindByRegex(@"/\*.*?\*/|//",true,false,false,commentFinds);
dummy = All.FindByRegex(@"#pragma",false,false,false,pragmaFinds);

foreach (CxList cur in commentFinds){
	LinePragma curCommentLoc = ((CSharpGraph) cur.data.GetByIndex(0)).LinePragma;
	
	// remove #pragmas in same line as comment
	pragmaFinds -= pragmaFinds.FindByPosition(curCommentLoc.FileName, curCommentLoc.Line);
	
	// if the current comment is at the start of its line, remove #pragmas in the next line
	if (curCommentLoc.Column == 1){
		pragmaFinds -= pragmaFinds.FindByPosition(curCommentLoc.FileName, curCommentLoc.Line + 1);	
	}
}

result = All.FindByRegexSecondOrder(@".",pragmaFinds);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>