<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>a23eab13-7f3f-46b8-a29a-1b71e4e9088a</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1825 - R06 02 Not Plain Char Type Usage</Title>
    <Category>CWE: 11013</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11013</h1>
  <iframe height="500" src="/content/11013" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1825
Cwe : 11013
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 6-2
------------------------------
This query searches non-plain char variables used for storage of non-numeric values

	The Example below shows code with vulnerability:

signed char c = 'x';
unsigned char d = 'y';

*/

// first we build a list of all char typedefs
CxList typedefCharDecls = All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF").GetFathers().FindByType("char");
CxList typedefSgnCharDecls = typedefCharDecls.FindByExtendedType("unsigned") 
	+ typedefCharDecls.FindByExtendedType("signed");
ArrayList charTypes = new ArrayList();
ArrayList sgnCharTypes = new ArrayList();
charTypes.Add("char");
charTypes.Add("*.char");
foreach(CxList cur in typedefCharDecls){
	Declarator g = (Declarator) cur.data.GetByIndex(0);
	if (g == null) {
		continue;
	}
	string typeName = g.Name;
	if (!charTypes.Contains(typeName)){
		charTypes.Add(typeName);
		charTypes.Add("*." + typeName);
	}
}
foreach(CxList cur in typedefSgnCharDecls){
	Declarator g = (Declarator) cur.data.GetByIndex(0);
	if (g == null) {
		continue;
	}
	string typeName = g.Name;
	if (!sgnCharTypes.Contains(typeName)){
		sgnCharTypes.Add(typeName);
		sgnCharTypes.Add("*." + typeName);
	}
}

// now build a list of all signed/unsigned char declarators

// first add all declarators of type that is a typedefs of signed/unsigned char
CxList sgnCharDecls = All.FindByType(typeof(Declarator)).FindByTypes((string[]) sgnCharTypes.ToArray(typeof(string))) - typedefSgnCharDecls;

// then add all declarators of type unsigned/signed of a typedefed char
CxList charDecls = All.FindByType(typeof(Declarator)).FindByTypes((string[]) charTypes.ToArray(typeof(string))) - typedefCharDecls;
sgnCharDecls += charDecls.FindByExtendedType("unsigned") + charDecls.FindByExtendedType("signed");
sgnCharDecls -= All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF").GetFathers();

// now build a list of all plain char instances
CxList unPlainChars = sgnCharDecls + All.FindAllReferences(sgnCharDecls);

CxList stringLiterals = All.FindByType(typeof(StringLiteral));
CxList charLiterals = All.FindByType(typeof(CharLiteral));

result = (charLiterals + stringLiterals).dio(unPlainChars);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>