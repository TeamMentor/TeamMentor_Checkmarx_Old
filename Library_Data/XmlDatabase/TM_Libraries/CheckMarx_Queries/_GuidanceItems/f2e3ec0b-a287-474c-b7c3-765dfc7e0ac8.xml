<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>f2e3ec0b-a287-474c-b7c3-765dfc7e0ac8</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1890 - R03 01 03 Find Arrays Without Size</Title>
    <Category>CWE: 10781</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10781</h1>
  <iframe height="500" src="/content/10781" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1890
Cwe : 10781
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 3-1-3
 ------------------------------
 This query searches for array creations without implicit or initialized sizes.
 
 The Example below shows code with vulnerability: 

	int array1[10];			//Compliant
	extern int array2[];	//Non-compliant
	int array3[] = {0,1,2}	//Compliant
	extern int array4[22];	//Compliant

*/

CxList arrays = All.FindByFathers(All.FindByType(typeof(ArrayCreateExpr))).GetFathers();
foreach(CxList array in arrays) {
	ArrayCreateExpr curr = array.data.GetByIndex(0) as ArrayCreateExpr;
	if(curr.Sizes.Count == 0 &amp;&amp; curr.DimensionCount == 0) {
		result += array;
	}
}
result = result.GetFathers();</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>