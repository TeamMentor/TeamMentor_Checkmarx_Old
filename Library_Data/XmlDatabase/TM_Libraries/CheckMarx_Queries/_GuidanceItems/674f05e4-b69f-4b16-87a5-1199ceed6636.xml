<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>674f05e4-b69f-4b16-87a5-1199ceed6636</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1908 - R07 05 02 Address Assignment out of Scope</Title>
    <Category>CWE: 10792</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10792</h1>
  <iframe height="500" src="/content/10792" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1908
Cwe : 10792
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 7-5-2
 ------------------------------
 This query searches for address assignments of auto-storage variables outside of their scope.

 The Example below shows code with vulnerability: 

      void foo (){
			int * pl;
			{
				int local_auto;
				pl = &amp;local_auto 	//Non-Compliant
			}

*/

//Find auto-storage variables.
CxList decs = All.FindByType(typeof(Declarator));
CxList vars = decs;
CxList nonAuto = (All - All.FindByType(typeof(MethodDecl)));
nonAuto = nonAuto.FindByFieldAttributes(Modifiers.Extern) + nonAuto.FindByFieldAttributes(Modifiers.Static);
nonAuto = decs.GetByAncs(nonAuto);
vars -= decs;
CxList refs = All.FindByType(typeof(Reference));
CxList addresses = All.NewCxList();
//Getting address assignments.
CxList unarys = All.FindByType(typeof(UnaryExpr));
foreach (CxList unary in unarys) {
	if( ((UnaryExpr) unary.data.GetByIndex(0)).Operator == UnaryOperator.Address &amp;&amp;
	unary.GetAncOfType(typeof(Param)).Count == 0) {
		addresses += All.FindById(((UnaryExpr) unary.data.GetByIndex(0)).Right.NodeId);
	}
}
vars = All.FindDefinition(addresses.FindAllReferences(vars));
refs = refs.DataInfluencedBy(vars);
decs = decs.FindDefinition(refs);
CxList classes = refs.FindByType(typeof(ClassDecl));
foreach(CxList auto in vars) {
	//Get auto's scope
	CxList scope = auto.GetAncOfType(typeof(StatementCollection));
	if (scope.Count == 0){
		scope = auto.GetAncOfType(typeof(ClassDecl));
		if (scope.Count == 0){
			scope = auto.GetAncOfType(typeof(StructDecl));
		}
		else if ( ((ClassDecl) scope.data.GetByIndex(0)).Name.Contains("checkmarx_default_classname")){
			continue;
		}
	}
	scope += classes.GetByAncs(scope);
	//Get references with address assignment in their path.
	CxList calls = refs.DataInfluencedBy(auto);
	calls -= calls.InfluencedByAndNotSanitized(auto, addresses);
	foreach(CxList call in calls) {
		
		CxList dec = decs.FindDefinition(call);
		if (dec.Count == 0 ) {//No definition.
			continue;
		}
		
		//Get call's scope, check if within auto's scope.
		bool isIn = false;
		CxList callScope = dec;
		CxList prevScope = dec;
		do {
			prevScope = callScope;
			CxList check = scope * callScope;
			if (check.Count &gt; 0) {
				isIn = true;
			}
			CxList oldScope = callScope;
			callScope = oldScope.GetAncOfType(typeof(StatementCollection));
			if (callScope.Count == 0){
				callScope = oldScope.GetAncOfType(typeof(ClassDecl));
				if (callScope.Count == 0){
					callScope = oldScope.GetAncOfType(typeof(StructDecl));
				}
			}
			
		} while (callScope.Count &gt; 0 &amp;&amp; !(callScope == prevScope) &amp;&amp; isIn == false);
				
		if(!isIn){
			result += call.DataInfluencedBy(auto);
		}
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>