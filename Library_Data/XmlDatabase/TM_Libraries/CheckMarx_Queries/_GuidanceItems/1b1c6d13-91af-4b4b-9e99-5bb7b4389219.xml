<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>1b1c6d13-91af-4b4b-9e99-5bb7b4389219</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1862 - R16 06 Function Invoke Arg Number Not Match Function Def Number</Title>
    <Category>CWE: 11050</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11050</h1>
  <iframe height="500" src="/content/11050" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1862
Cwe : 11050
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 16-6
------------------------------
This query searches for method invokations with different number of arguments than the definition of the method

	The Example below shows code with vulnerability: 

int foo ( void ){
...
}

extern int foo ( int param );

a = foo ( b );


*/

CxList methodInvokes = All.FindByType(typeof(MethodInvokeExpr));
CxList methodDefs = All.FindByType(typeof(MethodDecl));

// remove methods with variable number of arguments
methodDefs -= R16_01_Function_With_Variable_Number_Of_Arguments().GetAncOfType(typeof(MethodDecl));

CxList invParamaters = All.GetParameters(methodInvokes).FindByType(typeof(Param));
CxList defParamaters = All.GetParameters(methodDefs);

// correct functions with empty param list (void)
foreach(CxList cur in (methodDefs)){
	CxList curParams = defParamaters.GetParameters(cur);
	if (curParams.Count == 1){
		ParamDecl curPar = curParams.data.GetByIndex(0) as ParamDecl;
		if (curPar.Type != null &amp;&amp; curPar.Type.TypeName != null &amp;&amp; 
			String.Compare(curPar.Type.TypeName, "void") == 0){
			
			defParamaters -= All.FindById(curPar.NodeId);
		}	
	}
}

// go over all method definitions
foreach(CxList curMethodDef in methodDefs)
{
	CxList curParams = defParamaters.GetParameters(curMethodDef);

	// compare to all same name invokations
	CxList sameNameInvokes = methodInvokes.FindByShortName(curMethodDef);
	foreach(CxList compMethodInvoke in sameNameInvokes)
	{		
		CxList compParams = invParamaters.GetParameters(compMethodInvoke);
		// compare number of paramaters
		if (curParams.Count != compParams.Count){
			result += (curMethodDef + compMethodInvoke);
		}
	}					
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>