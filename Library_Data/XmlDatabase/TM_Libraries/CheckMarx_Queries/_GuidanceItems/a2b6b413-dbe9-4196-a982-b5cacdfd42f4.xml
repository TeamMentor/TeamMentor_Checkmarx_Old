<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>a2b6b413-dbe9-4196-a982-b5cacdfd42f4</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1860 - R16 04 Different Identifiers In Function Definition And Prototype</Title>
    <Category>CWE: 11048</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11048</h1>
  <iframe height="500" src="/content/11048" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1860
Cwe : 11048
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 16-4
------------------------------
This query searches for prototypes (such as function declarations) and definitions of same function
with different identifiers for the paramaters

	The Example below shows code with vulnerability: 

static void func123a ( int ) ;

static void func123a ( int signum ){
...
}

*/

CxList methodDecls = All.FindByType(typeof(MethodDecl));
CxList paramaters = All.GetParameters(methodDecls);

// go over all method declarations or definitions
foreach(CxList curMethodDecl in methodDecls)
{
	CxList curParams = paramaters.GetParameters(curMethodDecl);

	// compare to all same name declarations/definitions (except self)
	CxList sameNameDecls = methodDecls.FindByName(curMethodDecl);
	sameNameDecls -= curMethodDecl;

	foreach(CxList compMethodDecl in sameNameDecls)
	{		
		CxList compParams = paramaters.GetParameters(compMethodDecl);
		
		// compare paramater identifiers by order
		if (curParams.Count != compParams.Count)
			result += curMethodDecl + compMethodDecl;
		else
			for (int i = 0;i </pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>