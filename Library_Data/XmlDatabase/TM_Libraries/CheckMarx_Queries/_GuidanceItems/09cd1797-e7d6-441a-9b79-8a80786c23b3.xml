<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>09cd1797-e7d6-441a-9b79-8a80786c23b3</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>632 - Use of Hard coded Cryptographic Key</Title>
    <Category>CWE: 321</Category>
    <Phase>Java Medium Threat</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  321</h1>
  <iframe height="500" src="/content/321" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 632
Cwe : 321
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 37
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList emptyString = Find_Empty_Strings();
CxList NULL = All.FindByName("null");
CxList keys = All.FindByShortName("*key*", false);
CxList cryptKeys = 
	keys.FindByShortName("*enc*", false) + 
	keys.FindByShortName("*secret*", false);

CxList key_in_lSide = cryptKeys.FindByAssignmentSide(CxList.AssignmentSide.Left);
CxList strLiterals = All.FindByType(typeof(PrimitiveExpr)) - emptyString - NULL;
CxList lit_in_rSide = strLiterals.FindByAssignmentSide(CxList.AssignmentSide.Right);

result = key_in_lSide.FindByFathers(key_in_lSide.GetFathers() * lit_in_rSide.GetFathers());


CxList key_in_Field = All.GetByAncs(Find_Field_Decl() + All.FindByType(typeof(ConstantDecl))) * cryptKeys;
result += key_in_Field.DataInfluencedBy(strLiterals);


// Add also SecretKeySpec's first parameter as a potentially vulnerable hardcoded parameter
CxList SecretKeySpec = All.FindByType("SecretKeySpec");
SecretKeySpec = 
	SecretKeySpec.FindByType(typeof(ObjectCreateExpr)) + 
	SecretKeySpec.FindByType(typeof(Declarator));

// Get first parameter
CxList SecretKeySpecParam0 = All.GetParameters(SecretKeySpec, 0);
// Sanitize by binaries such as "+" and by concatenate - could be concatenated with a non hard-coded key, 
// which is OK
CxList bin = All.FindByType(typeof(BinaryExpr));
bin = bin.FindByShortName("");
CxList concat = All.FindByShortName("concatenate", false);

// Add the parameter itself, or whatever is influencing it
result += SecretKeySpecParam0 * strLiterals + SecretKeySpecParam0.InfluencedByAndNotSanitized(strLiterals, bin + concat);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>