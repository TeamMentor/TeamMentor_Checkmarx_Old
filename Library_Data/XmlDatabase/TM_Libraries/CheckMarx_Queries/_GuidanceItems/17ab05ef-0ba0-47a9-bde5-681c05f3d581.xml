<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>17ab05ef-0ba0-47a9-bde5-681c05f3d581</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1393 - Buffer Overflow Loops Old</Title>
    <Category>CWE: 193</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  193</h1><iframe src='/content/193' width="100%" height="500"></iframe><h1>Checkmarx Rule</h1>
<div style='padding:10px'><pre>QueryId : 1393
Cwe : 193
IsExecutable : false
IsEncrypted : false
Severity : 2
PackageId : 15
Status : Original
Type : Regular
</pre></div><h3>Source</h3><div style='padding:10px'><pre> //	Buffer_Overflow - loops
//  -----------------
//  Find all the loops that have "<=" instead of "<", thus may create
//  Buffer Overflow problem.
///////////////////////////////////////////////////////////////////////

// Find all iterations/loops
CxList iterations = All.FindByType(typeof(IterationStmt));
// Keep all iterations members (for performance, not to use All anymore)
CxList allIterationsMembers = All.GetByAncs(iterations);

CxList arrayCreate = All.FindByType(typeof(ArrayCreateExpr));
CxList arraySize = All.FindByType(typeof(IntegerLiteral)).GetByAncs(arrayCreate);

// Run on every loop and look for the vulnerability
foreach (CxList iteration in iterations)
{
	// Check if we are dealing with a potential problem ("<=")
	IterationStmt iter = iteration.data.GetByIndex(0) as IterationStmt;

	if ((iter.Test != null) && (iter.Test.ShortName.Equals("<=")))
	{
		// Keep all the members of the current iteration (performance)
		CxList iterationMembers = allIterationsMembers.GetByAncs(iteration);

		// Find all initializing expression of the iteration
		CxList initExpr = new CxList();
		foreach (Statement stmt in iter.Init)
		{
			initExpr += iterationMembers.FindById(stmt.NodeId);
		}

		CxList condition = All.FindById(iter.Test.NodeId);
		CxList indexUses = iterationMembers.FindAllReferences(iterationMembers.GetByAncs(initExpr).FindByAssignmentSide(CxList.AssignmentSide.Left));
		CxList arrays = iterationMembers.FindByType(typeof(IndexerRef));
		CxList sizes = arraySize.GetByAncs(All.FindDefinition(arrays));
		CxList conditionParts = All.GetByAncs(condition) - condition - indexUses;

		// Sanitize False Positive where Loop Condition < Array Size
		bool initLikeCondition = true;
		foreach (CxList size in sizes)
		{
			IntegerLiteral intSize = size.data.GetByIndex(0) as IntegerLiteral;
			long intArraySize = intSize.Value;

			long intLoopCond = 0; 
			if (conditionParts.FindByType(typeof(IntegerLiteral)).Count >= 1)
			{
				IntegerLiteral intCond = conditionParts.data.GetByIndex(0) as IntegerLiteral;
				if (intCond != null)
				{
					intLoopCond = intCond.Value;
				}
			}

			if (intLoopCond < intArraySize)
			{
				initLikeCondition = false;
			}
		}

		indexUses = indexUses.FindByFathers(arrays);
		// Find the values of initialization
		CxList val = iterationMembers.GetByAncs(initExpr).FindByAssignmentSide(CxList.AssignmentSide.Right);
		// If exists a value 0, then it's probably a problematic loop.
		if (initLikeCondition && (val.FindByShortName("0").Count > 0) && (indexUses.Count > 0))
		{
			CxList iterationValue = iterationMembers.FindById(iter.Test.NodeId);
			CxList sizeMethod = conditionParts.FindByType(typeof(MethodInvokeExpr)).FindByShortName("size");
			if ((sizeMethod - iterationMembers.FindById(iter.Test.NodeId)).Count > 0)
			{
				CxList binary = conditionParts.FindByType(typeof(BinaryExpr));
				if (iterationMembers.GetByAncs(binary).Count > 0)
				{
					iterationValue -= iterationValue;
				}
			}
			result += iterationValue;
		}

		// Sanitize if minus in interation test
		CxList TestNode = iterationMembers.FindById(iter.Test.NodeId);
		BinaryExpr b = conditionParts.data.GetByIndex(0) as BinaryExpr;
		if (b != null && b.Operator == BinaryOperator.Subtract)
		{
			result -= TestNode;
		}

	}
}</pre></div>]]></Data>
  </Content>
</TeamMentor_Article>