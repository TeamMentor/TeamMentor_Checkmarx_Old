<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>03673b4f-7fb2-4ad5-a860-47fbccaeb48b</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>332 - Use of Uninitialized Variable</Title>
    <Category>CWE: 457</Category>
    <Phase>CPP Medium Threat</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  457</h1>
  <iframe height="500" src="/content/457" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 332
Cwe : 457
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 21
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> // Use of Uninitialized  Variable Query
// ------------------------------------

// Find all the create expressions
CxList creates = All.FindByType(typeof(ObjectCreateExpr));

// Leave only basic creates (all these have artificial "= new type();" added to their declarator
// In C++ "istringstream" can be handled as basic one
// This is very popular way to get input and initilize by variable of this type other variables
CxList basicCreates = 	
	creates.FindByShortName("bool") +
	creates.FindByShortName("short") +
	creates.FindByShortName("char") +
	creates.FindByShortName("int") +
	creates.FindByShortName("long") +
	creates.FindByShortName("double") +
	creates.FindByShortName("float")+
	creates.FindByShortName("istringstream");

// The variable may be declared by the following way (this is just some example, other apprach are exists):
// 1) int i;
// 2) int j=2;
// 3) int k = int(202 / 8);
// 4) int n = 10 / 2;
// 5) int l = foo();
// For thes different case variable declaration, they kept in DOM by different way
// In example above the variable "k" is stored in DOM as ObjectCreateExpr, very same to variable "i"
// The different that k is initilized, and in DOM it additionaly has "Parameters"
// The section below deals with this situation
// variables that belongs to basicCreates list but were initilized by the way as "k" initilized should be removed from the 
// list
// 		1) Create bcp(Basic Creates Parameters) list that includes first parameter of each basicCreates members
// 		2) Remove from basicCreates list all members that has parameters
// This approach will remove variable "k" from the basicCreates list 

CxList bcp = All.GetParameters(basicCreates,0);
basicCreates-= basicCreates.FindByParameters(bcp);


// Find the declarator itself
CxList declarators = basicCreates.GetFathers();

// Remove out-of-method declarations (too many false positives)
declarators = declarators.GetByMethod(All.GetMethod(declarators));
	
CxList toCheck = All.FindAllReferences(declarators) - declarators;

// The variable of "istringstream" type should be initilized by following way:
// istringstream tmp2;
// tmp2.str("123");
// In this case tmp2 should considered as initilized
foreach (CxList item in toCheck){
	if (item.GetMembersOfTarget().FindByShortName("str").Count &gt; 0){
		CxList initVar = All.FindAllReferences(item);
		toCheck -= initVar;
		declarators -= initVar;
	}
}

CxList conditions = Get_Conditions();
toCheck -= toCheck.FindAllReferences(conditions.FindByAssignmentSide(CxList.AssignmentSide.Left).FindAllReferences(toCheck));

CxList addresses = All.FindByType(typeof(UnaryExpr)).FindByShortName("Address");

// Sanitize all paramethers that get assigned in a method using their address ("by-ref")
CxList sanitize = toCheck.GetByAncs(addresses);
toCheck -= toCheck.FindAllReferences(All.GetByAncs(addresses));
toCheck -= toCheck.FindByAssignmentSide(CxList.AssignmentSide.Left);

// ...then sanitize all the influences of these assignments
sanitize += All.FindAllReferences(sanitize).DataInfluencedBy(sanitize);

CxList methods = Find_Methods();

// Add parametres of "sizeof" to sanitize
CxList methodsParameters = All.GetParameters(methods.FindByShortName("sizeof"));
sanitize += methodsParameters;

toCheck -= All.GetByAncs(methods.FindByShortName("write*", false));

// ShiftRight (stream operator&gt;&gt;) support
// The regular shift right parameter ( &gt;&gt; ) operator may be overloaded
// by way that x &gt;&gt; y will mean y = x
// in genreal it used in input, like : cin &gt;&gt; v1 &gt;&gt; v2
// but may be overloaded by other string methods
// like:
//		int val,n;
//		istringstream iss;
//      string strvalues = "32 240 2 1450";
//		iss.str(strvalues);
//		for (n = 0; n &gt; val;
//		cout &gt;" Rigth side is initialised
		// All.FindById(b.Right.NodeId) - take the right side
		// and remove all it references from toCheck and declaration list
		CxList initVar = All.FindAllReferences(All.FindById(b.Right.NodeId));
		toCheck -= initVar;
		declarators -= initVar;
	}
}

result = toCheck.InfluencedByAndNotSanitized(declarators, sanitize);
result -= result.DataInfluencedBy(result);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>