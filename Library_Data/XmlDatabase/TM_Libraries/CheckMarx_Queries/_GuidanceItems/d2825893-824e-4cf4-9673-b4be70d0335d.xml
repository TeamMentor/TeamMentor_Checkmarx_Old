<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d2825893-824e-4cf4-9673-b4be70d0335d</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1950 - R18 00 04 Ctime</Title>
    <Category>CWE: 10811</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10811</h1>
  <iframe height="500" src="/content/10811" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1950
Cwe : 10811
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA CPP RULE 18-0-4
------------------------------
This query searches for usage of of the time handling facilities of <ctime>

	The Example below shows code with vulnerability: 

		#include <time.h>  //non-compliant
		#include <ctime>   //non-compliant

		time_t     myTime;  //non-compliant

*/

// Safety check for the violating h file
// (it is also a violation in itself)
CxList includes = All.FindByType(typeof(StringLiteral)).GetParameters(Find_Methods()
	.FindByShortName("CX_INCL"));
CxList hFile = includes.FindByShortName("time.h") + includes.FindByShortName("ctime");
if (hFile.Count == 0)
	return hFile;

// The functions defined by time.h
CxList methodInvokes = All.FindByType(typeof(MethodInvokeExpr));

//Time manipulation:
result += methodInvokes.FindByShortName("clock") +
	methodInvokes.FindByShortName("difftime") +
	methodInvokes.FindByShortName("mktime") +
	methodInvokes.FindByShortName("time") +
	//Conversion:
	methodInvokes.FindByShortName("asctime") +
	methodInvokes.FindByShortName("ctime") +
	methodInvokes.FindByShortName("gmtime") +
	methodInvokes.FindByShortName("localtime") +
	methodInvokes.FindByShortName("strftime");

// The macros defined by time.h
result += All.FindByShortName("CLOCKS_PER_SEC");

// Remove all locally defined instances
CxList defs = All.FindDefinition(result);
result -= result.FindAllReferences(defs);

// the include
result += hFile;

// The types


result += All.FindByType(typeof(TypeRef)).FindByShortName("clock_t") +
	All.FindByType(typeof(TypeRef)).FindByShortName("size_t") +
	All.FindByType(typeof(TypeRef)).FindByShortName("time_t") +
	All.FindByType(typeof(TypeRef)).FindByRegex("struct tm", false,false,false);
// struct tm members
CxList memberAccess = All.FindByType(typeof(MemberAccess));


result += memberAccess.FindByRegex("tm_sec;", All.NewCxList()) +
	memberAccess.FindByRegex("tm_min", false,false,false) +
	memberAccess.FindByRegex("tm_hour", false,false,false) +
	memberAccess.FindByRegex("tm_mday", false,false,false) +
	memberAccess.FindByRegex("tm_mon", false,false,false) +
	memberAccess.FindByRegex("tm_year", false,false,false) +
	memberAccess.FindByRegex("tm_wday", false,false,false) +
	memberAccess.FindByRegex("tm_yday", false,false,false) +
	memberAccess.FindByRegex("tm_yday", All.NewCxList()) +
	memberAccess.FindByRegex("tm", All.NewCxList());</ctime></time.h></ctime></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>