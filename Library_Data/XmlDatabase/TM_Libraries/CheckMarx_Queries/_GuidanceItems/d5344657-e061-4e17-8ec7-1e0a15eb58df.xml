<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d5344657-e061-4e17-8ec7-1e0a15eb58df</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1887 - R00 01 12 Find Virtual Unused Parameters</Title>
    <Category>CWE: 10779</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10779</h1>
  <iframe height="500" src="/content/10779" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1887
Cwe : 10779
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 0-1-12
 ------------------------------
 This query searches for unused parameters in virtual functions and 
 all of their overrides. 
 
 The Example below shows code with vulnerability: 

      class A
		{
		public:
			virtual void unused (int * para1,
								int unusedpara) = 0; //Non-compliant
			virtual void used (int * para1,
								int &amp; para2) = 0;
		};
		class B1: public A
		{
	    public:
          virtual void unused (int * para1,
					            int unusedpara) //Non-compliant
          {
	          *para1 = 1U;
          }
          virtual void used (int * para1,
					            int &amp; para2) 
          {
            *para1 = 1U;
          }
		};
		class B2: public A
		{
	    public:
          virtual void unused (int * para1,
					            int unusedpara) //Non-compliant
          {
	          *para1 = 1U;
          }
          virtual void used (int * para1,
					            int &amp; para2)
          {
            para2 = 0;
          }
		};

*/

CxList virtMethods = All.FindByType(typeof(MethodDecl)).FindByFieldAttributes(Modifiers.Virtual);
CxList unCheckedMethods = virtMethods;

CxList classes = All.FindByType(typeof(ClassDecl));
classes = virtMethods.GetClass(classes);
CxList allParams = All.FindByType(typeof(ParamDecl));
allParams = allParams.GetParameters(virtMethods);
CxList typerefs = All.FindByType(typeof(TypeRef));
typerefs = typerefs.GetByAncs(allParams);

foreach(CxList curr in virtMethods) {
	if ((virtMethods - unCheckedMethods).FindByShortName(curr).Count &gt; 0) {
		continue;
	}
	unCheckedMethods -= curr;
	CxList overriden = curr;
	CxList sons = classes.InheritsFrom(classes.GetClass(curr));
	CxList others = unCheckedMethods.FindByShortName(curr);
		
	CxList currParams = allParams.GetParameters(curr);
	CxList currTyperefs = typerefs.GetByAncs(currParams);
	bool isOverride = true;
	foreach(CxList other in others) {
		CxList otherTypeRefs = allParams.GetParameters(other);
		otherTypeRefs = typerefs.GetByAncs(otherTypeRefs);
		//Check if otherMethod overrides currMethod.
		if(sons.FindByShortName(classes.GetClass(other)).Count == 1 &amp;&amp;
			currTyperefs.Count == otherTypeRefs.Count) 
		{
			for(int i = 0; i </pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>