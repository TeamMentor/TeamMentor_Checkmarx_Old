<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>68188e82-45e4-4865-a25b-ea59ec29bcba</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>212 - Buffer Overflow boundedcpy2</Title>
    <Category>CWE: 120</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  120</h1>
  <iframe height="500" src="/content/120" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 212
Cwe : 120
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList boundedMethods = Find_Bounded_Methods();
CxList smallTypeList;
CxList bigTypeList;
CxList param0;
CxList param1;
CxList dest;
CxList src;
CxList builtIn = Find_Builtin_Types();
CxList doubles = builtIn.FindByType("double");
CxList floats = builtIn.FindByType("float");
CxList longs = builtIn.FindByType("long");
CxList ints = builtIn.FindByType("int");	
CxList chars = builtIn.FindByType("char");	
CxList shorts = builtIn.FindByType("short");	
CxList bools = builtIn.FindByType("bool");
CxList firstParam = All.GetParameters(boundedMethods, 0);
CxList secondParam = All.GetParameters(boundedMethods, 1);

foreach (CxList boundedMethod in boundedMethods)
{
	param0 = firstParam.GetParameters(boundedMethod, 0);
	param1 = secondParam.GetParameters(boundedMethod, 1);
	
	// Float
	bigTypeList = doubles;
	smallTypeList = floats;

	dest = param0*smallTypeList;
	src = param1*bigTypeList;
	if ((dest.Count&gt;0) &amp;&amp; (src.Count&gt;0))
	{
		result += boundedMethod;	
	}

	// Long
	bigTypeList += smallTypeList;
	smallTypeList = longs;

	dest = param0*smallTypeList;
	src = param1*bigTypeList;
	if ((dest.Count&gt;0) &amp;&amp; (src.Count&gt;0))
	{
		result += boundedMethod;	
	}

	// Integer
	bigTypeList += smallTypeList;
	smallTypeList = ints;

	dest = param0*smallTypeList;
	src = param1*bigTypeList;
	if ((dest.Count&gt;0) &amp;&amp; (src.Count&gt;0))
	{
		result += boundedMethod;	
	}

	// Char + Short
	bigTypeList += smallTypeList;
	smallTypeList = chars + shorts;
	
	dest = param0*smallTypeList;
	src = param1*bigTypeList;
	if ((dest.Count&gt;0) &amp;&amp; (src.Count&gt;0))
	{
		result += boundedMethod;	
	}

	// Bool
	bigTypeList += smallTypeList;
	smallTypeList = bools;

	dest = param0*smallTypeList;
	src = param1*bigTypeList;
	if ((dest.Count&gt;0) &amp;&amp; (src.Count&gt;0))
	{
		result += boundedMethod;	
	}
}

// Also bcopy, which has the parameters swapped
// (other ideas?)
boundedMethods = Find_Methods().FindByShortName("bcopy");
firstParam = All.GetParameters(boundedMethods, 1);
secondParam = All.GetParameters(boundedMethods, 0);

foreach (CxList boundedMethod in boundedMethods)
{
	param0 = firstParam.GetParameters(boundedMethod, 1);
	param1 = secondParam.GetParameters(boundedMethod, 0);
	
	// Float
	bigTypeList = doubles;
	smallTypeList = floats;

	dest = param0 * smallTypeList;
	src = param1 * bigTypeList;
	if ((dest.Count &gt; 0) &amp;&amp; (src.Count &gt; 0))
	{
		result += boundedMethod;	
	}

	// Long
	bigTypeList += smallTypeList;
	smallTypeList = longs;

	dest = param0 * smallTypeList;
	src = param1 * bigTypeList;
	if ((dest.Count &gt; 0) &amp;&amp; (src.Count &gt; 0))
	{
		result += boundedMethod;	
	}

	// Integer
	bigTypeList += smallTypeList;
	smallTypeList = ints;

	dest = param0 * smallTypeList;
	src = param1 * bigTypeList;
	if ((dest.Count &gt; 0) &amp;&amp; (src.Count &gt; 0))
	{
		result += boundedMethod;	
	}

	// Char + Short
	bigTypeList += smallTypeList;
	smallTypeList = chars + shorts;
	
	dest = param0 * smallTypeList;
	src = param1 * bigTypeList;
	if ((dest.Count &gt; 0) &amp;&amp; (src.Count &gt; 0))
	{
		result += boundedMethod;	
	}

	// Bool
	bigTypeList += smallTypeList;
	smallTypeList = bools;

	dest = param0 * smallTypeList;
	src = param1 * bigTypeList;
	if ((dest.Count &gt; 0) &amp;&amp; (src.Count &gt; 0))
	{
		result += boundedMethod;	
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>