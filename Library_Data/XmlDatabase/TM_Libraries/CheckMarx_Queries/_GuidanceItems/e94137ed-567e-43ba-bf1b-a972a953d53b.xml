<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>e94137ed-567e-43ba-bf1b-a972a953d53b</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1903 - R07 03 02 Find non Global Mains</Title>
    <Category>CWE: 10787</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10787</h1>
  <iframe height="500" src="/content/10787" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1903
Cwe : 10787
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 7-3-2
 ------------------------------
 This query searches for functions named main that are not in the global scope.
 
 The Example below shows code with vulnerability: 

      class Foo
		{
		public:
			int main() { }; //Non-compliant
		};

		int main() { }; 	//Compliant

*/

CxList mains = All.FindByType(typeof(MethodDecl)).FindByShortName("main");
foreach(CxList curr in mains) {
	CxList currClass = mains.GetAncOfType(typeof(ClassDecl));
	CxList currNS = mains.GetAncOfType(typeof(NamespaceDecl));
	System.Text.RegularExpressions.Regex nsPattern = new 
		System.Text.RegularExpressions.Regex(@"Namespace\d+");
	string NSstr = ((NamespaceDecl) currNS.data.GetByIndex(0)).Name;
	if (currClass.FindByShortName("checkmarx_default_classname*").Count == 0 ||
		!nsPattern.IsMatch(NSstr) ) {
		result += curr;
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>