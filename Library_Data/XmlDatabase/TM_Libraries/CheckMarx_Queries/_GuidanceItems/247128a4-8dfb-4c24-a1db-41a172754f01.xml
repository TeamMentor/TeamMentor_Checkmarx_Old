<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>247128a4-8dfb-4c24-a1db-41a172754f01</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1552 - Unsafe Mass Assignment</Title>
    <Category>CWE: 10601</Category>
    <Phase>Ruby Medium Threat</Phase>
    <Technology>Ruby</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10601</h1>
  <iframe height="500" src="/content/10601" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1552
Cwe : 10601
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 1283
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList methods = Find_Methods();
CxList unknownParams = All.FindByType(typeof(UnknownReference)).FindByShortName("params");
unknownParams -= unknownParams.FindAllReferences(All.FindDefinition(unknownParams));

CxList potentialMassAssignment = 
	All.InheritsFrom("ActiveRecord.Base") +
	All.InheritsFrom("ApplicationController");

// 1. unsafe_* methods, that override the attr_accessible
CxList unsafe_build = methods.FindByShortName("unsafe_build");
CxList unsafe_new = methods.FindByShortName("unsafe_new");
CxList unsafe_create = methods.FindByShortName("unsafe_create") + methods.FindByShortName("unsafe_create!");
CxList unsafe_update = methods.FindByShortName("unsafe_update_attributes") + methods.FindByShortName("unsafe_update_attributes!");
CxList unsafeMethods = unsafe_new + unsafe_build + unsafe_create + unsafe_update;
CxList paramsInUnsafe = unknownParams.GetByAncs(unsafeMethods);

if (paramsInUnsafe.Count &gt; 0)
{
	foreach (CxList p in potentialMassAssignment)
	{
		CSharpGraph g = p.data.GetByIndex(0) as CSharpGraph;
		String name = g.ShortName;
		CxList unsafeByType = unsafeMethods.GetTargetOfMembers().FindByType(name).GetMembersOfTarget();
		result += paramsInUnsafe.GetByAncs(unsafeByType);
	}
}


// 2. Normal methods, that do not override attr_accessible
CxList send = All.FindByMemberAccess("ActiveRecord.Base").GetMembersOfTarget().FindByShortName("send");
send = All.GetParameters(send, 0).FindByShortName("attr_accessible");

if (send.Count == 0)
{
	CxList attrInClass = methods.FindByShortName("attr_accessible");
	potentialMassAssignment -= potentialMassAssignment.GetClass(attrInClass);

	CxList update = methods.FindByShortName("update_attributes");
	CxList build = methods.FindByShortName("build");
	CxList create = methods.FindByShortName("create");
	CxList updateCreateBuild = update + create + build;
	CxList paramsInUpdateCreate = unknownParams.GetByAncs(updateCreateBuild);
	
	CxList objectCreate = All.FindByType(typeof(ObjectCreateExpr));
	//CxList inObjectCreate = All.GetByAncs(objectCreate) - objectCreate;
	//inObjectCreate = inObjectCreate.FindByShortName("params");
	//objectCreate = inObjectCreate.GetAncOfType(typeof(ObjectCreateExpr));
	CxList inObjectCreate = All.GetParameters(objectCreate).FindByShortName("params");
	objectCreate = objectCreate.FindByParameters(inObjectCreate);

	foreach (CxList p in potentialMassAssignment)
	{
		CSharpGraph g = p.data.GetByIndex(0) as CSharpGraph;
		String name = g.ShortName;
		result += objectCreate.FindByShortName(name);
		if (paramsInUpdateCreate.Count &gt; 0)
		{
			CxList updateCreate = updateCreateBuild.GetTargetOfMembers().FindByType(name).GetMembersOfTarget();
			result += paramsInUpdateCreate.GetByAncs(updateCreate);
		}
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>