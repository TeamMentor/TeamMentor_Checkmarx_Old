<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>309738ff-c910-4f39-9eb7-d4f4ac750057</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1027 - FLS Update Partial</Title>
    <Category>CWE: 10546</Category>
    <Phase>Apex Force com Serious Security Risk</Phase>
    <Technology>Apex</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10546</h1>
  <iframe height="500" src="/content/10546" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1027
Cwe : 10546
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 1003
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList apexFiles = Find_Apex_Files() - Find_Triggers_Code() - Find_Test_Code();
CxList methodInvoke = apexFiles.FindByType(typeof(MethodInvokeExpr));
CxList sObjectsInApex = Find_sObjects() * apexFiles;
CxList methods = Find_Methods() * apexFiles;

CxList update = apexFiles.FindByShortName("update")
	+ apexFiles.FindByShortName("upsert")
	+ apexFiles.FindByShortName("merge")
	+ apexFiles.FindByShortName("convertlead");

CxList updateMembers = sObjectsInApex.GetParameters(update);

CxList isUpdateableShort = methods.FindByShortName("isupdateable");
CxList isUpdateable = isUpdateableShort.FindByMemberAccess("getdescribe.isupdateable");
CxList getDescribe = apexFiles.FindByMemberAccess("get.getdescribe") +
	apexFiles.FindByMemberAccess("sobjecttype.getdescribe");
isUpdateable += isUpdateableShort * isUpdateableShort.InfluencedByAndNotSanitized(getDescribe, Find_Test_Code());
isUpdateable += apexFiles.FindAllReferences(apexFiles.GetMethod(isUpdateable));

// Remove the case where we only check CRUD (not FLS)
if (isUpdateable.Count &gt; 0)
{
	CxList nonSchemaDescribe = apexFiles.FindByName("*sobjecttype.getdescribe").GetMembersOfTarget();
	nonSchemaDescribe -= apexFiles.FindByName("*schema.sobjecttype.getdescribe").GetMembersOfTarget();
	isUpdateable -= nonSchemaDescribe;
}

// Less constraint updateable
CxList isSomewhatUpdateable = isUpdateable + methods.FindByShortName("getDescribe", false).GetMembersOfTarget().FindByShortName("isUpdateable", false);
isUpdateable += isSomewhatUpdateable;

// Methods that call isUpdateable
CxList isUpdateable2 = isUpdateable - isUpdateable.FindByShortName("isUpdateable", false);

CxList ifStmt = isUpdateable.GetAncOfType(typeof(IfStmt));
CxList returnValues = updateMembers;

returnValues = returnValues * returnValues.InfluencedByAndNotSanitized(apexFiles, Find_Test_Code());

CxList assignTo = Find_VF_Pages().FindByMemberAccess("apex.param").GetMembersOfTarget().FindByMemberAccess("param.assignto");
CxList sObjects = sObjectsInApex * sObjectsInApex.InfluencingOnAndNotSanitized(assignTo, Find_Test_Code());

// Heuristically removing all methods in which there is a negative validation
CxList ifNot = Find_If_Not_Stmt() * ifStmt;

// Heuristically remove check in constructor
CxList exception = Find_Create_In_Constructor().GetByAncs(ifNot);
CxList exceptionClass = apexFiles.GetClass(exception);
returnValues -= apexFiles.GetByAncs(exceptionClass);

// Remove field-level check

// Find assign
updateMembers = returnValues;
CxList assign = apexFiles.GetAncOfType(typeof(AssignExpr));
assign = apexFiles.GetByAncs(assign);
assign = assign.FindByAssignmentSide(CxList.AssignmentSide.Left);
assign = assign.GetByAncs(assign) - methods;

System.Collections.SortedList permissionsList = new System.Collections.SortedList();
System.Collections.SortedList nameCxList = new System.Collections.SortedList();
System.Collections.SortedList typeCxList = new System.Collections.SortedList();

CxList assignTarget = assign.GetTargetOfMembers();
CxList badFields = All.NewCxList();
CxList relevantMembers = All.NewCxList();
foreach (CxList member in updateMembers)
{
	CSharpGraph g1 = member.data.GetByIndex(0) as CSharpGraph;
	string type = g1.TypeName;
	if (!typeCxList.GetKeyList().Contains(type))
	{
		typeCxList.Add(type, apexFiles.FindByShortName(type, false));
	}
	CxList objectReferences = apexFiles.FindAllReferences(member);
	objectReferences += apexFiles.FindByType(type).InfluencingOnAndNotSanitized(objectReferences, Find_Test_Code());
	CxList fields = (objectReferences * assignTarget).GetMembersOfTarget();
	
	CxList relevantFields = fields * fields.InfluencingOnAndNotSanitized(member, Find_Test_Code());
	string name1 = g1.ShortName;
	CxList setters = All.NewCxList();
	if (member.FindAllReferences(sObjects).Count &gt; 0)
	{
		setters = Find_VF_Pages().FindByShortName("get" + name1, false).InfluencingOnAndNotSanitized(assignTo, Find_Test_Code()).GetMembersOfTarget().FindByShortName("set*");
		setters -= (Find_sObjects() * Find_VF_Pages()).GetMembersOfTarget();
		relevantFields += setters;
	}
	int numOfFields = relevantFields.Count;
	if (numOfFields &gt; 0)
	{
		int fieldsOK = 0;
		bool found = false;
		System.Collections.ArrayList goodFields = new System.Collections.ArrayList();
		foreach (CxList field in relevantFields)
		{
			if (!found)
			{
				bool fieldOK = false;
				CSharpGraph g2 = field.data.GetByIndex(0) as CSharpGraph;
				string name = g2.ShortName;
				if ((field * setters).Count &gt; 0)
				{
					name = name.Substring(3);
				}
				if (!nameCxList.GetKeyList().Contains(name))
				{
					nameCxList.Add(name, Find_Apex_Files().FindByShortName(name, false));
				}
				if (goodFields.Contains(name))
				{
					fieldsOK++;
				}
				else
				{
					CxList updateable;
					string key = type + "." + name;
					if (permissionsList.ContainsKey(key))
					{
						updateable = permissionsList[key] as CxList;
					}
					else
					{
						updateable = Get_Permission("isUpdateable", type, name, nameCxList[name], typeCxList[type]);
						updateable += isUpdateable2;
						if (updateable.Count &gt; 0)
						{
							updateable += isUpdateable * isUpdateable.InfluencedByAndNotSanitized(Find_Strings().FindByShortName("'" + name + "'"), Find_Test_Code());
						}
						permissionsList[key] = updateable;
					}
					
					if (updateable.Count == 0)
					{
						found = true;
						badFields += field;
						relevantMembers += member;
						result = field.Concatenate(member) + result;
					}
					else
					{
						ifStmt = updateable.GetAncOfType(typeof(IfStmt));
						ifNot = Find_If_Not_Stmt() * ifStmt;
						CxList ifToIgnore = Find_If_With_Return_or_Create() * ifNot;
						CxList ifNotMethod = apexFiles.GetMethod(ifToIgnore);
						fieldOK = member.GetByAncs(ifNotMethod).Count &gt; 0;

						if (!fieldOK)
						{
							// Clean check inside if statement
							CxList ifYes = Find_If_Yes_Stmt() * ifStmt;
							foreach (CxList stmt in ifYes)
							{

								IfStmt ifGrph = stmt.data.GetByIndex(0) as IfStmt;
								StatementCollection trueS = ifGrph.TrueStatements;
								if (trueS != null)
								{
									if (member.GetByAncs(apexFiles.FindById(trueS.NodeId)).Count &gt; 0)
										fieldOK = true;
								}
							}
						}
			
						if (!fieldOK)
						{
							// Clean when the return is in the "else" of the if statement
							foreach (CxList stmt in ifNot)
							{
								IfStmt ifGrph = stmt.data.GetByIndex(0) as IfStmt;
								StatementCollection falseS = ifGrph.FalseStatements;
								if (falseS != null)
								{
									if (member.GetByAncs(apexFiles.FindById(falseS.NodeId)).Count &gt; 0)
										fieldOK = true;
								}
							}
						}

						if (!fieldOK)
						{
							CxList methodMember = apexFiles.GetByAncs(apexFiles.GetMethod(member) + apexFiles.GetMethod(relevantFields));
							CxList methodsDecl = apexFiles.FindAllReferences(methodMember.FindByType(typeof(MethodDecl)));
							CxList invoke2 = methodInvoke.GetByAncs(apexFiles.GetMethod(methodsDecl));
							CxList localMethodInvoke = apexFiles.FindDefinition(invoke2);
							methodMember += apexFiles.GetByAncs(localMethodInvoke);
							CxList members = methodMember.FindByMemberAccess(type + "." + name, false);
							CxList influenced = isSomewhatUpdateable.InfluencedByAndNotSanitized(members, Find_Test_Code());
							if (influenced.Count &gt; 0)
							{
								fieldOK = true;
							}
						}

						if (fieldOK)
						{
							fieldsOK++;
							goodFields.Add(name);
						}
						else
						{
							found = true;
							badFields += field;
							relevantMembers += member;
							result = field.Concatenate(member) + result;
						}
					}
				}
			}
		}
		if (fieldsOK == numOfFields)
		{
			returnValues -= member;
		}
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>