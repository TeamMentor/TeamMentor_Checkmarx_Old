<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>8b89c718-04e5-473a-9f08-63d923fd3426</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1944 - R15 05 01 Statements Outside TryCatch Dtr</Title>
    <Category>CWE: 10769</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10769</h1>
  <iframe height="500" src="/content/10769" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1944
Cwe : 10769
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* MISRA CPP RULE 15-5-1
 ------------------------------
 This query checks the appearance of elements outside of try-catch block inside the destructor
 
 The Example below shows code with vulnerability: 
     
      class A
      {
          ~A()
          {
              int a;     //non-compliant-outside of try-catch block
              try
              {            
              }   
              catch(int a)
              {
	                 try{
	                 }
                   catch(...)
                   {
	                 }
              }
              int b;     //non-compliant-outside of try-catch block
          }
     }
*/


//finds all destructors
CxList destructor  = All.FindByType(typeof(DestructorDecl));
CxList tryCatchFinally = All.FindByType(typeof(TryCatchFinallyStmt));
CxList stmt= All.FindByType(typeof(Statement));

CxList tryCatch = tryCatchFinally.GetByAncs(destructor);
CxList dtrWithTryCatch=tryCatch.GetFathers().GetFathers().FindByType(typeof(DestructorDecl));
CxList tc = tryCatch.GetAncOfType(typeof(TryCatchFinallyStmt));
CxList foundResults= All.GetByAncs(stmt.GetByAncs(destructor)) * stmt.GetByAncs(destructor) - All.GetByAncs(stmt.GetByAncs(tc));
result= foundResults.GetAncOfType(typeof(DestructorDecl));</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>