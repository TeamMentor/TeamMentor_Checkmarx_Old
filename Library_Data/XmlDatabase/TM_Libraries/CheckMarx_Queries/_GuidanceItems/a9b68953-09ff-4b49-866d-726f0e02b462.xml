<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>a9b68953-09ff-4b49-866d-726f0e02b462</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1201 - Buffer Overflow LongString</Title>
    <Category>CWE: 120</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  120</h1>
  <iframe height="500" src="/content/120" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1201
Cwe : 120
IsExecutable : true
IsEncrypted : false
Severity : 3
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> // The purpose of the query is to find long string buffer overflow
// For example:
// 				char * xxx[10] = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
// should befound as vulnerability
// On other hand,the statement like
//

CxList strings = Find_Strings();
//remove strings that are in the array initialization
CxList arrs = All.FindByType(typeof(ArrayInitializer));
foreach (CxList arr in arrs) {
	ArrayInitializer a = arr.data.GetByIndex(0) as ArrayInitializer;
	if (a.InitialValues.Count &gt; 1) {
		strings -= strings.GetByAncs(arr);
	}
}

CxList unknown = All.FindByType(typeof(UnknownReference));
CxList arrayCreate = All.FindByType(typeof(ArrayCreateExpr));
//return arrayCreate;

// the arrays from string type will not be found as buffer_overflow_long string
CxList decl = arrayCreate.GetAncOfType(typeof(Declarator));
CxList stringType = All.FindByType("string").GetAncOfType(typeof(Declarator));
CxList nonStringDecl =  decl - stringType;

arrayCreate = All.GetByAncs(nonStringDecl).FindByType(typeof(ArrayCreateExpr));
//return arrayCreate;

CxList indexerRef = All.FindByType(typeof(IndexerRef));


CxList arrReferences = All.FindAllReferences(arrayCreate.GetFathers());
CxList arrReferences2 = arrReferences * arrReferences.DataInfluencedBy(strings);

CxList infStrings = strings * strings.DataInfluencingOn(arrReferences2);
foreach (CxList arrDef in arrayCreate)
{
	try
	{
		ArrayCreateExpr ac = arrDef.data.GetByIndex(0) as ArrayCreateExpr;
		if ((ac != null) &amp;&amp; (ac.Sizes.Count &gt; 0))
		{
			CxList arrUseList = arrReferences2.FindAllReferences(arrDef.GetFathers());
			foreach (CxList arrUse in arrUseList)
			{
				IntegerLiteral defIndex = (IntegerLiteral) ac.Sizes[0];
				if (defIndex != null)					
				{
					CxList influencingStrings = infStrings * infStrings.InfluencingOnAndNotSanitized(arrUse, Find_Sanitize());
					foreach (CxList str in influencingStrings)
					{
						StringLiteral s = str.data.GetByIndex(0) as StringLiteral;
						String val = s.Value.Replace(@"\\", @"@").Replace(@"\", @"");
						int size = val.Length;
						if (size &gt;= defIndex.Value)
						{
							result += str.InfluencingOnAndNotSanitized(arrUse, Find_Sanitize());
						}		 
					}
				}
			}
		}
	}
	
	catch (Exception ex)
		{
		// just in case we've missed something
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>