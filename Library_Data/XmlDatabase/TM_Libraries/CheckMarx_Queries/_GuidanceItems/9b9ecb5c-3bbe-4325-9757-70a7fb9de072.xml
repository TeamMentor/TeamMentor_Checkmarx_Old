<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>9b9ecb5c-3bbe-4325-9757-70a7fb9de072</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1818 - R05 01 Identifiers Length Violation</Title>
    <Category>CWE: 11006</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11006</h1>
  <iframe height="500" src="/content/11006" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1818
Cwe : 11006
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 5-1
------------------------------
This query searches for identifier pairs that are different yet are the same on the first 31 characters

	The Example below shows code with vulnerability: 

int abcdefghijklmnopqrstuvwxyz01234A;
int abcdefghijklmnopqrstuvwxyz01234B;

*/

CxList identifiers = Find_Identifiers();

// remove extern delcarations since by definition they do not "declare" an identifier, just repeat it
identifiers -= identifiers.GetByAncs(All.FindByFieldAttributes(Dom.Modifiers.Extern));

// identifiers of length  0){
		result += identAppearances;
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>