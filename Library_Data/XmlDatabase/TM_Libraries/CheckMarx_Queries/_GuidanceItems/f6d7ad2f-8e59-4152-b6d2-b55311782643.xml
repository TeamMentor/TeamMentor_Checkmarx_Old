<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>f6d7ad2f-8e59-4152-b6d2-b55311782643</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1910 - R08 00 01 Find Multiple Declarators</Title>
    <Category>CWE: 10794</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10794</h1>
  <iframe height="500" src="/content/10794" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1910
Cwe : 10794
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 8-0-1
 ------------------------------
 This query searches for multiple declarations in the same row.

 The Example below shows code with vulnerability: 

      int main() {
		    int i,j; 	//Non-compliant
		}

*/

CxList decs = All.FindByType(typeof(Declarator));
SortedList lps = new SortedList(new Checkmarx.DataCollections.PragmaComparer());
foreach(CxList dec in decs) {
	LinePragma lp = (LinePragma) ((Declarator) dec.data.GetByIndex(0)).LinePragma;
	if (!lps.Contains(lp)) {
		lps.Add(lp, null);
	}
}

decs = All.FindByPositions(lps, 0, true);
decs = All.FindByRegex(@",\s*[_A-Za-z]", false, false,false) * decs;
decs -= decs.FindByType(typeof(CharLiteral)) + decs.FindByType(typeof(IntegerLiteral)) +
	decs.FindByType(typeof(StringLiteral)) + decs.FindByType(typeof(Param))
	+ decs.FindByType(typeof(ArrayInitializer));
result = decs;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>