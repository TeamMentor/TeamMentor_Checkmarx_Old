<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d6d22b07-ced3-416c-bf9f-7b4cedd70ad3</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>2058 - Unchecked Return Value</Title>
    <Category>CWE: 252</Category>
    <Phase>Perl Low Visibility</Phase>
    <Technology>Perl</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  252</h1>
  <iframe height="500" src="/content/252" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 2058
Cwe : 252
IsExecutable : true
IsEncrypted : false
Severity : 1
PackageId : 1294
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //	Unchecked return value
//  -----------------------
///////////////////////////////////////////////////////////////////////

// Relevant methods
CxList methodsWithReturnValue = Find_Methods_With_Return_Value();

// Remove methods using "or" (or "||")
CxList or = All.FindByShortName("||").FindByType(typeof(BinaryExpr));
methodsWithReturnValue -= methodsWithReturnValue.GetByAncs(or);

// Remove methods in conditions - the condition is a check already
CxList conditions = Find_Conditions();
methodsWithReturnValue -= methodsWithReturnValue.GetByAncs(conditions);

// Remove methods that are assigned to a variable
CxList assignMethods = methodsWithReturnValue.GetAncOfType(typeof(AssignExpr));
CxList _ = All.FindByShortName("$_").GetAncOfType(typeof(AssignExpr));
assignMethods -= _;
methodsWithReturnValue -= methodsWithReturnValue.GetByAncs(assignMethods);

// remove checks in ternary expressions
methodsWithReturnValue -= methodsWithReturnValue.GetByAncs(All.FindByType(typeof(TernaryExpr)));

// Also consider all the members assigned a value from these methods, and appear in conditions
CxList assignValues = All.GetByAncs(assignMethods).FindByAssignmentSide(CxList.AssignmentSide.Left);
assignValues -= assignValues.FindAllReferences(conditions.FindAllReferences(assignValues));


/// return the methods and the relevant assigned members
result = methodsWithReturnValue + assignValues;


// Ignore cases where autodie is used
CxList autodie = All.FindByType(typeof(Import)).FindByRegex("autodie"); // Find autodie
CxList noAutodie = All.FindByType(typeof(UnknownReference)).FindByShortName("autodie"); // find no autodie to exclude

CxList autoDieNamespaces = autodie.GetAncOfType(typeof(NamespaceDecl));   // results in this namespace will be removed
CxList keepResults = noAutodie.GetAncOfType(typeof(StatementCollection)); // but results in this stmt collection will be kept

// Remove autodie results
result -= result.GetByAncs(autoDieNamespaces) - result.GetByAncs(keepResults);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>