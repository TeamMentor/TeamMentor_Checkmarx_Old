<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>5b3e94a4-4af6-4535-aea9-19769fd0bd69</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1282 - Find Integers</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>PHP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1282
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 1271
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList cast = (All.FindByType(typeof(CastExpr)));
CxList NumberCast = new CxList();
foreach(CxList l in cast)
{
	CastExpr ce = l.data.GetByIndex(0) as CastExpr;
	if(ce.TargetType.TypeName.ToLower() == "int" ||
		ce.TargetType.TypeName.ToLower() == "integer" ||
		ce.TargetType.TypeName.ToLower() == "float" ||
		ce.TargetType.TypeName.ToLower() == "bool" ||
		ce.TargetType.TypeName.ToLower() == "boolean" ||
		ce.TargetType.TypeName.ToLower() == "double" ||
		ce.TargetType.TypeName.ToLower() == "number" ||
		ce.TargetType.TypeName.ToLower() == "long")
	{
		NumberCast += 
			All.FindByFathers(All.FindById(ce.NodeId));
	}
}

CxList allMethods = Find_Methods();
CxList numberSanitizer = allMethods.FindByShortName("round", false) + 
	allMethods.FindByShortName("ceil", false) + 
	allMethods.FindByShortName("doubleval", false) +
	allMethods.FindByShortName("strlen", false) + 
	allMethods.FindByShortName("floatval", false) +
	allMethods.FindByShortName("intval", false) + 
	allMethods.FindByShortName("*count*", false) + 
	allMethods.FindByShortName("*size*", false) + 
	allMethods.FindByShortName("*length*", false) + 
	allMethods.FindByShortName("*position*", false) +
	allMethods.FindByShortName("crc32", false) +
	allMethods.FindByShortName("date", false) +
	allMethods.FindByShortName("hypot", false) +
	allMethods.FindByShortName("min", false) +
	allMethods.FindByShortName("pi", false) +
	allMethods.FindByShortName("sqrt", false) +
	allMethods.FindByShortName("max", false) +
	allMethods.FindByShortName("srand", false) +
	allMethods.FindByShortName("*errno", false) +
	allMethods.FindByShortName("pow", false);
	
//Take care of math functions
numberSanitizer += allMethods.FindByShortName("gmp_*", false) + // This line is all GNU MP functions.
	allMethods.FindByShortName("variant_*", false) + // The VARIANT is COM's equivalent of the PHP zval.
	allMethods.FindByShortName("atan", false) +
	allMethods.FindByShortName("atan2", false) +
	allMethods.FindByShortName("atanh", false) +
	allMethods.FindByShortName("acos", false) +
	allMethods.FindByShortName("acosh", false) +
	allMethods.FindByShortName("asin", false) +
	allMethods.FindByShortName("asinh", false) + 
	allMethods.FindByShortName("tan", false) +
	allMethods.FindByShortName("tan2", false) +
	allMethods.FindByShortName("tanh", false) +
	allMethods.FindByShortName("cos", false) +
	allMethods.FindByShortName("cosh", false) +
	allMethods.FindByShortName("sin", false) +
	allMethods.FindByShortName("sinh", false) +
	allMethods.FindByShortName("exp", false);
		
// Methods that return bool values according to http://php.net/quickref.php
System.Collections.Generic.List<string> booleanReturnStrings = new System.Collections.Generic.List<string>();
booleanReturnStrings.AddRange(new string[] {"arsort", "asort", "ctype_*", "cubrid_affected_rows", "cubrid_bind",
	"cubrid_close*", "cubrid_col_size", "cubrid_commit", "cubrid_data_seek", "cubrid_disconnect",
	"cubrid_drop", "cubrid_error_code", "cubrid_error_code_facility", "cubrid_field_len",
	"cubrid_free_result", "cubrid_get_autocommit", "cubrid_get_query_timeout", "cubrid_is_instance",
	"cubrid_lob2_bind", "cubrid_load_from_glo", "cubrid_lob2_close", "cubrid_lob2_read", "cubrid_lob2_seek*",
	"cubrid_lob2_size", "cubrid_lob2_tell*", "cubrid_lob_close", "cubrid_lob_send", "cubrid_lock_read",
	"cubrid_lock_write", "cubrid_lob_export", "cubrid_lob2_write", "cubrid_move_cursor", "cubrid_num_*",
	"cubrid_next_result", "cubrid_ping", "cubrid_put", "cubrid_send_glo", "cubrid_save_to_glo", 
	"cubrid_seq_*", "cubrid_set_*", "curl_multi_add_handle", "curl_multi_exec", "curl_multi_remove_handle",
	"curl_multi_select", "curl_setopt", "curl_setopt_array", "cyrus_bind", "cyrus_close", "cyrus_unbind"});
CxList currLetterMethods = allMethods.FindByShortName("a*", false) + allMethods.FindByShortName("c*", false);
CxList booleanReturnValues = All.NewCxList();
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"define", "deg2rad", "defined", "dio_seek", "dio_tcsetattr", "dio_write", "dio_truncate", "dl", 
		"empty", "ereg", "eregi" });
currLetterMethods = allMethods.FindByShortName("d*", false) + allMethods.FindByShortName("e*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"fclose", "fflush", "feof", "file_put_contents", "fileatime", "filectime", "filegroup", 
		"fileowner", "filemtime", "fileinode", "fileperms", "filepro", 
		"filepro_fieldcount", "filepro_fieldwidth", "filepro_rowcount", "filesize", "filter_has_var", "filter_id", 
		"finfo_close", "finfo_set_flags", "flock", "floor", "fnmatch", "fmod", "fputcsv", "frenchtojd ", "fseek ", 
		"ftell ", "ftok", "func_num_args"});
currLetterMethods = allMethods.FindByShortName("f*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"gc_collect_cycles", "gc_enabled", "get_magic_quotes_gpc", "get_magic_quotes_runtime", 
		"getlastmod", "getmygid", "getmxrr", "getmyinode", "getprotobyname", "getrandmax", "getservbyname", "gmmktime",
		"gnupg_addencryptkey", "gnupg_clearencryptkeys", "gnupg_cleardecryptkeys", "gnupg_adddecryptkey", 
		"gnupg_addsignkey", "gnupg_clearsignkeys", "gnupg_setarmor", "gnupg_setsignmode", "gzseek", "gzeof", "gztell", 
		"gzclose", "gzpassthru", "gzrewind"});
currLetterMethods = allMethods.FindByShortName("g*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"in_array", "import_request_variables", "is_*", "isCloneable", "isInstance", "isInternal", 
		"isSubclassOf", "isDisabled", "isInstantiable", "isIterateable", "isAbstract", "isFinal", "isInterface",
		"isset", "isUserDefined"});
currLetterMethods = allMethods.FindByShortName("i*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"memcache_debug", "memory_get_usage", "memory_get_peak_usage", "method_exists", "mktime", 
		"mkdir", "move_uploaded_file", "mt_getrandmax", "mt_rand", "natsort", "natcasesort", "ord"});
currLetterMethods = allMethods.FindByShortName("m*", false) + allMethods.FindByShortName("n*", false) +
	allMethods.FindByShortName("o*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"pclose", "pcntl_*", "posix_access", "png2wbmp", "preg_match", "preg_match_all",
		"preg_last_error", "proc_close", "proc_nice", "proc_terminate", "property_exists", "putenv", "rad2deg ", "rand", 
		"rename", "rename_function", "restore_error_handler", "restore_exception_handler", "rewind", "rmdir", "rpm_is_valid",
		"rpm_is_valid", "rsort"});
currLetterMethods = allMethods.FindByShortName("p*", false) + allMethods.FindByShortName("r*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"sem_acquire", "sem_remove", "sem_release", "sizeof", "sort", "spl_autoload_register",
		"spl_autoload_unregister", "strcasecmp", "strcoll", "strcspn", "strcmp", "stripos", "strnatcmp", "strrpos",
		"strlen", "strncasecmp", "strpos", "strspn", "strnatcasecmp", "strncmp", "strripos", "strtotime",
		"substr_compare", "substr_count", "symlink"});
currLetterMethods = allMethods.FindByShortName("s*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
booleanReturnStrings.Clear();
booleanReturnStrings.AddRange(new string[] {"tcpwrap_check", "usort", "w32api_deftype", "w32api_register_function", "wddx_add_vars",
		"xattr_set", "xattr_supported", "xattr_remove", "xml_get_current_line_number", "xml_parse_into_struct",
		"xml_parser_free", "xml_set_*", "xml_get_current_byte_index", "xml_get_error_code", 
		"xml_get_current_column_number", "xmlrpc_server_register_method", "xmlrpc_server_register_introspection_callback",
		"xmlrpc_is_fault", "xmlrpc_server_add_introspection_data", "xmlrpc_server_destroy", "xmlrpc_set_type"});
currLetterMethods = allMethods.FindByShortName("t*", false) + allMethods.FindByShortName("u*", false) +
	allMethods.FindByShortName("w*", false) + allMethods.FindByShortName("x*", false);
foreach (string currString in booleanReturnStrings) 
{
	booleanReturnValues += currLetterMethods.FindByShortName(currString, false);
}
// End bool and int value returns

CxList binary = All.FindByType(typeof(BinaryExpr));
CxList booleanConditions =
	binary.FindByShortName("<_22_29_ _binary.findbyshortname28_22_="" _2b_="">") +
	binary.FindByShortName("==") +
	binary.FindByShortName("!=") +
	binary.FindByShortName("") +
	binary.FindByShortName("<_3d_22_29_ _binary.findbyshortname28_22_="" _2b_="">=") +
	binary.FindByShortName("||") +
	binary.FindByShortName("&amp;&amp;") +
	All.FindByType(typeof(UnaryExpr)).FindByShortName("Not");

CxList ESAPI = 
	Get_ESAPI().FindByShortName("*Attempts") +
	Get_ESAPI().FindByShortName("*Boolean") +
	Get_ESAPI().FindByShortName("*containsHeader") +
	Get_ESAPI().FindByShortName("*Count") +
	Get_ESAPI().FindByShortName("*Date") +
	Get_ESAPI().FindByShortName("*DateHeader") +
	Get_ESAPI().FindByShortName("*Double") +
	Get_ESAPI().FindByShortName("*Enabled") +
	Get_ESAPI().FindByShortName("*getBufferSize") +
	Get_ESAPI().FindByShortName("*getIntHeader") +
	Get_ESAPI().FindByShortName("*Id") +
	Get_ESAPI().FindByShortName("*Integer") +
	Get_ESAPI().FindByShortName("*Length") +
	Get_ESAPI().FindByShortName("*LogEncodingRequired") +
	Get_ESAPI().FindByShortName("*Long") +
	Get_ESAPI().FindByShortName("*MaxOldPasswordHashes") +
	Get_ESAPI().FindByShortName("*Number") +
	Get_ESAPI().FindByShortName("*Port") +
	Get_ESAPI().FindByShortName("*Real") +
	Get_ESAPI().FindByShortName("*RememberTokenDuration") +
	Get_ESAPI().FindByShortName("*Size") +
	Get_ESAPI().FindByShortName("*Stamp") +
	Get_ESAPI().FindByShortName("*Time") +
	Get_ESAPI().FindByShortName("changeSessionIdentifier") +
	Get_ESAPI().FindByShortName("getDisableIntrusionDetection") +
	Get_ESAPI().FindByShortName("getLogEncodingRequired") +
	Get_ESAPI().FindByShortName("getLogLevel") +
	Get_ESAPI().FindByShortName("getMaxOldPasswordHashes") +
	Get_ESAPI().FindByShortName("getQuota") +
	Get_ESAPI().FindByShortName("getRememberTokenDuration") +
	Get_ESAPI().FindByShortName("id*") +
	Get_ESAPI().FindByShortName("is*") +
	Get_ESAPI().FindByShortName("Size", false)
	;

ESAPI -= ESAPI.FindByShortName("assert*");

result = NumberCast + numberSanitizer + booleanConditions + ESAPI + booleanReturnValues;
//return All.InfluencedBy(NumberCast);


//CxList ints = All.FindByType("int") + All.FindByType("Int16") + 
//	All.FindByType("Int32") + All.FindByType("Int64") + 
//	All.FindByType("long") + All.FindByType("decimal") + 
//	All.FindByType("float") + All.FindByType("double");
//
//CxList methods = Find_Methods();
//CxList converted = 
//	methods.FindByName("Convert.ToBoolean") +
//	methods.FindByName("Convert.ToByte") +
//	methods.FindByName("Convert.ToSByte") +
//	methods.FindByName("Convert.ToDateTime") +
//	methods.FindByName("Convert.ToInt16") +
//	methods.FindByName("Convert.ToInt32") +
//	methods.FindByName("Convert.ToInt64") +
//	methods.FindByName("Convert.ToDecimal") +
//	methods.FindByName("Convert.ToDouble") +
//	methods.FindByName("Convert.ToSingle") +
//	methods.FindByName("Convert.ToUInt16") +
//	methods.FindByName("Convert.ToUInt32") +
//	methods.FindByName("Convert.ToUInt64") + 
//
//	methods.FindByName("int.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("Int16.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("Int32.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("Int64.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("long.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("decimal.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("double.Parse", StringComparison.OrdinalIgnoreCase) + 
//	methods.FindByName("float.Parse", StringComparison.OrdinalIgnoreCase);
//
//

//CxList byNames = All.FindByShortName("*Length*", false) + 
//	All.FindByShortName("*Index*", false) + 
//	All.FindByMemberAccess("Request.MapImageCoordinates") +
//	All.FindByMemberAccess("Request.ContentLength") +
//	All.FindByMemberAccess("Request.TotalBytes") + 
//	(All.FindByMemberAccess("Request.MapImageCoordinates") +
//	All.FindByMemberAccess("Request.ContentLength") +
//	All.FindByMemberAccess("Request.TotalBytes")).GetTargetOfMembers()
//	
//	+ Find_Integers_Components();
//
//CxList binary = All.FindByType(typeof(BinaryExpr));
//CxList booleanConditions =
//	binary.FindByShortName("<_22_29_ _binary.findbyshortname28_22_="" _2b_="">") +
//	binary.FindByShortName("==") +
//	binary.FindByShortName("!=") +
//	binary.FindByShortName("") +
//	binary.FindByShortName("<_3d_22_29_ _binary.findbyshortname28_22_="" _2b_="">=") +
//	binary.FindByShortName("||") +
//	binary.FindByShortName("&amp;&amp;") +
//	All.FindByType(typeof(UnaryExpr)).FindByShortName("Not");
//
//CxList nonSanitizer = All.FindByType(typeof(AssignExpr)).GetByAncs(booleanConditions);
//booleanConditions -= nonSanitizer.GetAncOfType(typeof(BinaryExpr));
//
///*
//CxList methodInts = All.FindByReturnType("int") + All.FindByReturnType("Int16") + 
//	All.FindByReturnType("Int32") + All.FindByReturnType("Int64") + 
//	All.FindByReturnType("long") + All.FindByReturnType("decimal") + 
//	All.FindByReturnType("float") + All.FindByReturnType("double");
//
//methodInts = methods.FindAllReferences(methodInts);
//*/
//result = ints + converted + byNames + booleanConditions/* + methodInts*/;</_3d_22_29_></_22_29_></_3d_22_29_></_22_29_></string></string></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>