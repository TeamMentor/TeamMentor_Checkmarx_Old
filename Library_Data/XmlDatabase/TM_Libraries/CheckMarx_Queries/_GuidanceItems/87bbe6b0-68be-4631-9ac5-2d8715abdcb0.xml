<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>87bbe6b0-68be-4631-9ac5-2d8715abdcb0</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1413 - Buffer Overflow boundcpy WrongSizeParam</Title>
    <Category>CWE: 0</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1413
Cwe : 0
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> return result;
// why this query is should be redesigned?
// Originally the query is deal with the patter strncpy(targer, src, strtlen(src))
// In this situation it is possibale buffer overflow if scr &gt; target, BUT according the logic
// of strcpy command in third parameter we should specify the lenght of copied sequence
// so, in the right solution we can found an vulnerability here just if we checked that 
// src &gt; taget indeed 

//
// The purpose of the Query is to find bounded copy statement like
// strcpy() or memcpy(), where on the size parameter applied wrong sanitation
// The code EXAMPLE below  shows the cases the query deal with
//
//void func(char * str)
//	{
//	char target[(strlen(str) + 1) * sizeof(char)];
//	target[strlen(str)] = 0;  
//	  //  The vulnerability should be found: strlen is applied on the second parameter instead of on the first one
//	strncpy(target, str, strlen(str));
//	
//	  //  NO vulnerability here, the third parameter is sizeof method applied on first parameter.
//	strncpy(target, str, strlen(target));
//	
//	  //  The vulnerability should be found: sizeof is applied on the second parameter instead of on the first one
//	memcpy(x, str, sizeof(str));    
//	
//	  // The vulnerability should be found: The third parameter is BinExpr, the strlen is applied on second parameter as well
//	memcpy(x, str, strlen(str) - 5);
//	
//	  // The vulnerability should be found: The third parameter is BinExpr, the sizeof is applied on second parameter as well
//	memcpy(x, str, sizeof(str) + 10);
//	
//	  // NO vulnerability here, the third parameter is integer
//	memcpy(target, y, 100);
//	
//	  // NO vulnerability here, the third parameter is method. We assume this is kind of sanitizer.
//	memcpy(target, y, foo(900));
//	
//	  // NO vulnerability here, the third parameter is sizeof method applied on first parameter.
//	memcpy(target, str, sizeof(target));
//	
//	   // NO vulnerability here, the third parameter is method. We assume this is kind of sanitizer.
//	memcpy(target, y, foo(sizeof(str) + 10));
//	
//	   // NO vulnerability here
//	strncat(target, str, (strlen(target) - strlen(str)));  
//	
//	  // False negative, in the third parameter the strlen is applied on the target and str. The + sign not took in
	  // consadiration
//	strncat(target, str, (strlen(target) + strlen(str)));  
	 
//	// False Positive
//	int    = strlen(target);
//	strncat(target, str, (XXX - strlen(str)));  
//	}

//The sizeParams
CxList sizeParams = Get_boundedCpy_Param2();
CxList bMethods = Find_Bounded_Methods();


CxList thirdParamAsMethod = All.GetByAncs(sizeParams).FindByType(typeof(MethodInvokeExpr)) * 
                        	(Find_All_Strlen() + All.GetByAncs(sizeParams).FindByShortName("sizeof"));


bMethods = bMethods.FindByParameters(thirdParamAsMethod.GetAncOfType(typeof(Param)));

foreach (CxList method in bMethods){
	CxList firstParam = All.GetParameters(method, 0).FindByType(typeof(UnknownReference));
	CxList thirdParam = All.GetByAncs(All.GetParameters(method, 2)).FindByType(typeof(UnknownReference));
	if (firstParam.FindAllReferences(thirdParam).Count == 0){
		result += thirdParam;
	}
}
return result;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>