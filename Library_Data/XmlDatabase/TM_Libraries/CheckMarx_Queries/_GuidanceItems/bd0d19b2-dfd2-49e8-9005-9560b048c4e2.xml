<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>bd0d19b2-dfd2-49e8-9005-9560b048c4e2</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1554 - Find DB Linq</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>VbNet</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1554
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 43
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //Find DB Linq Access

string[] dbCommit = new string[] {
	"DeleteOnSubmit",
	"InsertOnSubmit",
	"UpdateOnSubmit",
	"SubmitChanges",
	"OnSubmit"	
	};

CxList methods = Find_Methods();
//Look for all methods that calling LINQ()
CxList linqList = methods.FindByShortName("linq");

//In following block looking for all new() operation 
//with result of DataContext type
// Output example: 
// 1) Dim dc As New MyDataClassesDataContext()
// 2) Dim dbCl As DataClasses3DataContext = New MyDataClasses3DataContext()
CxList objCreated = All.FindByFathers(All.FindByType(typeof(ObjectCreateExpr)));
CxList objCreatedByDCType = objCreated.FindByType("*DataContext*") + objCreated.InheritsFrom("*DataContext*");

CxList decl = objCreatedByDCType.GetAncOfType(typeof(Declarator));
CxList varByDCType = All.FindAllReferences(decl);
varByDCType += varByDCType.GetMembersOfTarget();
CxList varDCType = All.FindByType("*DataContext*");
CxList varRef = All.FindAllReferences(varDCType);

// Block below looks for LINQ() methods where parameter data context type 
// Dim X = LINQ(product)
linqList = linqList.DataInfluencedBy(varByDCType  +varRef + varRef.GetMembersOfTarget());

// Took left side of the assignment
// In example above the X variable is represent the access to DB
CxList linq =  All.GetByAncs(linqList.GetAncOfType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left) + 
	   All.GetByAncs(linqList.GetAncOfType(typeof(VariableDeclStmt))).FindByAssignmentSide(CxList.AssignmentSide.Left);

//Block below looks for direct DB acccess by X variable
//for example:
// x.OnSubmit();
CxList linqRef =  All.FindAllReferences(linq);
CxList linqTarget = linqRef.GetMembersOfTarget();
CxList directDBAccess = All.NewCxList();
foreach (string str in dbCommit)
{
	directDBAccess += linqTarget.FindByShortName(str, false);
}

//If X is returned value, it may be used after it
//we are looking who call the function that returns X
//Example z = foo()
// foo(){ Dim X = LINQ(product); Return X}

CxList returnStmt = linqRef.GetAncOfType(typeof(ReturnStmt));// looks Anc that returns X
CxList returnStmtAncMethod = returnStmt.GetAncOfType(typeof(MethodDecl)); // Tooks just functions it self: foo()
CxList refDBAccessMethods = All.FindAllReferences(returnStmtAncMethod)- returnStmtAncMethod; //looks for z = foo()
//Build the methdos that applied 
// For example: 	Accessor.GetTopFiveOrdersById(OrderPosition).InsertOnSubmit(cust)
CxList theTarget = refDBAccessMethods.GetMembersOfTarget();
CxList DBAccessRightSide = All.NewCxList();
foreach (string str in dbCommit)
{
	DBAccessRightSide += theTarget.FindByShortName(str, false);
}

// The block below looks for "second oreder"
// For example
// 1) 	Dim xxx
//		xxx = GetOrderById(1)
//		xxx.DeleteOnSubmit(cust)
//
// 2)  dataGridView1.DataSource = Accessor.GetTopFiveOrdersById(OrderPosition)	
//	   dataGridView1.DataSource.InsertOnSubmit(cust)

CxList secondOrderLinq = All.GetByAncs(refDBAccessMethods.GetAncOfType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left);
CxList secondOrderLinqRef = All.FindAllReferences(secondOrderLinq);
CxList secondOrderLinqTarget = secondOrderLinqRef.GetMembersOfTarget();

CxList secondOrderDBAccess = new CxList();
foreach (string str in dbCommit)
{
	secondOrderDBAccess += secondOrderLinqTarget.FindByShortName(str, false);
}	

// The last block looks for access to DataContext methods listed below, without any connection to 

CxList linqAccess = All.FindByMemberAccess("*DataContext*.deleteonsubmit") +
	All.FindByMemberAccess("*DataContext*.insertonsubmit") +
	All.FindByMemberAccess("*DataContext*.updateonsubmit") +
	All.FindByMemberAccess("*DataContext*.submitchanges") +
	All.FindByMemberAccess("*DataContext*.onsubmit");

return secondOrderDBAccess + DBAccessRightSide + directDBAccess + linqAccess;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>