<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>30347f8a-0841-4ff3-8ef8-4745087f4505</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1947 - R16 00 05 No Tokens In Func Like Macro</Title>
    <Category>CWE: 10772</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10772</h1>
  <iframe height="500" src="/content/10772" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1947
Cwe : 10772
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* MISRA CPP RULE 16-0-5
 ------------------------------
 This query checks if there are arguments to a function-like macro don't contain tokens that look 
 like preprocessing directives.
 
 The Example below shows code with vulnerability: 
      
      #define M(A) printf(#A) //non-compliant  
 
      #define foo(X) #X+X     //non-compliant

      #define bar(Z) (#Z)     //non-compliant
*/


// makes sure that the the arguments to a function-like macro don't contain tokens that look like preprocessing directives.
result = All.FindByRegex(@"#define\s+\w+\s*[(]((?<par>\w+),?)+[)]\s*(?=[(].*#\k<par>[^\w].*[)]|([^(]*#\k<par>[^\w].*)|\w+[(][^""']*#\k<par>[^\w].*[)])",
	All.NewCxList());</par></par></par></par></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>