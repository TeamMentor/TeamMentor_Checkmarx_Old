<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>24656634-a246-46b0-9662-0f24935f0646</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1628 - Unused Variable</Title>
    <Category>CWE: 563</Category>
    <Phase>Java Best Coding Practice</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  563</h1>
  <iframe height="500" src="/content/563" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1628
Cwe : 563
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 31
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* Here we get with 5 types of unused variables
1. Variables and function parameters that are never ever used.
2. Variables that are initialized but never used.
3. Function parameters that are changed within the function and only then used. This might not be a problem
   but it certainly is a bad coding practice
4. Initial value set to a member is never used, but overridden by other values
5. Set a value to a member, and then reset without using the original value
*/

// Dead Code (and JSP code, that should be ignored as well)
CxList jsp = Find_Jsp_Code();
jsp = jsp.GetByAncs(jsp.FindByShortName("Checkmarx_Class_Init"));
CxList deadCode = Find_Dead_Code_Contents() + jsp;

// Get all declarators, param decl and constant decl
CxList declarators = All.FindByType(typeof(Declarator));
CxList paramDecl = All.FindByType(typeof(ParamDecl));
paramDecl -= deadCode;
CxList constants = All.FindByType(typeof(ConstantDecl));

// variable decl which is a constant is irrelevant
CxList vars = declarators - declarators.FindAllReferences(constants);

// All getters/setters
CxList methodDecl = All.FindByType(typeof(MethodDecl));
CxList setters = methodDecl.FindByShortName("set*");
CxList getters = methodDecl.FindByShortName("get*") + methodDecl.FindByShortName("is*");

// Have a list of variable-and-param decl, for the first type of unused variables
CxList varsAndParams = vars + paramDecl;
// All references of vars (and params)
CxList varsReferences = All.FindAllReferences(varsAndParams);


/// Part 1 - Variables and function parameters that are never ever used

// Which vars and params were never used
CxList neverUsed = varsAndParams - varsAndParams.FindDefinition(varsReferences - varsAndParams);

// Remove parameters of abstract methods
neverUsed -= paramDecl.GetByAncs(paramDecl.GetFathers().GetFathers().FindByType(typeof(MethodDecl)).FindByFieldAttributes(Modifiers.Abstract));

// Remove HttpServletRequest and HttpServletResponse that are parameters
CxList response = neverUsed.FindByType("HttpServletResponse").FindByType(typeof(ParamDecl));
CxList request = neverUsed.FindByType("HttpServletRequest").FindByType(typeof(ParamDecl));
neverUsed -= response + request;
// Remove "main" parameters
neverUsed -= neverUsed.GetParameters(All.FindByType(typeof(MethodDecl)).FindByShortName("main")).FindByShortName("args");
// Remove public members
neverUsed -= neverUsed.GetByAncs(neverUsed.GetAncOfType(typeof(FieldDecl)).FindByFieldAttributes(Modifiers.Public));

/// Part 2 - Variables that are initialized but never used

// Find all the initialized parameters
CxList initialized = varsReferences.FindByAssignmentSide(CxList.AssignmentSide.Left);

// Find all the reerences of the initialized parameters, not inlcuding:
// a. the initialized parameters themselves, and
// b. their declaration
CxList initializedReferences = (All - initialized - vars).FindAllReferences(initialized);
// Find the definition/declaration of all variables that were initialized and used
CxList initializedRefDef = vars.FindDefinition(initializedReferences);
// Find the definition/declaration of all variables that were initialized (used or not used!!)
CxList initializedDef = vars.FindDefinition(initialized);

// Leave only the variables that were initialized but not used elsewhere
CxList onlyInitialized = initializedDef - initializedRefDef;
// Return the initialization and not the declaration (clearer for the reader)
onlyInitialized = initialized.FindAllReferences(onlyInitialized);

// Remove results in setters
CxList initSetters = setters.GetMethod(onlyInitialized);
CxList initSetterVars = onlyInitialized.GetByAncs(initSetters );
foreach (CxList setter in initSetters )
{
	CSharpGraph g = setter.data.GetByIndex(0) as CSharpGraph;
	String setterName = g.ShortName;
	if (setterName.Length &gt; 3)
	{
		setterName = setterName.Substring(3);
		CxList relevantVar = initSetterVars.GetByAncs(setter).FindByShortName(setterName, false);
		onlyInitialized -= relevantVar;
	}
}


/// Part 3 - Function parameters that are changed within the function and only then used

// Find assignments to a varaiable
CxList assignToParam = varsReferences.FindAllReferences(paramDecl).FindByAssignmentSide(CxList.AssignmentSide.Left);

// Find only paramDecl that are set to a value (for optimization purposes, no need to loop on any others
CxList setParamDecl = varsReferences.FindAllReferences(paramDecl).FindByAssignmentSide(CxList.AssignmentSide.Left);
setParamDecl = paramDecl.FindDefinition(setParamDecl);

CxList methodsContent = All.GetByAncs(paramDecl.GetAncOfType(typeof(MethodDecl)));
methodsContent -= deadCode;
CxList changedParams = All.NewCxList();
// Look at every parameter and check if it is set a value and then used

foreach (CxList oneParamDecl in setParamDecl)
{
	CxList method = oneParamDecl.GetAncOfType(typeof(MethodDecl));
	CxList usedParams = methodsContent.GetByAncs(method) - oneParamDecl;
	usedParams = usedParams.FindAllReferences(oneParamDecl);
	CxList paramAssign = usedParams.GetAncOfType(typeof(AssignExpr));
	foreach (CxList pAssign in paramAssign)
	{
		CxList usedParamUnderAssign = usedParams.GetByAncs(pAssign);
		if (usedParamUnderAssign.Count &gt; 1)
		{
			usedParams -= usedParamUnderAssign;
		}
	}
	CxList usedParamsInfluenced = usedParams.DataInfluencedBy(oneParamDecl);
	CxList usedParamsNotInfluenced = usedParams - usedParamsInfluenced;
	changedParams += usedParamsNotInfluenced.DataInfluencingOn(usedParamsNotInfluenced);
}
changedParams -= changedParams.GetMembersOfTarget().GetTargetOfMembers();
changedParams -= changedParams.DataInfluencingOn(changedParams);


/// Part 4 - Initial value set to a member is never used, but overridden by other values

// declarators that are initialized by somehting
CxList initializer = All.GetByAncs(declarators).FindByAssignmentSide(CxList.AssignmentSide.Right);
initializer = initializer.GetAncOfType(typeof(Declarator));

// the references of all initialized members
CxList initializedRef = All.FindAllReferences(initializer);
initializedRef -= Find_Dead_Code_Contents();

// Initialized variables that are re-initialized in the program
CxList reInitialized = (initializedRef - initializer).FindByAssignmentSide(CxList.AssignmentSide.Left);

CxList removeReInit = All.NewCxList();
foreach (CxList reInit in reInitialized)
{
	CxList IfStmt = reInit.GetAncOfType(typeof(IfStmt));
	CxList blk = reInit.GetAncOfType(typeof(StatementCollection));
	if (reInitialized.GetByAncs(blk).Count  0)
	{
		CxList assignRef = assignLeftSideRef.FindAllReferences(assignLeftRef) - assignLeftRef;
		doubleAssign += assignLeftRef - assignLeftRef.InfluencingOnAndNotSanitized(assignRef, sanitize);
	}
}

// Remove double assign in conditions for cases like while(line=doSomething()), where the "line" actually
// influences nothing (flow issue), although it is used later on
doubleAssign -= doubleAssign.GetByAncs(Find_Conditions());
CxList newDoubleAssign = doubleAssign; // remove cases when there are various initializations in different if blocks

foreach (CxList dbl in doubleAssign)
{
	CxList IfStmt = dbl.GetAncOfType(typeof(IfStmt));
	CxList blk = dbl.GetAncOfType(typeof(StatementCollection));
	if (doubleAssign.GetByAncs(blk).Count </pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>