<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>4ecf9411-3666-4205-b423-2820faffb5b9</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1900 - R07 01 01 Declare Const if not Modified</Title>
    <Category>CWE: 10784</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10784</h1>
  <iframe height="500" src="/content/10784" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1900
Cwe : 10784
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 7-1-1
 ------------------------------
 This query searches for unmodified declarations that don't have the const keyword.
 
 The Example below shows code with vulnerability: 

      int foo(int a,		//Non-compliant
			int * b, 		//Non-compliant
			int * const c,	//Compliant
			int d) 			//Compliant
		{
			d = 8;
			*b = 8;
		};

*/

CxList decls = All.FindByType(typeof(Declarator)) + All.FindByType(typeof(ParamDecl));
decls -= decls.FindByShortName("");
decls -= decls.GetByAncs(All.FindByType(typeof(StructDecl)));
//Remove params of prototype functions
CxList protoMethods = All.FindByType(typeof(MethodDecl));
protoMethods -= All.FindByFathers(protoMethods).FindByType(typeof(StatementCollection)).GetFathers();
decls -= decls.GetParameters(protoMethods);
//Find const declarations on variables - especially pointer.
CxList consts = All.FindByType(typeof(TypeRef)).FindByRegex(@"const\s+(\w+::)?\w+\s*&amp;", false, false, false);
consts = consts.GetAncOfType(typeof(ParamDecl)) + decls.GetByAncs(consts.GetFathers().fbt(typeof(VariableDeclStmt)));
consts += decls.GetByAncs((All - All.FindByType(typeof(MethodDecl))).FindByFieldAttributes(Modifiers.Readonly));
CxList pointers = decls.FindByRegex(@"\w+\s*\*",false,false,false);
decls -= consts + pointers;

CxList potPoint = All.FindByType(typeof(TypeRef)).FindByRegex(@"\w+\s*\*\s*const\W", false, false, false);
pointers -= All.FindByType(typeof(Declarator)).GetByAncs(potPoint.GetFathers())
	+ potPoint.GetAncOfType(typeof(ParamDecl));

//Find unmodified 
CxList refs = All.FindAllReferences(decls + pointers) - decls - pointers;
refs = (decls + pointers).FindDefinition(refs.FindByAssignmentSide(CxList.AssignmentSide.Left));
result += decls + pointers - refs;

//Add modification with </pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>