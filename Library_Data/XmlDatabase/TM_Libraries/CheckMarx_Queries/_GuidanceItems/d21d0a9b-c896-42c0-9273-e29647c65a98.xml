<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d21d0a9b-c896-42c0-9273-e29647c65a98</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1909 - R07 05 03 Return Parameter Passed by Ref</Title>
    <Category>CWE: 10793</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10793</h1><iframe src='/content/10793' width="100%" height="500"></iframe><h1>Checkmarx Rule</h1>
<div style='padding:10px'><pre>QueryId : 1909
Cwe : 10793
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre></div><h3>Source</h3><div style='padding:10px'><pre> /*
 MISRA CPP RULE 7-5-3
 ------------------------------
 This query searches for functions that return a reference or a pointer to a parameter
 that is passed by reference or const reference.
 
 The Example below shows code with vulnerability: 

	int * fn1 (int & x) {
		return (&x); 		//Non-compliant
	}
	const int * fn3 (const int & x){
		return (&x); 		//Non-compliant
	}
	int & fn4 (int & x) {
		return (x); 		//Non-compliant
	}  
	const int & fn5 (const int & x) {
		return (x); 		//Non-compliant
	}  

*/

//Find parameter passed by reference or const reference.
CxList refParams = All.FindByType(typeof(ParamDecl));
refParams = All.FindByRegex(@"(?<=\&\s*)\w", false, false,false) * refParams;
//Find if the parameter is returned.
CxList dataFromParams = All.FindAllReferences(refParams);
CxList retStmt = All.GetByAncs(All.FindByType(typeof(ReturnStmt)));
retStmt = dataFromParams * retStmt;
retStmt -= retStmt.GetByAncs(retStmt.GetAncOfType(typeof(MethodInvokeExpr)));
result = retStmt.DataInfluencedBy(refParams);</pre></div>]]></Data>
  </Content>
</TeamMentor_Article>