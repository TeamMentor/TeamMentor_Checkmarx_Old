<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>8d4f36be-e0a4-4818-9944-a7de7ff624ae</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1822 - R05 05 Identifier With Static Storage Reused</Title>
    <Category>CWE: 11010</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11010</h1>
  <iframe height="500" src="/content/11010" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1822
Cwe : 11010
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 5-5
------------------------------
This query searches for names of identifiers with static storage that are reused anywhere in the code

	The Example below shows code with vulnerability: 

static int dummy;
unsigned dummy;

*/


//all declarations
CxList allDecl = All.FindByType(typeof(Declarator));
//get all static declarations
Modifiers mod = new Modifiers();
mod = Dom.Modifiers.Static;
CxList fd = All.FindByType(typeof(FieldDecl));
CxList dcltr = All.FindByType(typeof(Declarator));
CxList staticFields = All.FindByFieldAttributes(mod) - All.FindByType(typeof(MethodDecl));
staticFields = (allDecl + fd).GetByAncs(staticFields);
CxList classDecl = All.FindByType(typeof(ClassDecl));


//compare names of all declarations

foreach(CxList stat in staticFields)
{
	
	CSharpGraph statName = stat.data.GetByIndex(0) as CSharpGraph;
	CxList totalApp = ((allDecl).FindByShortName(statName.ShortName));
	if(totalApp.Count &gt; 1)
	{
		result += totalApp;
	}
}


//for all non- members functions
CxList allMethods = All.FindByType(typeof(MethodDecl));
//remove all defintions
CxList stmtCol = All.FindByType(typeof(StatementCollection));
foreach(CxList cur in allMethods)
{
	CxList myClass = classDecl.GetClass(cur);
	if (stmtCol.FindByFathers(cur).Count == 0)
	{
		allMethods -= cur;
	}
}
//get all static method declarations
CxList staticMethods = allMethods.FindByType(typeof(MethodDecl));
staticMethods = staticMethods.FindByFieldAttributes(mod);

//compare their names
foreach(CxList stat in staticMethods)
{	
	CxList totalApp = (allMethods).FindByShortName(stat);
	if(totalApp.Count &gt; 1)
	{
		result += totalApp;
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>