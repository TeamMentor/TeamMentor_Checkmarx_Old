<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>2e90a9cd-9a19-4e9f-9a56-ba35de0a0e00</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1925 - R06 02 02 FloatingPt Equality Inequality Testing</Title>
    <Category>CWE: 10752</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10752</h1>
  <iframe height="500" src="/content/10752" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1925
Cwe : 10752
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* MISRA CPP RULE 6-2-2
 ------------------------------
 This query finds all floating point expressions that are tested for equality or inequality

 The following example shows what main code should look like: 


     float x,y;
	 if(x==y)          //non-compliant
     if(x!=0.0f)       //non-compliant
     if(x<_029_ non-compliant="" x="0.08f;" float="" _if28_0.01f="=0.01f)" _if28_2a_z="" _2a_z="&amp;x;">=y)         //non-compliant
     
     float * foo()
     { 
         some code
     }

     float bar()
     {
         some code
     } 
     if(*foo()==bar())  //non-compliant    

*/


//get all float typedefs: typedef float flt
CxList tr = All.FindByType(typeof(TypeRef));
CxList unrf = All.FindByType(typeof(UnknownReference));
CxList methodInv = All.FindByType(typeof(MethodInvokeExpr));

CxList typedefs = All.FindByName("CX_TYPEDEF").FindByType(typeof(StringLiteral));
CxList floatTypeDef = tr.GetByAncs(typedefs.GetAncOfType(typeof(FieldDecl))).FindByShortName("float");
CxList newName = floatTypeDef.GetAncOfType(typeof(FieldDecl));
CxList typedefDefinitions = All.NewCxList();
foreach(CxList nn in newName)
{
	CSharpGraph name = nn.data.GetByIndex(0) as CSharpGraph;
	if(name != null)
	{
		typedefDefinitions += tr.FindByShortName(name.ShortName);	
	}
}

//now we want to filter out all pointers from all non pointers
CxList allFloats = tr.FindByShortName("float") + typedefDefinitions;
CxList floatPointers = allFloats.FindByRegex(@"[^(]\s*\*\s*\w");
CxList fathers = floatPointers.GetFathers().FindByType(typeof(FieldDecl)) +
	floatPointers.GetFathers().FindByType(typeof(VariableDeclStmt));
CxList toRemove = tr.GetByAncs(fathers);

CxList floatNonPtrs = allFloats - floatPointers - toRemove;

//let's find all references to those
CxList floatVarNP = floatNonPtrs.GetFathers();
floatVarNP = floatVarNP.FindByType(typeof(ParamDecl)) +
	floatVarNP.FindByType(typeof(MethodDecl));
CxList avoidAllKids = floatNonPtrs.GetFathers() - All.FindByType(typeof(MethodDecl));

CxList toFindNP = All.FindByType(typeof(Declarator)).GetByAncs(avoidAllKids) + floatVarNP;
CxList potentialNP = (unrf + methodInv).FindAllReferences(toFindNP);

CxList floatVarP = floatPointers.GetFathers();
floatVarP = floatVarP.FindByType(typeof(ParamDecl)) +
	floatVarP.FindByType(typeof(MethodDecl));
avoidAllKids = floatPointers.GetFathers() - All.FindByType(typeof(MethodDecl));
CxList toFindP = All.FindByType(typeof(Declarator)).GetByAncs(avoidAllKids) + floatVarP;
CxList potentialP = (unrf + methodInv).FindAllReferences(toFindP);

potentialP -= potentialP.GetByAncs(potentialP.GetAncOfType(typeof(Param)));
potentialNP -= potentialNP.GetByAncs(potentialNP.GetAncOfType(typeof(Param)));
//now potentialP and potentialNP contains all references for us to test

CxList expressions = potentialNP.GetFathers();
CxList unaryEx = expressions.FindByType(typeof(UnaryExpr));

unaryEx = unaryEx.FindByShortName("Increment") + unaryEx.FindByShortName("Decrement");
expressions += unaryEx.GetFathers();
CxList expressionsNP = potentialP.GetFathers().FindByType(typeof(UnaryExpr));
expressions += expressionsNP.GetFathers();

CxList realNum = All.FindByType(typeof(RealLiteral));
realNum = realNum.FindByRegex(@"\df");
expressions += realNum.GetFathers();

result += expressions.GetByBinaryOperator(BinaryOperator.GreaterThan) +
	expressions.GetByBinaryOperator(BinaryOperator.LessThan) +
	expressions.GetByBinaryOperator(BinaryOperator.IdentityEquality) +
	expressions.GetByBinaryOperator(BinaryOperator.IdentityInequality) +
	expressions.GetByBinaryOperator(BinaryOperator.LessThanOrEqual) +
	expressions.GetByBinaryOperator(BinaryOperator.GreaterThanOrEqual);</_029_></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>