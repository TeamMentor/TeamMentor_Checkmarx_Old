<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>ac3c17b2-8f0a-48e6-9d1c-02a875e579fb</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>326 - Memory Leak</Title>
    <Category>CWE: 401</Category>
    <Phase>CPP Medium Threat</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  401</h1>
  <iframe height="500" src="/content/401" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 326
Cwe : 401
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 21
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList methodInvoke = Find_Methods();
CxList objectCreate = All.FindByType(typeof(ObjectCreateExpr));
CxList declarator = All.FindByType(typeof(Declarator));
declarator -= declarator.FindByRegex(@"\[");
CxList arrayCreate = All.FindByType(typeof(ArrayCreateExpr));
CxList New = (objectCreate + arrayCreate).FindByRegex(@"\Wnew\W");

CxList assign = All.FindByType(typeof(AssignExpr));
New = New.GetByAncs(declarator + assign);

CxList malloc = methodInvoke.FindByShortName("malloc");
CxList strdup = methodInvoke.FindByShortName("strdup");
CxList firstParam = All.GetParameters(malloc + strdup, 0);

CxList Free = Find_Memory_Deallocation();

CxList likeFree = methodInvoke.FindByShortName("push*");
likeFree += methodInvoke.FindByShortName("add*");
likeFree += methodInvoke.FindByShortName("set*");
likeFree += All.FindByType(typeof(ObjectCreateExpr));
Free = All.GetByAncs(All.GetParameters(Free, 0)) + All.GetByAncs(All.GetParameters(likeFree));

CxList Return = All.GetByAncs(All.FindByType(typeof(ReturnStmt)));
Free += Return;

CxList rightSide = All.GetByAncs(All.FindByAssignmentSide(CxList.AssignmentSide.Right));
rightSide -= rightSide.GetByAncs(methodInvoke);
Free += rightSide;

CxList allNew = All.FindByInitialization(New);
allNew += All.GetByAncs(New.GetFathers().FindByType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left);

CxList sprintf = All.FindByType(typeof(Reference)).GetByAncs(All.GetParameters
	(Find_All_snprintf() 
	+ methodInvoke.FindByShortName("asprintf")
	+ methodInvoke.FindByShortName("vsprintf")
	+ methodInvoke.FindByShortName("vasprintf")
	+ methodInvoke.FindByShortName("sprintf"), 0));

sprintf = sprintf.FindAllReferences(declarator.FindDefinition(sprintf));

allNew += sprintf;
CxList ms1 = (malloc + strdup).GetAncOfType(typeof(AssignExpr)) +
	(malloc + strdup).GetAncOfType(typeof(Declarator));

CxList ms2 = (malloc + strdup).GetAncOfType(typeof(MethodInvokeExpr)) - malloc - strdup;
allNew += All.GetByAncs(ms1 + ms2).FindByAssignmentSide(CxList.AssignmentSide.Left);
allNew = allNew.FindAllReferences(All.FindDefinition(allNew).FindByType(typeof(Declarator)));
CxList allReferencesFree = Free.FindAllReferences(allNew);

CxList methodDecl = All.FindByType(typeof(MethodDecl));
foreach(CxList curNew in allNew)
{
	CxList New_with_Delete = allReferencesFree.FindAllReferences(curNew);
	if(New_with_Delete.Count == 0)
	{
		result += curNew;
	}
	else
	{
		int origCount = New_with_Delete.Count;
		New_with_Delete = New_with_Delete.GetByAncs(New_with_Delete.GetAncOfType(typeof(IfStmt)));
		if ( New_with_Delete.Count == origCount)
		{
			foreach (CxList nWd in New_with_Delete)
			{
				CxList nWdIf = nWd.GetAncOfType(typeof(IfStmt));
				IfStmt ifS = nWdIf.data.GetByIndex(0) as IfStmt;
			
				StatementCollection t = ifS.TrueStatements;
				StatementCollection f = ifS.FalseStatements;
				CxList trueStmt = All.FindById(t.NodeId);
				CxList falseStmt = All.FindById(f.NodeId);
			
				if ((nWd.GetByAncs(trueStmt).Count &gt; 0)
					&amp;&amp;
					(New_with_Delete.GetByAncs(falseStmt).Count == 0)
					&amp;&amp;
					(curNew.GetByAncs(trueStmt).Count == 0))
				{
					result += curNew;
				}
				else if ((nWd.GetByAncs(falseStmt).Count &gt; 0)
					&amp;&amp;
					(New_with_Delete.GetByAncs(trueStmt).Count == 0)
					&amp;&amp;
					(curNew.GetByAncs(falseStmt).Count == 0))
				{
					result += curNew;
				}
			}
		}
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>