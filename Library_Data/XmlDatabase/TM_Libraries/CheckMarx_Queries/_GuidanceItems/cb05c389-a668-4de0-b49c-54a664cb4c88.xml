<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>cb05c389-a668-4de0-b49c-54a664cb4c88</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1423 - Find ActiveRecord Results</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>Ruby</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1423
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 1280
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> if (param.Length == 1)
{
	CxList activeRecord = param[0] as CxList;

	CxList methods = Find_Methods() + All.FindByType(typeof(MemberAccess));

	CxList activeRecordsMethods = methods.GetByAncs(activeRecord);
	activeRecordsMethods -= activeRecordsMethods.GetTargetOfMembers().GetMembersOfTarget();
	CxList potentials = activeRecordsMethods;

	CxList activeRecordsRef = All.FindAllReferences(activeRecord);
	activeRecordsRef = activeRecordsRef.GetMembersOfTarget();

	CxList allAndNew = 
		//activeRecordsRef.FindByShortName("all") + 
		activeRecordsRef.FindByShortName("new");
	activeRecordsRef -= allAndNew;
	
	CxList assign = allAndNew.GetAncOfType(typeof(AssignExpr));
	allAndNew = All * All.GetByAncs(assign).FindByAssignmentSide(CxList.AssignmentSide.Left).DataInfluencedBy(allAndNew);
	//result += allAndNew; // this is only DB In, not DB out

	activeRecordsRef += All.FindAllReferences(allAndNew);
	potentials += activeRecordsRef;
	
	CxList staticConnection = All.FindByMemberAccess("ActiveRecord.Base").GetMembersOfTarget().FindByShortName("connection");
	assign = staticConnection.GetAncOfType(typeof(AssignExpr));
	staticConnection = All.FindAllReferences(All.GetByAncs(assign).FindByAssignmentSide(CxList.AssignmentSide.Left)).DataInfluencedBy(staticConnection);
	potentials += staticConnection.GetMembersOfTarget();

	potentials = All * potentials;
	
	result += All.FindByMemberAccess("connection.execute");
	
	string[] dbCommands = new string[] {
		"find*",
		"first",
		"last",
		"all",
		"execute",
		"update",
		"scoped_by_*"	
		};

	foreach (string s in dbCommands)
	{
		result += potentials.FindByShortName(s);
	}
	
	result += Add_Second_Order_DB(result, dbCommands);

	result -= result.FindAllReferences(All.FindDefinition(result * methods));
}
/*
CxList newOne = All.DataInfluencedBy(All.GetByAncs(All.FindByType(typeof(ObjectCreateExpr))));
CxList newAssing = newOne.GetAncOfType(typeof(AssignExpr));
newOne = All.FindAllReferences(potentials).GetByAncs(newAssing).FindByAssignmentSide(CxList.AssignmentSide.Left);
newAssing = newOne.GetAncOfType(typeof(AssignExpr));
//result += All.GetByAncs(newAssing).FindByAssignmentSide(CxList.AssignmentSide.Right);
*/</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>