<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d241b6cb-7f20-4a66-b359-b8c6cf82dc11</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>472 - Integer Overflow</Title>
    <Category>CWE: 190</Category>
    <Phase>CSharp Medium Threat</Phase>
    <Technology>CSharp</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  190</h1>
  <iframe height="500" src="/content/190" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 472
Cwe : 190
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 28
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> return result;

CxList check = All.FindByType(typeof(CheckedStmt));
CxList num = All.FindByType("int");

CxList Integers_Inside_Check = All.GetByAncs(check) * num;
CxList Integers_Not_Iinside_Check = num - Integers_Inside_Check;
CxList inputs = Find_Interactive_Inputs() - num;

CxList sanitized = All.FindByMemberAccess(".Parse") + 
					All.FindByName("Convert.ToInt*") +
					All.FindByName(".*Convert.ToInt*") + 
					All.FindByName("*IndexOf") +
					All.FindByName("*Length")+ All.FindByType(typeof(IndexerRef)) +
					Find_DB();

result = Integers_Not_Iinside_Check.InfluencedByAndNotSanitized(inputs, sanitized);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>