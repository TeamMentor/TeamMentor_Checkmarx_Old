<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d74bb100-c37b-426a-863c-6e3cf416b269</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1256 - Dead Code</Title>
    <Category>CWE: 561</Category>
    <Phase>CPP Low Visibility</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  561</h1>
  <iframe height="500" src="/content/561" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1256
Cwe : 561
IsExecutable : false
IsEncrypted : false
Severity : 1
PackageId : 20
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> return result;
//	Dead Code
//  ---------
//  In this query we look for 2 things:
//  1. if (x) that calls if (!x).
//	2. if (false), while(false) (also 0 or NULL) ///// TODO
//	3. private classes that are never called.
///////////////////////////////////////////////////////////////////////

// Find all if statements
CxList IfStmts = All.FindByType(typeof(IfStmt));

// Find if statements conditions
CxList conditions = All.FindByFathers(IfStmts);
conditions = conditions.FindByType(typeof(Expression));

// Find negative conditions (if (!x))
CxList notConditions = conditions.FindByShortName("Not");
CxList yesConditions = conditions - conditions.FindByShortName("Not");
// Find the if statements of negative conditions
CxList negativeIf = notConditions.GetAncOfType(typeof(IfStmt));
CxList positiveIf = yesConditions.GetAncOfType(typeof(IfStmt));

// 1a. Look at if statements that contain "negative if" statements
CxList fatherIfStmts = notConditions.GetAncOfType(typeof(IfStmt)).GetFathers().GetAncOfType(typeof(IfStmt));

// The fathers are positive, let's look at their children
foreach (CxList fatherIfStmt in fatherIfStmts)
{	
	// Get all data inside the parent if condition (performance issue)
	CxList fatherIfInside = All.GetByAncs(fatherIfStmt);

	// Compare children condition with parent condition
	CxList childrenIfCondition = fatherIfInside.GetByAncs(fatherIfStmt) * notConditions;
	CxList insideChildCondition = fatherIfInside.GetByAncs(childrenIfCondition);
	insideChildCondition -= insideChildCondition.FindByShortName("NULL");
	insideChildCondition -= insideChildCondition.FindByShortName("true");
	insideChildCondition -= insideChildCondition.FindByShortName("false");
	CxList inFatherConditions = conditions.FindByFathers(fatherIfStmt);
	CxList references = fatherIfInside.FindAllReferences(insideChildCondition);
	CxList problem = fatherIfInside.GetByAncs(inFatherConditions) * references;

	// Return the relevant if statements
	result += problem.GetAncOfType(typeof(IfStmt));
}

// 1b. Look at if statements that contain "positive if" statements
fatherIfStmts = yesConditions.GetAncOfType(typeof(IfStmt)).GetFathers().GetAncOfType(typeof(IfStmt));

// The fathers are positive, let's look at their children
foreach (CxList fatherIfStmt in fatherIfStmts)
{	
	// Get all data inside the parent if condition (performance issue)
	CxList fatherIfInside = All.GetByAncs(fatherIfStmt);

	// Find all the children conditions
	CxList childrenIfCondition = fatherIfInside.GetByAncs(fatherIfStmt) * notConditions;
	
	// Compare children condition with parent condition
	CxList fatherIfCondition = fatherIfInside.GetByAncs(fatherIfStmt) * yesConditions;
	CxList insideFatherCondition = fatherIfInside.GetByAncs(fatherIfCondition);
	insideFatherCondition -= insideFatherCondition.FindByShortName("NULL");
	insideFatherCondition -= insideFatherCondition.FindByShortName("true");
	insideFatherCondition -= insideFatherCondition.FindByShortName("false");
	CxList inChildConditions = conditions.FindByFathers(fatherIfStmt);
	CxList references = fatherIfInside.FindAllReferences(insideFatherCondition);
	CxList problem = fatherIfInside.GetByAncs(inChildConditions) * references;

	// Return the relevant if statements
	result += problem.GetAncOfType(typeof(IfStmt));
	if (result.Count &gt; 0)
	{
		return fatherIfCondition;
	}
}



// 2. Check for unaccessed private functions
CxList privateFunctions = All.FindByFieldAttributes(Modifiers.Private).FindByType(typeof(MethodDecl));
privateFunctions -= privateFunctions.FindByShortName("main");

// Each private functions is checked to see if it's called.
foreach (CxList privateFunction in privateFunctions)
{
	//return All.FindByType(typeof(StatementCollection)).GetFathers() * Find_Methods();
	//	All.GetByMethod(privateFunction) - privateFunction;
	CxList references = All.FindAllReferences(privateFunctions) - privateFunctions;
	if (references.Count == 0)
	{
		result += privateFunction;
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>