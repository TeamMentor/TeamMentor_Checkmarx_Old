<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>2bc35ad7-5c6b-4dc3-b59d-b4d426518233</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>222 - Off by One Error in Arrays</Title>
    <Category>CWE: 193</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  193</h1>
  <iframe height="500" src="/content/193" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 222
Cwe : 193
IsExecutable : true
IsEncrypted : false
Severity : 3
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //	OffByOne - arrays
//  -----------------
//  Find all "sizeof"s in arrays that are not part of a binary expression.
//  These don't have the "-1" needed for the array size.
//	There are 2 types 	buf[sizeof(buf)]
//						buf += sizeof(buf)
///////////////////////////////////////////////////////////////////////

// Find all arrays
CxList indx = All.FindByType(typeof(IndexerRef));

// Get the "sizeof" methods in this array index
CxList sizeofMethods = Find_Methods().FindByName("sizeof");
CxList sizeofList = sizeofMethods.GetByAncs(indx);

// Return the "sizeof"s that are not part of a binary expression
sizeofList -= All.GetByAncs(sizeofList.GetFathers().FindByType(typeof(BinaryExpr)));

// Check each sizeof element, to see it "qualifies"
CxList parameters = All.GetParameters(sizeofList);
foreach(CxList sizeofElement in sizeofList)
{
	// Find the array itself (indexer ref)
	indx = sizeofElement.GetAncOfType(typeof(IndexerRef));
	// Get the parameters of the element
	CxList param1 = parameters.GetParameters(sizeofElement);
	// Get the relevant graph, so we can check its type
	CSharpGraph p = param1.data.GetByIndex(0) as CSharpGraph;
	// See if the array differs from the parameter
	if (indx.FindByShortName(p.ShortName).Count &gt; 0)
	{
		result += sizeofElement;
	}
}

// Get right side of assignments that is actually sizeof
CxList rightSide = sizeofMethods.FindByAssignmentSide(CxList.AssignmentSide.Right);
// Check each sizeof element, to see it "qualifies"
parameters = All.GetParameters(rightSide);
foreach (CxList rightElement in rightSide)
{	
	// Find the sizeof parameter
	CxList param2 = parameters.GetParameters(rightElement);
	// Get the relevant graph, so we can check its type
	CSharpGraph p = param2.data.GetByIndex(0) as CSharpGraph;
	// Find the left side of the assignment
	CxList leftElement = All.GetByAncs(rightElement.GetFathers());
	leftElement = leftElement.FindByAssignmentSide(CxList.AssignmentSide.Left);
	// See if the array differs from the parameter
	if (leftElement.FindByShortName(p.ShortName).Count &gt; 0)
	{
		result += rightElement;
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>