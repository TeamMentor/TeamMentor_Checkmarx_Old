<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>703d49fe-cfa3-4c21-be6a-d15dae90c472</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1832 - R08 07 Block Scope Obj If Used By Single Function</Title>
    <Category>CWE: 11020</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11020</h1>
  <iframe height="500" src="/content/11020" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1832
Cwe : 11020
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 8-7
------------------------------
This query searches for variables with file scope only used by a single function

	The Example below shows code with vulnerability:

int a;	// this should not be global 
int b; 
void foo(){
	b = a + 5;
}
void doo(){
	b = 6;
}

*/

CxList vars = All.FindByType(typeof(Declarator));
vars -= All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF").GetFathers();
CxList classes = All.FindByType(typeof(ClassDecl));
classes -= classes.FindByShortName("checkmarx_default_classname*");
CxList atBlockScope = vars.GetByAncs(All.FindByType(typeof(StatementCollection)) 
	+ classes + All.FindByType(typeof(StructDecl)));
CxList globalVars = vars - atBlockScope;
CxList globalVarUses = All.FindAllReferences(globalVars).FindByType(typeof(UnknownReference));

foreach(CxList cur in globalVars){
	CxList curVarUses = globalVarUses.FindAllReferences(cur);
	
	// Check there are uses in only one (or less) function
	if (curVarUses.GetAncOfType(typeof(MethodDecl)).Count <_3d_ result="" _129_7b_="" _2b_="cur;" _7d_=""></_3d_></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>