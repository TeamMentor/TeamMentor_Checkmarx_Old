<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>5aceaae7-2d8c-4666-b2ac-1a9a748c3eab</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1882 - R20 12 Using Time Handling From Time H</Title>
    <Category>CWE: 11070</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11070</h1>
  <iframe height="500" src="/content/11070" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1882
Cwe : 11070
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 20-12
------------------------------
This query searches for usage of of the time handling facilities of <time.h>

	The Example below shows code with vulnerability: 

#include <time.h>

time_t     myTime;

*/


// Safety check for the violating h file
// (it is also a violation in itself)
CxList includes = All.FindByType(typeof(StringLiteral)).GetParameters(Find_Methods()
	.FindByShortName("CX_INCL"));
CxList hFile = includes.FindByShortName("time.h");
if (hFile.Count == 0)
	return hFile;

// The functions defined by time.h
CxList methodInvokes = All.FindByType(typeof(MethodInvokeExpr));

//Time manipulation:
result += methodInvokes.FindByShortName("clock") +
	methodInvokes.FindByShortName("difftime") +
	methodInvokes.FindByShortName("mktime") +
	methodInvokes.FindByShortName("time") +
//Conversion:
	methodInvokes.FindByShortName("asctime") +
	methodInvokes.FindByShortName("ctime") +
	methodInvokes.FindByShortName("gmtime") +
	methodInvokes.FindByShortName("localtime") +
	methodInvokes.FindByShortName("strftime");

// The macros defined by time.h
result += All.FindByShortName("NULL") +
	All.FindByShortName("CLOCKS_PER_SEC");

// Remove all locally defined instances
CxList defs = All.FindDefinition(result);
result -= result.FindAllReferences(defs);

// the include
result += hFile;

// The types
result += All.FindByType(typeof(TypeRef)).FindByShortName("clock_t") +
	All.FindByType(typeof(TypeRef)).FindByShortName("size_t") +
	All.FindByType(typeof(TypeRef)).FindByShortName("time_t") +
	All.FindByType(typeof(TypeRef)).FindByRegex("struct tm");
// struct tm members
CxList memberAccess = All.FindByType(typeof(MemberAccess));
result+= memberAccess.FindByRegex("tm_sec;") +
	memberAccess.FindByRegex("tm_min") +
	memberAccess.FindByRegex("tm_hour") +
	memberAccess.FindByRegex("tm_mday") +
	memberAccess.FindByRegex("tm_mon") +
	memberAccess.FindByRegex("tm_year") +
	memberAccess.FindByRegex("tm_wday") +
	memberAccess.FindByRegex("tm_yday") +
	memberAccess.FindByRegex("tm_yday") +
	memberAccess.FindByRegex("tm");</time.h></time.h></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>