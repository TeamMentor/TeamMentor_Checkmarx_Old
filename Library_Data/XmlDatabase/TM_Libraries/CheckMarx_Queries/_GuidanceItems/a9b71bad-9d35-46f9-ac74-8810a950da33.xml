<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>a9b71bad-9d35-46f9-ac74-8810a950da33</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1888 - R02 13 01 Non ISO Escapes</Title>
    <Category>CWE: 10813</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10813</h1>
  <iframe height="500" src="/content/10813" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1888
Cwe : 10813
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA CPP RULE 2-13-1
------------------------------
This query searches for usage of escape sequences not defined in the ISO C++ standard

	The Example below shows code with vulnerability: 

use_char('\c');

*/

result = All.FindByName("*\x0127*").FindByType(typeof(CharLiteral));
result -= All.FindByType(typeof(CharLiteral)).FindByRegex(@"\\x",false,false,false);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>