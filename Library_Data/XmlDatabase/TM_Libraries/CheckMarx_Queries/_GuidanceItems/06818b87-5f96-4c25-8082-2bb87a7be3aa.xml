<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>06818b87-5f96-4c25-8082-2bb87a7be3aa</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1865 - R16 09 Using Function Identifier Not Call Or Pointer</Title>
    <Category>CWE: 11053</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11053</h1>
  <iframe height="500" src="/content/11053" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1865
Cwe : 11053
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 16-9
------------------------------
This query searches for function identifiers not followed by parenthesised parameter list or preceded by '&amp;'

	The Example below shows code with vulnerability: 

int foo();
int boo();

if (foo == boo){
...
}

*/

CxList methodDecls = All.FindByType(typeof(MethodDecl));
CxList addresses = All.FindByType(typeof(UnaryExpr)).FindByName("Address");
CxList references = All.FindByType(typeof(UnknownReference)).FindAllReferences(methodDecls);
references -= references.FindByFathers(references.GetFathers().FindByShortName("Address"));
result = references;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>