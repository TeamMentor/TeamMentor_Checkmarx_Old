<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>966b53db-1dea-4c82-80ec-cd4cecd02419</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>624 - Use of Native Language</Title>
    <Category>CWE: 111</Category>
    <Phase>Java Medium Threat</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  111</h1>
  <iframe height="500" src="/content/111" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 624
Cwe : 111
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 37
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> // In this query we find uses of external code without verification at all, which can lead to buffer overflow.

CxList inputs = Find_Interactive_Inputs();
CxList methods = Find_Methods();

// Find "length" methods
CxList len = methods.FindByShortName("length");

// Find all methodswith "native" attribute - calls to external methods
CxList externalMethodCalls = All.FindByFieldAttributes(Modifiers.Extern).FindByType(typeof(MethodDecl));
externalMethodCalls = methods.FindAllReferences(externalMethodCalls);
// Find their parameters, and remove length
CxList externalMethodParams = All.GetParameters(externalMethodCalls);
externalMethodParams = All.GetByAncs(externalMethodParams);
CxList paramsLen = externalMethodParams * len;
paramsLen += paramsLen.GetTargetOfMembers();
paramsLen += paramsLen.GetTargetOfMembers();
externalMethodParams -= paramsLen;

// Look only at the parameters that do not have an "if" check which checks their content
CxList potentialProblems = externalMethodParams;
// Loop on all parameters
foreach (CxList methodParam in externalMethodParams)
{
	try
	{
		// Look at the relevant "if" statement
		CxList ifStmt = methodParam.GetAncOfType(typeof(IfStmt));
		if (ifStmt.Count &gt; 0)
		{	// If there is such an "if" statement
			IfStmt stmt = ifStmt.data.GetByIndex(0) as IfStmt;
			
			//See if the condition includes a reference to the parameter we are checking
			CxList ifCondition = All.FindById(stmt.Condition.NodeId);
			ifCondition = All.GetByAncs(ifCondition);
			if (ifCondition.FindAllReferences(methodParam).Count &gt; 0)
			{
				// If so remove it from the potential list
				potentialProblems -= methodParam;
			}
		}
	}
	catch(Exception ex)
	{
		// Just in case we get an unexpected exception
	}
}

// Parameters that are affected by the input
result = potentialProblems.DataInfluencedBy(inputs);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>