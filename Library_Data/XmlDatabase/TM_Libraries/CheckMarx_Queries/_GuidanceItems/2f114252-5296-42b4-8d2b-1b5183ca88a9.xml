<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>2f114252-5296-42b4-8d2b-1b5183ca88a9</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1641 - Divide By Zero</Title>
    <Category>CWE: 369</Category>
    <Phase>Java Low Visibility</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  369</h1>
  <iframe height="500" src="/content/369" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1641
Cwe : 369
IsExecutable : true
IsEncrypted : false
Severity : 1
PackageId : 36
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> // Direct division by zero

// dead code
CxList deadCode = Find_Dead_Code_Contents();

// Find all zeros. They are inserted to suspiction list 
// because each zero may be part of x/0 calculation
CxList zero = All.FindByName("0").FindByType(typeof(IntegerLiteral));	// Random (2)
zero -= deadCode;

CxList bin = All.FindByType(typeof(BinaryExpr));

// "call" to any array index, like : a[1]
CxList indexer = All.FindByType(typeof(IndexerRef));

// The "UnknownReference" type returns the any type of variables, not methods call fro example, or
// any refference to array, but variables
CxList unknown = All.FindByType(typeof(UnknownReference));
unknown -= deadCode;

// We can be apply method by following way
//			for(int i = 0; i nChildren() ; i++) {
//					SGPropertyNode * acloud = layer_def-&gt;getChild(i);
// Note, that i has value 0, but method that applied is getChiled(i)
// so this cases should be removed as well, in order to prevent false positive cases
// we need to take care very carifully. 
// One one hand if we will remove ALL methods from suspiction list, we can remove right cases like
//		int f(int p){
//			return 0;
//		}
//So just methods that there deffinition is not declared will be removed from the list

// find all methods
CxList methods = Find_Methods();

// find methods defenitins
CxList metDefinitions = All.FindDefinition(methods);
// remove from the methods list that will be sanitisers, methods calls that have definitions
// so just methods appling without difinition is stay in sanitize list
// reason: we do not know if this method realy returs zero, so in order to avoid false positive
// we assume that it not returns zero
methods -= methods.FindAllReferences(metDefinitions);

CxList cond = unknown * All.GetByAncs(Find_Conditions());

CxList sanitize = bin + indexer + methods;

// the potential divide by zero is path from zero to variable that not passed throw sanitize plus zero list
// In general, potentialDiv can include the expression like 0/5, because 0 in the zero list
// To resolve it, the IF statement below will take just right side in consadiration
//CxList potentialDiv = unknown * unknown.InfluencedByAndNotSanitized(zero, sanitize) + zero;
CxList divBin = All.NewCxList();
foreach (CxList b in bin)
{
	try
	{
		BinaryExpr g = b.data.GetByIndex(0) as BinaryExpr;
		if (g != null &amp;&amp; 
			(g.Operator == BinaryOperator.Divide || g.Operator == BinaryOperator.Modulus))
		{		
			divBin += b;
		}
	}
	catch (Exception ex)
	{
	}
}

CxList unknownIndiv = unknown.GetByAncs(divBin);
CxList potentialDiv = unknownIndiv * unknownIndiv.InfluencedByAndNotSanitized(zero, sanitize) + zero;

potentialDiv = potentialDiv.FindByFathers(divBin);

	// The potential Bin is object of the DOM type "Binary Expression"
CxList potentialBin = potentialDiv.GetFathers();
CxList conditions = cond.FindAllReferences(potentialDiv);

CxList divWithoutIf = All.NewCxList();	// All the divs that are not in an "if" statement
foreach (CxList b in potentialBin)
{
	try
	{
		BinaryExpr g = b.data.GetByIndex(0) as BinaryExpr;
		if (g != null &amp;&amp; 
			(g.Operator == BinaryOperator.Divide || g.Operator == BinaryOperator.Modulus))
		{		
			Expression right = g.Right;
			if (right != null)
			{
				// We are under BinaryOperator.Divide/Modulus if statement , just x/y expression took in considiration
				// where x and y are Expressions type in DOM. In case the binary expression will be in format
				// x/(a+b) the right side will be a+b. and nodeId of "+" will be returned. In any case 
				// potential variable below will point to the right side expression NodeId
				CxList potential = potentialDiv.FindById(right.NodeId);
					
				//the if below hanlde x/0 cases
				if (potential.FindByName("0").Count == 1)
				{
					result += potential;
				}
				else
				{
					int len = right.Text.IndexOf(" Inst#");
					if (len &gt;= 0)
					{
						string text = right.Text.Substring(0, len);							
						text = text.Substring(text.LastIndexOf(".") + 1);
						CxList d = potentialDiv.FindByFathers(b);
						if (d.FindByShortName(text).Count == 1)
						{
							CxList ifStmtCheck = conditions.FindAllReferences(potential).GetAncOfType(typeof(IfStmt));
							ifStmtCheck = potential.GetByAncs(ifStmtCheck);
							if (ifStmtCheck.Count == 0)
							{			
								divWithoutIf += potential;
							}
						}
					} 
				}
			}
		}
		
	}
	catch
	{
		// just in case we haven't found some exception
	}
}
result += zero.InfluencingOnAndNotSanitized(divWithoutIf, sanitize);


// Division by input or Random
CxList inputs = Find_Inputs() + // input
	All.FindByMemberAccess("Random.next*") + // Random (1)
	All.FindByMemberAccess("Math.random") +
	Get_ESAPI().FindByMemberAccess("Randomizer.*"); // ESAPI
inputs -= deadCode;

potentialBin = All.NewCxList();
foreach (CxList b in bin)
{
	try
	{
		BinaryExpr g = b.data.GetByIndex(0) as BinaryExpr;
		if (g != null &amp;&amp; 
			(g.Operator == BinaryOperator.Divide || g.Operator == BinaryOperator.Modulus))
		{
			potentialBin += b;
		}
	}
	catch (Exception ex)
	{
	}
}

potentialDiv = unknown * unknown.GetByAncs(potentialBin).DataInfluencedBy(inputs);
conditions = cond.FindAllReferences(potentialDiv);

divWithoutIf = All.NewCxList();
foreach (CxList b in potentialBin)
{
	try
	{
		BinaryExpr g = b.data.GetByIndex(0) as BinaryExpr;
		if (g != null &amp;&amp; g.Right != null)
		{
			CxList gRight = All.FindById(g.Right.NodeId);
			CxList div = potentialDiv.GetByAncs(gRight);
			CxList ifStmtCheck = conditions.FindAllReferences(div).GetAncOfType(typeof(IfStmt));
			foreach (CxList d in div)
			{
				CxList specificIfStmtCheck = d.GetByAncs(ifStmtCheck);
				if (specificIfStmtCheck.Count == 0)
				{
					divWithoutIf += d;
				}
			}
		}
	}
	catch (Exception ex)
	{
		// just in case we haven't found some exception
	}
}
result += inputs.DataInfluencingOn(divWithoutIf);

result -= Find_Dead_Code_Contents();</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>