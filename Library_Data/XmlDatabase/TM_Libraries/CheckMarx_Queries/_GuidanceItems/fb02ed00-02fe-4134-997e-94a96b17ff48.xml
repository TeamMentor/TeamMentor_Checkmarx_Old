<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>fb02ed00-02fe-4134-997e-94a96b17ff48</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1979 - Find Zend Sanitize</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>PHP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1979
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 1271
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //every Zend application contains a Bootstrap class which extends Zend_Application_Bootstrap
CxList trc = All.FindByType(typeof(TypeRefCollection));
CxList extend = All.FindByType(typeof(TypeRef)).GetByAncs(trc);
CxList extendZend = extend.FindByShortName("*Zend*");

if (extendZend.Count == 0){
	return result;
}

//Zend sanitizers
CxList getValuesMethod = Find_Methods().FindByShortName("getValue*") + 
	Find_Methods().FindByShortName("getUnfilteredValue*");


CxList db = Find_Zend_DB_In();

CxList getValidValueMethod = Find_Methods().FindByShortName("getValidValue*");
CxList isValidMethods = Find_Methods().FindByShortName("isValid");
CxList filter = Find_Methods().FindByShortName("filter");
CxList escape = Find_Methods().FindByShortName("escape");

CxList ifStmt = (All.FindByType(typeof(IfStmt)));
CxList exp = All.FindByType(typeof(Expression));
CxList isValidMethodAsCond = isValidMethods.GetByAncs(exp.FindByFathers(ifStmt));

CxList relevantIfStmt = isValidMethodAsCond.GetAncOfType(typeof(IfStmt));

CxList getValuesMethodInRelevantIf = new CxList();
CxList obj = new CxList();
CxList temp = new CxList();



foreach (CxList singleIf in relevantIfStmt)
{
	obj = isValidMethods.GetByAncs(exp.FindByFathers(singleIf)).GetTargetOfMembers();
	temp = getValuesMethod.GetByAncs(All.FindByFathers(singleIf)).GetTargetOfMembers();
	if (temp.FindAllReferences(obj).Count &gt; 0)
	{
		getValuesMethodInRelevantIf += getValuesMethod.GetByAncs(All.FindByFathers(singleIf));
	}
}


// Not is valid 
CxList isNOTValidMethodAsCond = isValidMethodAsCond.GetByAncs(All.FindByShortName("Not").FindByType(typeof(UnaryExpr)));
CxList funcDeclWithNOTValidMethodAsCond = isNOTValidMethodAsCond.GetAncOfType(typeof(MethodDecl));


CxList sanitizedDB=(All.DataInfluencingOn(db)).GetByAncs(relevantIfStmt - isNOTValidMethodAsCond.GetAncOfType(typeof(IfStmt)) - getValuesMethod.GetAncOfType(typeof(IfStmt)));

result = getValuesMethodInRelevantIf + getValuesMethod.GetByAncs(funcDeclWithNOTValidMethodAsCond) - getValuesMethod.GetByAncs(isNOTValidMethodAsCond.GetAncOfType(typeof(IfStmt))) + 
	getValidValueMethod + 
	filter + 
	escape + sanitizedDB;


//Zend DB sanitizers:


CxList methods = Find_Methods();
CxList methodsParams = All.GetParameters(methods);

//Zend_Db_Adapter
CxList directDbMethods = 
	methods.FindByShortName("delete") + //internally quote params
	methods.FindByShortName("insert") + //insert is sanitized because it internally uses prepared statements
	methods.FindByShortName("lastInsertId") + //safely implemented in Oracle, DB2, PostgreSQL. 
	methods.FindByShortName("lastSequenceId") +	
	methods.FindByShortName("nextSequenceId") +
	methods.FindByShortName("quote") +
	methods.FindByShortName("quoteColumnAs") +
	methods.FindByShortName("quoteIdentifier") +
	methods.FindByShortName("quoteInto") +
	methods.FindByShortName("quoteTableAs") +
	methods.FindByShortName("update");//internally quote params
	
//Zend_Db_Select
directDbMethods += 
	methods.FindByShortName("bind");


//Zend_Db_Statement
directDbMethods += 
	methods.FindByShortName("bindColumn") + 
	methods.FindByShortName("bindParam") + 
	methods.FindByShortName("bindValue") +
	methods.FindByShortName("execute"); //execute is sanitized beacuase is binded to prepared statement


//invulnerable parameters in ambiguous functions

CxList invulnerableParam = 
	
	methodsParams.GetParameters(methods.FindByShortName("limit"), 1) +  
	methodsParams.GetParameters(methods.FindByShortName("limit"), 2) +
	methodsParams.GetParameters(methods.FindByShortName("query"), 1);



result += directDbMethods + invulnerableParam;
//result = All * result;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>