<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>8b8582ef-7a32-46f7-a7a2-c6f9b0c11b4e</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1883 - R00 01 03 Find Unused Variables</Title>
    <Category>CWE: 10775</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10775</h1>
  <iframe height="500" src="/content/10775" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1883
Cwe : 10775
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 0-1-3
 ------------------------------
 The purpose of the query to find variables that are defined or defined and initilized but never used.

 The Example below shows code with vulnerability: 

	int main() 
	{
		int i = 3; 		//Non-compliant
	}

*/

// Find All declarators: it may be a local variables, global variables or structurs
CxList varsDecl = All.FindByType(typeof(Declarator));

// The approach :All.GetByAncs(All.FindByType(typeof(FieldDecl))) tooks al childs of FiledDeck that is global variables
// and remove it from the Decl list
// 
varsDecl = varsDecl - All.GetByAncs(All.FindByType(typeof(FieldDecl)));

CxList allVariablesUsining = All.FindAllReferences(varsDecl).FindByType(typeof(UnknownReference));

result = varsDecl - varsDecl.FindDefinition(allVariablesUsining);

//Remove typedefs
CxList typedefs = All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF");
typedefs = typedefs.GetAncOfType(typeof(VariableDeclStmt))
	+ typedefs.GetAncOfType(typeof(FieldDecl));
typedefs = All.GetByAncs(typedefs).FindByType(typeof(Declarator));

//Remove gotos 
CxList gotos = All.FindByFathers(All.FindByType(typeof(Declarator)));
gotos = gotos.FindByName("goto").GetFathers();

result -= typedefs + gotos;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>