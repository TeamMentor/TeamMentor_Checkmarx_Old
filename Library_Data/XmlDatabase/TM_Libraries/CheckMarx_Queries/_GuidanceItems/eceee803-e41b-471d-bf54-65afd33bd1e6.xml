<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>eceee803-e41b-471d-bf54-65afd33bd1e6</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1028 - Frame Spoofing</Title>
    <Category>CWE: 10504</Category>
    <Phase>Apex Force com Serious Security Risk</Phase>
    <Technology>Apex</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10504</h1>
  <iframe height="500" src="/content/10504" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1028
Cwe : 10504
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 1003
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList inputs = Find_Interactive_Inputs() - Find_Url_Current_Page();
CxList iframe = Find_VF_Pages().FindByMemberAccess("iframe.src");
iframe = Find_VF_Pages().GetByAncs(iframe) - iframe;

CxList sanitize = Find_Integers() + Find_Id_Sanitizers() + Find_Test_Code() + Find_NonLeft_Binary(iframe);

result = Find_VF_O().InfluencedByAndNotSanitized(iframe, sanitize).InfluencedByAndNotSanitized(inputs, sanitize);

result -= Find_Test_Code();</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>