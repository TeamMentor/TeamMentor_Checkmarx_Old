<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>f1442a7d-731b-4d49-be2b-dcc4db671285</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1894 - R04 10 02 Literal Zero As Null Pointer Constant</Title>
    <Category>CWE: 10801</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10801</h1>
  <iframe height="500" src="/content/10801" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1894
Cwe : 10801
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 4-10-2
 ------------------
  Literal zero (0) shall not be used as null-pointer-constant.
  
  The Example below shows code with vulnerability: 

 				#include <cstddef>
				void f1 (int a);
				void f2 (int * a);
				void f3 ()
				{
					f1 (0) //Compliant
					f2 (0) //Non-compliant
				}

*/
CxList methodDecl = All.FindByType(typeof(MethodDecl));

CxList paramDecl = All.FindByType(typeof(ParamDecl));
CxList tr = All.FindByType(typeof(TypeRef));
CxList ptr = All.FindByRegex(@"([^(]\s*(\*\s*)+\w)+?");
CxList pdc = All.FindByFathers(ptr.FindByType(typeof(ParamDeclCollection)));
CxList theMeth = pdc.GetAncOfType(typeof(MethodDecl));
CxList pointers = ptr * (paramDecl + tr);
pointers = paramDecl.GetParameters(theMeth, 0) + (pointers.FindByType(typeof(TypeRef)).GetAncOfType(typeof(ParamDecl)) + (pointers * paramDecl));
CxList mtd = pointers.GetAncOfType(typeof(MethodDecl));

CxList methInv = All.FindByType(typeof(MethodInvokeExpr));
CxList zero = All.FindByShortName("0").FindByType(typeof(IntegerLiteral));




int i = 0;
CxList solution = All.NewCxList();
foreach(CxList metDecl in mtd){
	CxList prm = paramDecl.GetParameters(metDecl);
	foreach(CxList paramm in prm){		
		CSharpGraph g = paramm.data.GetByIndex(0) as CSharpGraph;
		if (pointers.FindById(g.NodeId).Count &gt; 0)
		{				
			CxList reff = methInv.FindAllReferences(metDecl);
			foreach (CxList invoke in reff){
				if (zero.GetParameters(invoke, i).Count &gt; 0){
				
					solution += prm.GetParameters(mtd.FindDefinition(invoke), i);
					
				}
			}
		}
		i++;
	}
	i = 0;
}
result = All.FindByType(typeof(TypeRef)).GetByAncs(solution);</cstddef></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>