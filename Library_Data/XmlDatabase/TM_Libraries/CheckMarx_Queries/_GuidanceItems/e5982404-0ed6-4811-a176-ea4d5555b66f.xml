<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>e5982404-0ed6-4811-a176-ea4d5555b66f</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1730 - Find DB EF</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>CSharp</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1730
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 24
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> // The purpose of the query is to found 
// All database access in Entity Framework (EF)

// The access to the database may be performed in different way

// The line below applys Where method
// Car car = db.Cars.Where(p =&gt; p.Model == "323").First();
//
// The line below applys Select method
// String Model = db.Cars.Select(c =&gt; c.Model).Where(c1 =&gt; c1 == "999").First();
//
// The line below allows get the first car in the car list
// Car car3 = db.Cars.ElementAt(0);
//
// The code below go over all cars in DB
// IEnumerable<car> res = db.Cars;
// foreach (Car c in res)
// {
//      Console.WriteLine(c.Model);         
// }

// All access to DB - read and write will be detected by the query
// ---------------------------------------------------------------
// In EF model.designer object auto-generated and includes ObjectQuery property 
// as listed below

// public global::System.Data.Objects.ObjectQuery<car> Cars {
//    get {            
//          this._Cars = base.CreateQuery<car>("[Cars]");               
//          return this._Cars;
//      }
// }
CxList typeOfObjectQuery = All.FindByType("ObjectQuery");
CxList propertyDeclaration = All.FindByType(typeof(PropertyDecl)) * typeOfObjectQuery.GetFathers();

// Find all DB access
CxList dbRead = All.FindAllReferences(propertyDeclaration) - propertyDeclaration - All.FindAllReferences(propertyDeclaration).FindByType(typeof(TypeRef));

// The code below deal with following pattern:
//
// SampleDBEntities db;
// db = new SampleDBEntities();

CxList methods = Find_Methods();
CxList ef = All.InheritsFrom("ObjectContext") + All.FindByType("ObjectContext");
CxList efRef = All.FindAllReferences(ef);
CxList dbDecl = efRef.GetFathers().GetFathers().FindByType(typeof(Declarator));
CxList dbRef = All.FindAllReferences(dbDecl);

CxList createExpr = All.FindByType(typeof(ObjectCreateExpr));
CxList relevantCreateExpr = new CxList();

foreach(CxList single in ef)
{
	CSharpGraph create = single.data.GetByIndex(0) as CSharpGraph;
	relevantCreateExpr+=  createExpr.FindByType(create.FullName);
}

// dbVar below is for : db = new SampleDBEntities();
CxList dbVar =  All.GetByAncs(relevantCreateExpr.GetAncOfType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left);
dbRef += All.FindAllReferences(dbVar);
CxList dbSave = dbRef.GetMembersOfTarget().FindByShortName("SaveChanges") + ef.GetMembersOfTarget().FindByShortName("AddObject");

result = dbRead + dbSave;</car></car></car></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>