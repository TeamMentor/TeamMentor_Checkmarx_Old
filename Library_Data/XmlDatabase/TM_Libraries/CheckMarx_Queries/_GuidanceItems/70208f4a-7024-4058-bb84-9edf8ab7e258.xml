<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>70208f4a-7024-4058-bb84-9edf8ab7e258</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1936 - R09 06 03 Enum Bit Fields</Title>
    <Category>CWE: 10810</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10810</h1>
  <iframe height="500" src="/content/10810" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1936
Cwe : 10810
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA CPP RULE 9-6-3
------------------------------
This query searches for bit fields of type enum

	The Example below shows code with vulnerability: 

		struct a
        {
            enum temp{x,y,z};
            temp bf:1;          //non-compliant
        }

*/

CxList decls=All.FindByType(typeof(FieldDecl));
CxList tr = All.FindByType(typeof(TypeRef));
CxList enumDecls= All.FindByType(typeof(ClassDecl)).GetClass(All.FindByType(typeof(EnumMemberDecl)));
CxList potentialBitFields = tr.FindAllReferences(enumDecls).GetFathers()*decls;

result = potentialBitFields.FindByRegex(@"[\}|\w]+?\s*?:\s*?\d+?\s*?;", false, false,false);
return result;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>