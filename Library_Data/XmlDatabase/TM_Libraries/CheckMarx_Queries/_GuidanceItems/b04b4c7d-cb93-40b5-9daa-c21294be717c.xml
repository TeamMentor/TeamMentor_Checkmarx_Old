<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>b04b4c7d-cb93-40b5-9daa-c21294be717c</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>294 - Integer Overflow</Title>
    <Category>CWE: 190</Category>
    <Phase>CPP Integer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  190</h1>
  <iframe height="500" src="/content/190" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 294
Cwe : 190
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 19
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList smallTypeList = Find_Builtin_Types().FindByType("int");
CxList bigTypeList = Find_Builtin_Types().FindByType("double") +
	Find_Builtin_Types().FindByType("float") + 
	Find_Builtin_Types().FindByType("long");

CxList sanitized = Sanitize_Integer_Overflow();

smallTypeList = smallTypeList.FindByAssignmentSide(CxList.AssignmentSide.Left)*smallTypeList;
CxList assignments = smallTypeList.GetAncOfType(typeof(AssignExpr));
CxList declarators = smallTypeList.GetAncOfType(typeof(Declarator));

CxList rSide = Get_Right_Assignment()*bigTypeList;
CxList sanitizedRSide = rSide - sanitized; 

CxList directResults = sanitizedRSide.GetAncOfType(typeof(AssignExpr))*assignments +
	sanitizedRSide.GetAncOfType(typeof(Declarator))*declarators;

CxList indirectResults = sanitizedRSide.FindByAssignmentSide(CxList.AssignmentSide.Left).GetAncOfType(typeof(AssignExpr)).GetFathers().GetAncOfType(typeof(AssignExpr));
indirectResults *= assignments;

result += directResults + indirectResults;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>