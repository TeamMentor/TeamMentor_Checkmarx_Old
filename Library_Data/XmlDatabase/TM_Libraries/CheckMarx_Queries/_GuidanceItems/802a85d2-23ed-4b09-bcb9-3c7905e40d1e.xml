<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>802a85d2-23ed-4b09-bcb9-3c7905e40d1e</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1886 - R00 01 11 Find Unused Parameters</Title>
    <Category>CWE: 10778</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10778</h1>
  <iframe height="500" src="/content/10778" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1886
Cwe : 10778
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 0-1-11
 ------------------------------
 This query searches for unused parameters in non-virtual functions. Where unnamed parameters in callback
 functions are tolerated.
 
 The Example below shows code with vulnerability: 

      typedef int ( * CallbackFn) (int a, int b);
		int Callback_1(int a, int b) { //Compliant
			return a + b;
		}
		int Callback_2(int a, int b) { //Non-compliant
			return a;
		}
		int Callback_3(int, int b) {   //Compliant by exception
			return b;
		}
		void Dispatch (int n,
	    			   int a,
					   int b,
					   int c, //Non-compliant
					   int) { //Non-compliant if Dispatch is not a callback.
			CallbackFn pFn;
			switch (n) {
				case 0: pFn = &amp;Callback_1; break;
				case 1: pFn = &amp;Callback_2; break;
				default: pFn = &amp;Callback_3; break;                        
			}
			( *pFn)(a, b);
		}

*/

CxList methods = All.FindByType(typeof(MethodDecl));
methods -= methods.FindByFieldAttributes(Modifiers.Virtual);
//Remove prototype methods
methods = All.FindByFathers(methods).FindByType(typeof(StatementCollection)).GetFathers();

CxList methParams = All.GetParameters(methods);
//Remove used parameters
methParams -= All.FindDefinition(All.FindAllReferences(methParams) - methParams);
methParams -= methParams.FindByShortName(""); //remove (void) type params

//Find callback methods
methods = methParams.GetAncOfType(typeof(MethodDecl));
CxList allRefs = All.FindAllReferences(methods) - methods;
CxList addressedMethodRefs = All.FindAllReferences(methods).GetFathers().FindByType(typeof(UnaryExpr));
addressedMethodRefs = All.FindByFathers(addressedMethodRefs.FindByName("Address"));

foreach (CxList curr in methods) {
	CxList refs = allRefs.FindAllReferences(curr);
	CxList cut = refs * addressedMethodRefs;
	if (cut.Count &gt; 0 ) {//curr is a callback method, find unnamed params
		CxList currParams = methParams.GetParameters(curr);
		methParams -= currParams.FindByShortName("");
	}
}
result = methParams;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>