<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>540b447b-7cbe-4546-b863-299f33a3f2f6</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1875 - R20 05 Using Errno Indicator From Errno H</Title>
    <Category>CWE: 11063</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11063</h1>
  <iframe height="500" src="/content/11063" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1875
Cwe : 11063
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 20-5
------------------------------
This query searches for usage of the error indicator 'errno' from <errno.h>

	The Example below shows code with vulnerability: 

#include <errno.h>

errno = 0; 

*/

// Safety check for the violating h file
CxList includes = All.FindByType(typeof(StringLiteral)).GetParameters(Find_Methods()
	.FindByShortName("CX_INCL"));
CxList hFile = includes.FindByShortName("errno.h");
if (hFile.Count == 0)
	return result;

// Start with all instances of errno
CxList errnos = All.FindByShortName("errno");

// Remove all locally defined instances
CxList defs = All.FindDefinition(errnos);
errnos -= errnos.FindAllReferences(defs);

result = errnos;</errno.h></errno.h></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>