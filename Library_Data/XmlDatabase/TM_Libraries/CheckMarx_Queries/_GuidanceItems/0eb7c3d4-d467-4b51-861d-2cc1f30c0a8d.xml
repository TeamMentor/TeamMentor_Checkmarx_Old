<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>0eb7c3d4-d467-4b51-861d-2cc1f30c0a8d</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1254 - Heuristic NULL Pointer Dereference2</Title>
    <Category>CWE: 476</Category>
    <Phase>CPP Heuristic</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  476</h1>
  <iframe height="500" src="/content/476" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1254
Cwe : 476
IsExecutable : false
IsEncrypted : false
Severity : 1
PackageId : 17
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> return result;
CxList methodInvoke = Find_Methods();

CxList malloc = methodInvoke.FindByShortName("malloc");
CxList allMemoryMethods = malloc;
CxList leftSide = All.GetByAncs(malloc.GetAncOfType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left);

CxList realloc = methodInvoke.FindByShortName("realloc");
allMemoryMethods += realloc;
leftSide += All.GetByAncs(realloc.GetAncOfType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left);

CxList calloc = methodInvoke.FindByShortName("calloc");
allMemoryMethods += calloc;
leftSide += All.GetByAncs(calloc.GetAncOfType(typeof(AssignExpr))).FindByAssignmentSide(CxList.AssignmentSide.Left);

CxList conditions = Get_Conditions();

CxList assert = methodInvoke.FindByName("assert");
CxList assertParam = All.GetByAncs(assert);
assertParam -= assertParam.FindByShortName("assert");

conditions += assertParam;

CxList methods = All.GetMethod(leftSide);
CxList allParamReferences = All.GetByAncs(methods).FindAllReferences(leftSide);

CxList problematicMallocs = new CxList();
foreach (CxList singleLeft in leftSide)
{
	CxList method = methods.GetMethod(singleLeft);
	CxList paramReferences = allParamReferences.GetByAncs(method).FindAllReferences(singleLeft);
	if (paramReferences.Count&gt;0)
	{
		if ((conditions*paramReferences).Count == 0)
		{
			problematicMallocs += allMemoryMethods.GetByAncs(singleLeft.GetFathers());
		}
	}
}

result = (allParamReferences-leftSide).DataInfluencedBy(problematicMallocs);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>