<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>c953c7dd-5656-458c-9585-86e03f748785</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1914 - R12 01 03 Find non Explicit Constructor</Title>
    <Category>CWE: 10798</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10798</h1>
  <iframe height="500" src="/content/10798" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1914
Cwe : 10798
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 12-1-3
 ------------------------------
 This query searches for constructors with one parameter which is a 
 fundamental type, and returns those without the "explicit" keyword.

 The Example below shows code with vulnerability: 

    class Foo
	{
	public:
		Foo(int32_t a) { }; 			//Non-compliant
	};   
	
	class Bar
	{
	public:
	    explicit Bar (int32_t a) { }; 	//Compliant
	};

*/

//Build List with all of the fundamental types and their typedefs.
System.Collections.Generic.List<string> types = new System.Collections.Generic.List<string>();
types.Add("char");
types.Add("short");
types.Add("int");
types.Add("long");
types.Add("float");
types.Add("double");
types.Add("void");
types.Add("bool");

//Get all typedefs of fundamental types.
// start with all type objects
CxList basicTypes = All.FindByType(typeof(TypeRef));

// we only care about basic types
basicTypes = basicTypes.FindByName("char") +
	basicTypes.FindByName("short") +
	basicTypes.FindByName("int") +
	basicTypes.FindByName("long") +
	basicTypes.FindByName("float") +
	basicTypes.FindByName("double");

// remove redundent instances
basicTypes -= basicTypes.FindByFathers(All.FindByType(typeof(ObjectCreateExpr)));

// Find typedef'd types
CxList typedefDecl = All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF");
typedefDecl = typedefDecl.GetAncOfType(typeof(VariableDeclStmt)) +
	typedefDecl.GetAncOfType(typeof(FieldDecl));
basicTypes = basicTypes.GetByAncs(typedefDecl);
typedefDecl = basicTypes.GetAncOfType(typeof(VariableDeclStmt)) +
	basicTypes.GetAncOfType(typeof(FieldDecl));
typedefDecl = All.FindByType(typeof(Declarator)).GetByAncs(typedefDecl);

foreach(CxList typedef in typedefDecl) {
	types.Add(((Declarator) typedef.data.GetByIndex(0)).ShortName);
}

CxList cons = All.FindByType(typeof(ConstructorDecl));
cons -= cons.FindByFieldAttributes(Modifiers.Explicit);
CxList paramDeclColl = All.FindByType(typeof(ParamDeclCollection));
CxList paramCollParts = All.FindByType(typeof(ParamDecl)) + All.FindByType(typeof(TypeRef));

foreach (CxList con in cons) {
	CxList parCol = paramCollParts.GetByAncs(paramDeclColl.FindByFathers(con));
	CxList par = parCol.FindByType(typeof(ParamDecl));
	CxList typePar = parCol.FindByType(typeof(TypeRef));
	
	if (par.Count != 1) {//Check amount of parameters.
		continue;
	}
	//Check if parameter is fundamental.
	string typeStr = ((TypeRef) typePar.data.GetByIndex(0)).TypeName;
	if ( types.Contains(typeStr) ) {
		result += con;	
	}
}</string></string></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>