<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>70950d88-cb8e-443d-822e-9fd194169c91</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1850 - R14 08 Not Compound Switch Or Iteration Statement</Title>
    <Category>CWE: 11038</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11038</h1><iframe src='/content/11038' width="100%" height="500"></iframe><h1>Checkmarx Rule</h1>
<div style='padding:10px'><pre>QueryId : 1850
Cwe : 11038
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre></div><h3>Source</h3><div style='padding:10px'><pre> /*
MISRA C RULE 14-8
------------------------------
This query searches for iterations or switch statements not followed by a compound statement

	The Example below shows code with vulnerability: 

for (i=0;i<6;i++)
	a++;

*/

CxList potentials = All.FindByType(typeof(SwitchStmt)) + All.FindByType(typeof(IterationStmt));

// Remove iterations followed by compound statements
potentials -= All.FindByType(typeof(StatementCollection)).GetFathers();

// Remove switches followed by compound statements
potentials -= potentials.FindByRegex(@"\Wswitch\s*\([^\)]*?\)[^;\{]*?\{",false,false,false);

result = potentials;</pre></div>]]></Data>
  </Content>
</TeamMentor_Article>