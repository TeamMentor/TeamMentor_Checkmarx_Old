<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>6443ac7d-265d-42cf-8c19-244afcba027a</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>604 - Use Of Hardcoded Password</Title>
    <Category>CWE: 259</Category>
    <Phase>Java Low Visibility</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  259</h1>
  <iframe height="500" src="/content/259" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 604
Cwe : 259
IsExecutable : true
IsEncrypted : false
Severity : 1
PackageId : 36
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList emptyString = Find_Empty_Strings();
CxList NULL = All.FindByName("null");
CxList psw = Find_Passwords();
//CxList allStrings = All.FindByType("String");
//CxList admin = allStrings.FindByShortName("*admin*");
//psw += admin;

// Find password in an initialization operation
CxList psw_in_lSide = psw.FindByAssignmentSide(CxList.AssignmentSide.Left);
CxList psw_in_lSide_decl = psw_in_lSide.FindByType(typeof(Declarator));

CxList strLiterals = Find_Strings() - emptyString - NULL;

//when the hardcoded string includes a space or dot we believe 
//it is not a password string
strLiterals -= strLiterals.FindByName("* *");
strLiterals -= strLiterals.FindByName("*.*");

CxList lit_in_rSide = strLiterals.FindByAssignmentSide(CxList.AssignmentSide.Right);

CxList initializedPassword = psw_in_lSide_decl.FindByInitialization(lit_in_rSide);

// Find password in an "equals" operation
CxList eq = All.FindByMemberAccess("String.equals");
eq *= psw.GetMembersOfTarget();
CxList equalsPassword = strLiterals.GetByAncs(eq);

eq = All.FindByMemberAccess("String.equals");
eq *= strLiterals.GetMembersOfTarget();
equalsPassword += psw.GetByAncs(eq);

// Find password in assignments
CxList assignPassword = psw_in_lSide.GetAncOfType(typeof(AssignExpr));
assignPassword = lit_in_rSide.GetByAncs(assignPassword);

CxList methods = Find_Methods();
CxList connection = methods.FindByShortName("getConnection");
CxList connetionParam2 = All.GetParameters(connection, 2);

// Add also KerberosKey's second parameter as a potentially vulnerable hardcoded parameter
CxList KerberosKey = All.FindByType("KerberosKey");
KerberosKey = 
	KerberosKey.FindByType(typeof(ObjectCreateExpr)) + 
	KerberosKey.FindByType(typeof(Declarator));

// Get second parameter
CxList KerberosKeyParam1 = All.GetParameters(KerberosKey, 1);

// Add also KerberosPrincipal's second parameter as a potentially vulnerable hardcoded parameter
CxList PasswordAuthentication = All.FindByType("PasswordAuthentication");
PasswordAuthentication = 
	PasswordAuthentication.FindByType(typeof(ObjectCreateExpr)) + 
	PasswordAuthentication.FindByType(typeof(Declarator));

// Get second parameter
CxList PasswordAuthenticationParam1 = All.GetParameters(PasswordAuthentication, 1);

CxList relevantParams = KerberosKeyParam1 + connetionParam2 + PasswordAuthenticationParam1;

// Sanitize by binaries such as "+" and by concatenate - could be concatenated with a non hard-coded key, 
// which is OK
CxList bin = All.FindByType(typeof(BinaryExpr));
bin = bin.FindByShortName("");
CxList concat = All.FindByShortName("concatenate", false);

CxList sanitize = bin + concat;
CxList undefinedMethods = methods - methods.FindAllReferences(All.FindDefinition(methods));
sanitize += undefinedMethods;

// Add the parameter itself, or whatever is influencing it
CxList paramsAffectedByString = relevantParams * strLiterals + relevantParams.InfluencedByAndNotSanitized(strLiterals, sanitize);


// All
result = initializedPassword + equalsPassword + assignPassword + paramsAffectedByString;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>