<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>9f1dac26-d4d9-4a5e-89a6-9f02ba701eaf</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1022 - CRUD Delete</Title>
    <Category>CWE: 10544</Category>
    <Phase>Apex Force com Serious Security Risk</Phase>
    <Technology>Apex</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10544</h1>
  <iframe height="500" src="/content/10544" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1022
Cwe : 10544
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 1003
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList apexFiles = Find_Apex_Files() - Find_Triggers_Code() - Find_Test_Code();
CxList sObjectsInApex = Find_sObjects() * apexFiles;
CxList methods = Find_Methods() * apexFiles;

sObjectsInApex += methods.FindByShortName("select", false);
CxList deleteMembers = sObjectsInApex.GetParameters(methods.FindByShortName("delete"))
	+ sObjectsInApex.GetParameters(methods.FindByShortName("merge"));

CxList isDeletableShort = methods.FindByShortName("isdeletable");
CxList isDeletable = isDeletableShort.FindByMemberAccess("getdescribe.isdeletable");
CxList getDescribe = apexFiles.FindByMemberAccess("get.getdescribe") +
	apexFiles.FindByMemberAccess("sobjecttype.getdescribe");
isDeletable += isDeletableShort * isDeletableShort.InfluencedByAndNotSanitized(getDescribe, Find_Test_Code());
isDeletable += apexFiles.FindAllReferences(apexFiles.GetMethod(isDeletable));

// Less constraint createable
CxList isSomewhatDeletable = isDeletable + methods.FindByShortName("getDescribe", false).GetMembersOfTarget().FindByShortName("isDeletable", false);
isDeletable += isSomewhatDeletable;

CxList returnValues = deleteMembers;

if ((isDeletable + Find_General_Permissions()).Count &gt; 0)
{
	// Methods that call isCreateable
	CxList isDeletable2 = isDeletable - isDeletable.FindByShortName("isDeletable", false);

	CxList ifStmt = isDeletable.GetAncOfType(typeof(IfStmt));
	foreach (CxList stmt in ifStmt)
	{
		IfStmt ifGrph = stmt.data.GetByIndex(0) as IfStmt;
		StatementCollection trueS = ifGrph.TrueStatements;
		if (trueS != null)
		{
			CxList potentialRemove = deleteMembers.GetByAncs(apexFiles.FindById(trueS.NodeId));
			CxList condition = apexFiles.GetByAncs(All.FindById(ifGrph.Condition.NodeId));
			condition = condition.GetTargetOfMembers().GetTargetOfMembers();
			condition += condition.GetTargetOfMembers();
			condition += condition.GetTargetOfMembers().GetTargetOfMembers();
			condition += condition.GetTargetOfMembers().GetTargetOfMembers().GetTargetOfMembers();

			CxList apexConditions = apexFiles.GetByAncs(condition);
			string[] names = new string[apexConditions.Count];
			int count = 0;
			foreach (CxList obj in apexConditions)
			{
				string name1 = (obj.data.GetByIndex(0) as CSharpGraph).ShortName.Trim(new char[]{'\'','"'});
				names[count++] = name1;
			}
			returnValues -= potentialRemove.FindByTypes(names);
			returnValues -= returnValues.FindAllReferences(apexConditions);
			foreach (CxList p in potentialRemove)
			{
				CxList parameters = Find_Strings().GetByAncs(apexFiles.GetParameters(p));
				if (parameters.Count &gt; 0)
				{
					CSharpGraph gg = parameters.data.GetByIndex(0) as CSharpGraph;
					string name = gg.ShortName.ToLower();
					if (name.IndexOf("from") &gt;= 0)
					{
						name = name.Substring(name.IndexOf("from") + 4).Trim();
						if (name.IndexOf(" ") &gt;= 0)
						{
							name = name.Substring(0, name.IndexOf(" ")).Trim();
						}
					}
					else
					{
						name = "";
					}
					if (condition.FindByShortName(name).Count &gt; 0)
					{
						returnValues -= p;
					}
				}		 
			}
		}
	}

	// Removing all methods in which there is a relevant negative validation
	CxList ifNot = Find_If_Not_Stmt() * ifStmt;
	CxList ifToIgnore = Find_If_With_Return_or_Create() * ifNot;

	foreach (CxList i in ifToIgnore)
	{
		CxList ifNotMethod = apexFiles.GetMethod(i);
		CxList potentialRemove = returnValues.GetByAncs(ifNotMethod);

		
		
		CxList apexI = apexFiles.GetByAncs(i);
		string[] names = new string[apexI.Count];
		int count = 0;
		foreach (CxList obj in apexI)
		{
			string name1 = (obj.data.GetByIndex(0) as CSharpGraph).ShortName.Trim(new char[]{'\'','"'});
			names[count++] = name1;
		}

		returnValues -= potentialRemove.FindByTypes(names);
		returnValues -= returnValues.FindAllReferences(apexI);
	}

	// Heuristically remove check in constructor
	CxList exception = Find_Create_In_Constructor().GetByAncs(ifNot);
	CxList exceptionClass = apexFiles.GetClass(exception);
	returnValues -= returnValues.GetByAncs(exceptionClass);

	// Remove fields with security infrastructure
	CxList isDeletable3 = (isDeletable2 + isDeletable).GetByAncs(Find_If_Not_Stmt());
	isDeletable3 -= isDeletable3
		.GetTargetOfMembers().GetTargetOfMembers().GetTargetOfMembers()
		.GetMembersOfTarget().GetMembersOfTarget().GetMembersOfTarget();

	deleteMembers = returnValues;
	foreach (CxList member in deleteMembers)
	{
		CSharpGraph g = member.data.GetByIndex(0) as CSharpGraph;
		string typeName = g.TypeName;
		if (typeName == "")
		{
			CxList member1 = Find_Strings().GetByAncs(apexFiles.GetParameters(member));
			CSharpGraph g1 = member1.data.GetByIndex(0) as CSharpGraph;
			typeName = g1.ShortName.ToLower();
			if (typeName.IndexOf("from") &gt;= 0)
			{
				typeName = typeName.Substring(typeName.IndexOf("from") + 4).Trim();
				if (typeName.IndexOf(" ") &gt;= 0)
				{
					typeName = typeName.Substring(0, typeName.IndexOf(" ")).Trim();
				}
			}
			else
			{
				typeName = "";
			}
		}
		if (typeName != "")
		{
			CxList methodMember = apexFiles.GetByAncs(apexFiles.GetMethod(member));
			CxList members = methodMember.FindByMemberAccess(typeName + ".sObjectType", false);
			members = members.GetByAncs(Find_If_Not_Stmt());
			CxList influenced = isDeletable.InfluencedByAndNotSanitized(members, Find_Test_Code()) + isDeletable3 * methodMember;
			if (influenced.Count &gt; 0)
			{
				returnValues -= member;
			}
		}
	}
}

result = returnValues;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>