<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>d016da11-c4bd-4a69-8979-d7f87d55fb68</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>637 - Improper Locking</Title>
    <Category>CWE: 667</Category>
    <Phase>Java Medium Threat</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  667</h1>
  <iframe height="500" src="/content/667" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 637
Cwe : 667
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 37
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //checks if there are locks that are not unlocked.

CxList mutexWait = All.FindByMemberAccess("Lock.lock") + All.FindByMemberAccess("Lock.tryLock");
CxList mutexRelease = All.FindByMemberAccess("Lock.unlock");

CxList mutLock = All.NewCxList();
foreach(CxList mut in mutexWait)
{
	CxList mutex = mut.GetTargetOfMembers().GetTargetOfMembers();
	if(mutex.Count == 0)
	{
                                
		mutLock += mut.GetTargetOfMembers();
	}
	else
	{
		mutLock += mut.GetTargetOfMembers().GetTargetOfMembers();
                                
	}
}

result = mutLock - mutLock.DataInfluencingOn(mutexRelease);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>