<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>c75f0651-7b2f-4cad-ac77-55a1fa3c21f7</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1924 - R06 02 01 Assignment in Sub Expr</Title>
    <Category>CWE: 10754</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10754</h1>
  <iframe height="500" src="/content/10754" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1924
Cwe : 10754
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* MISRA CPP RULE 6-2-1   
 ------------------------------
 This query finds assignment operators that are used in sub- expressions
 

 The Example below shows code with vulnerability:  
 
      x=y;             //compliant
      x=y=z;           //non-compliant
      if(x!=y)         //compliant 
      {
          some code 
      }
    
      bool b1=x!=y;    //compliant
      if(x=y)          //non-compliant 
      {
          some code 
      }

      if((x=y)!=0)     //non-compliant
      {
        some code 
      }

      if(int i=foo())  //compalint
      {
        some code 
      }
*/

//for multiple assignment x=y=z
CxList exprStsmt = All.FindByType(typeof(ExprStmt));
CxList unrf = All.FindByType(typeof(UnknownReference));
CxList asn = All.FindByType(typeof(AssignExpr));
result+= asn.FindByFathers(asn.FindByFathers(exprStsmt));
//for if statements if(x=y)
CxList ifs = All.FindByType(typeof(IfStmt));
unrf = unrf.GetByAncs(ifs);
CxList exp = All.FindByType(typeof(Expression));
CxList ifsChildren= unrf.GetByAncs(exp.FindByFathers(ifs));
result += ifsChildren.FindByAssignmentSide(CxList.AssignmentSide.Right) * unrf;</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>