<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>9851a2c6-3cce-4df0-9fdd-f0eb91df2796</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1833 - R08 08 External Objects Declared Once</Title>
    <Category>CWE: 11021</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11021</h1>
  <iframe height="500" src="/content/11021" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1833
Cwe : 11021
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 8-8
------------------------------
This query searches for external objects declared more than once

	The Example below shows code with vulnerability:

extern int32_t ex_head_head_decl;	// in file 1.h

extern int32_t ex_head_head_decl;	// in file 2.h

*/

CxList varsAndMethods = All.FindByType(typeof(Declarator)) + All.FindByType(typeof(MethodDecl));
CxList externDecls = varsAndMethods.FindByRegex("extern");

foreach(CxList cur in externDecls){
	// Check if there are declerations in more than one file
	if (externDecls.FindByName(cur).Count != 
	externDecls.FindByShortName(cur).Count){
		result += cur;
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>