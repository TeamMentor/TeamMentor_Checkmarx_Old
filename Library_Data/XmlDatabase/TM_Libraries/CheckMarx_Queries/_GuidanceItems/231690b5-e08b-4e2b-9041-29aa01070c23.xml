<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>231690b5-e08b-4e2b-9041-29aa01070c23</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>224 - Off by One Error in Methods</Title>
    <Category>CWE: 193</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  193</h1>
  <iframe height="500" src="/content/193" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 224
Cwe : 193
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> //	OffByOne_methods
//  -----------------------
//  Find all "sizeof"s in relevant functions that have no "-1".
///////////////////////////////////////////////////////////////////////

// Find relevant functions with second parameter to sizeof
CxList inFunctions = Find_Methods().FindByShortName("readlink");

// Find all relevant parameters of the relevant functions
CxList sizeofParams = All.GetParameters(inFunctions,2).FindByName("sizeof").FindByType(typeof(MethodInvokeExpr));

// Check each sizeof parameter
CxList sizeofParameters = All.GetParameters(sizeofParams);

foreach(CxList sizeofParam in sizeofParams)
{
	// Get the parameters of the element
	CxList elementMethod = sizeofParam.GetFathers().GetAncOfType(typeof(MethodInvokeExpr));	
	CxList inputParam = All.GetParameters(elementMethod, 1);

	// Get the relevant graph, so we can check ist type
	CxList param1 = sizeofParameters.GetParameters(sizeofParam);
	CSharpGraph p = param1.data.GetByIndex(0) as CSharpGraph;
	// See if the array type differs from the parameter
	if (inputParam.FindByShortName(p.ShortName).Count &gt; 0)
	{
		result += sizeofParam.DataInfluencedBy(param1);
	}
}

// Find relevant functions with first parameter to sizeof
inFunctions = Find_All_strncpy() + Find_All_strncat();

// Find all relevant parameters of the relevant functions
sizeofParams = All.GetParameters(inFunctions, 2).FindByName("sizeof").FindByType(typeof(MethodInvokeExpr));

// Check each sizeof parameter
sizeofParameters = All.GetParameters(sizeofParams);

foreach(CxList sizeofParam in sizeofParams)
{
	// Get the parameters of the element
	CxList elementMethod = sizeofParam.GetFathers().GetAncOfType(typeof(MethodInvokeExpr));	
	CxList inputParam = All.GetParameters(elementMethod, 0);

	// Get the relevant graph, so we can check ist type
	CxList param1 = sizeofParameters.GetParameters(sizeofParam);
	CSharpGraph p = param1.data.GetByIndex(0) as CSharpGraph;
	// See if the array type differs from the parameter
	if (inputParam.FindByShortName(p.ShortName).Count &gt; 0)
	{
		result += sizeofParam.DataInfluencedBy(param1);
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>