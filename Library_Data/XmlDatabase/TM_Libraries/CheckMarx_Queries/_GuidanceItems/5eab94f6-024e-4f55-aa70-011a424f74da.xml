<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>5eab94f6-024e-4f55-aa70-011a424f74da</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1904 - R07 03 03 Unnamed NS in Headers</Title>
    <Category>CWE: 10788</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10788</h1>
  <iframe height="500" src="/content/10788" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1904
Cwe : 10788
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
 MISRA CPP RULE 7-3-3
 ------------------------------
 This query searches for empty namespaces in header files.

 The Example below shows code with vulnerability: 

	  //file.h
      namespace //Non-compliant
		{
			extern int x;
		}

*/

CxList heads = All.FindByFileName("*.h") +
	All.FindByFileName("*.hpp") +
	All.FindByFileName("*.hh");
CxList nss = heads.FindByType(typeof(NamespaceDecl));
foreach(CxList ns in nss) {
	String name = ((NamespaceDecl) ns.data.GetByIndex(0)).Name;
	if(name.Contains("CX_NAMESPACE")) {
		result += ns;	
	}
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>