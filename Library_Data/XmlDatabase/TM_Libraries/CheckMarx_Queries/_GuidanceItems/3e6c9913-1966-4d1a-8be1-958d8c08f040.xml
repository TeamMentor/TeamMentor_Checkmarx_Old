<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>3e6c9913-1966-4d1a-8be1-958d8c08f040</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1858 - R16 02 Recursion Exists</Title>
    <Category>CWE: 11046</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11046</h1>
  <iframe height="500" src="/content/11046" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1858
Cwe : 11046
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 16-2
------------------------------
This query searches for functions who call themselves, either directly or indirectly

	The Example below shows code with vulnerability: 

int ffa(int a){
    return ffb(a);
}

int ffb(int b){
    return ffa(b);
}

*/

// save all the descendents of method invokation, except the invokations themselves
CxList methodInvokes = All.FindByType(typeof(MethodInvokeExpr));
CxList invokeParams = All.GetByAncs(methodInvokes);
invokeParams -= invokeParams.FindByType(typeof(MethodInvokeExpr))
	+ invokeParams.FindByType(typeof(MethodRef));

// go over method defintions (also prototypes, but that's harmless)
CxList methodDecls = All.FindByType(typeof(MethodDecl));
CxList paramaters = All.FindByType(typeof(ParamDecl)).GetParameters(methodDecls);
CxList multiInvokes = All.NewCxList();
invokeParams = invokeParams.GetByAncs(methodDecls);

foreach(CxList curDecl in methodDecls){
	// if non-zero-paramaters function recursion exists,
	// a paramater to function invokation is influencing a paramater of the
	// encompasing function definition
	CxList curDefParams = paramaters.GetParameters(curDecl);
	CxList curSameName = methodInvokes.FindByShortName(curDecl);
	CxList relDecs = invokeParams + curSameName;
	relDecs = relDecs.GetByAncs(curDecl);
	curSameName = relDecs * curSameName;
	CxList curInvokeParams = relDecs - curSameName;
	multiInvokes += curDefParams.InfluencedBy(curInvokeParams);

	// Add zero level recursions (to cover trivialy infinite recursions)
	result += curSameName;
}

// uniquify paths from method invokation to method declaration
System.Collections.Generic.Dictionary<_int2c_ int=""> invokes = new System.Collections.Generic.Dictionary<_int2c_ int="">();
foreach(CxList cur in multiInvokes) {
	int curId = ((CSharpGraph) cur.data.GetByIndex(0)).NodeId;
	if (!invokes.ContainsKey(curId)) {
		invokes.Add(curId, 0);
		result += cur;
	}
}

// remove zero layer have paramater (we caught them twice)
result -= invokeParams.GetAncOfType(typeof(MethodInvokeExpr));</_int2c_></_int2c_></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>