<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>0f73dc28-6997-43c6-8c52-fc55c5ac8b4b</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1204 - Buffer Overflow OutOfBound</Title>
    <Category>CWE: 120</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  120</h1>
  <iframe height="500" src="/content/120" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1204
Cwe : 120
IsExecutable : true
IsEncrypted : false
Severity : 3
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList unknown = All.FindByType(typeof(UnknownReference));
CxList arrayCreate = All.FindByType(typeof(ArrayCreateExpr));

CxList indexerRef = All.FindByType(typeof(IndexerRef));
//return indexerRef;

//ref1 keeps all parameters list and all variables
CxList ref1 = All.GetParameters(All) + unknown;
//return ref1;

//return arrayCreate.GetFathers();
//return All.GetByAncs(arrayCreate.GetFathers());
CxList arrReferences1 = All.GetByAncs(arrayCreate.GetFathers()).FindByAssignmentSide(CxList.AssignmentSide.Left);
//return arrReferences1;

//arrReferences0 keeps all apperance of array (includes as parameter to function)
//note, on this stage just array's that were created, not received as parameters
CxList arrReferences0 = All.FindAllReferences(arrReferences1);
//return arrReferences0;

// 1. When the initializer is bounded by size

//a2 keeps PATHS from array definition up to variable or parameter it influence
CxList a2 = ref1.DataInfluencedBy(arrReferences0);
//return a2;

//return a2 - arrReferences0;
//return indexerRef.FindAllReferences(a2 - arrReferences0);
	
CxList arrReferences = arrReferences0 + indexerRef.FindAllReferences(a2 - arrReferences0);
//return arrReferences;
CxList arrReferences2 = arrReferences.FindByAssignmentSide(CxList.AssignmentSide.Left) +
	arrReferences.FindByAssignmentSide(CxList.AssignmentSide.Right) -
	arrayCreate.GetFathers();
arrReferences2 *= indexerRef;

int useIndex = 0;
foreach (CxList arrDef in arrayCreate)
{
	try
	{
		ArrayCreateExpr ac = arrDef.data.GetByIndex(0) as ArrayCreateExpr;

		if ((ac != null) &amp;&amp; (ac.Sizes.Count &gt;= 1))
		{
			CxList arrDefFathers = arrDef.GetFathers();
			CxList arrUseList = arrReferences1.GetByAncs(arrDefFathers);
			arrUseList = arrReferences.FindAllReferences(arrUseList);
			arrUseList += arrReferences2.FindAllReferences(a2.DataInfluencedBy(arrUseList));
			arrUseList *= arrReferences2;
			if (arrUseList.Count &gt; 0)
				foreach (CxList au in arrUseList)
				{
					CxList arrUse = au;
					for (int i = ac.Sizes.Count - 1; i &gt;= 0; i--)
					{
						if (arrUse.Count &gt; 0)
						{
							IndexerRef g = arrUse.data.GetByIndex(0) as IndexerRef;
							if (g != null)
							{
								IntegerLiteral defIndex = (IntegerLiteral) ac.Sizes[i];
								if ((defIndex != null)
									&amp;&amp;
									(System.Int32.TryParse(g.Indices[0].Text, out useIndex)))
								{
									if (useIndex &gt;= defIndex.Value)
									{
										result += arrDefFathers.Concatenate(arrUse);
									}
								}
								else
								{
									if ((g.Indices.Count &gt; 0) &amp;&amp; (g.Indices[0].Text == "UnaryExpr"))
									{
										UnaryExpr index = (UnaryExpr) g.Indices[0];
										if ((index != null) &amp;&amp; (index.Operator.ToString() == "UnaryNegation"))
										{
											result += arrUse;
										}
									}
								}
							}
							arrUse = indexerRef.FindByFathers(arrUse);
						}
					}
				}
		}
	}
	catch (Exception ex)
	{
		// just in case we've missed something
	}
}


// 2. When the size is set by a malloc operation
CxList malloc = All.FindByShortName("malloc");
CxList inMalloc = All.GetByAncs(malloc);
CxList bin = inMalloc.FindByType(typeof(BinaryExpr));
CxList inBin = inMalloc.GetByAncs(bin);
CxList sizof = (Find_Methods() * inBin).FindByShortName("sizeof");
CxList integers = inBin.FindByType(typeof(IntegerLiteral));
bin *= sizof.GetAncOfType(typeof(BinaryExpr)) * integers.GetAncOfType(typeof(BinaryExpr));
CxList assign = bin.GetAncOfType(typeof(AssignExpr));
CxList otherMalloc = malloc.FindByParameters(integers) - All.GetByAncs(assign);
otherMalloc -= otherMalloc.FindByParameters(All.GetByAncs(otherMalloc).FindByType(typeof(BinaryExpr)));

assign += otherMalloc.GetAncOfType(typeof(AssignExpr));
malloc = malloc.GetByAncs(assign);
malloc += otherMalloc.GetByAncs(otherMalloc.GetAncOfType(typeof(AssignExpr)));
integers = integers.GetByAncs(malloc);

CxList arr = All.GetByAncs(assign).FindByAssignmentSide(CxList.AssignmentSide.Left);
CxList arrayCreateDef = All.FindDefinition(arr);

arrReferences = All.FindAllReferences(arr);

a2 = ref1.DataInfluencedBy(arrReferences);
arrReferences += indexerRef.FindAllReferences(a2 - arrReferences);

arrReferences2 = arrReferences.FindByAssignmentSide(CxList.AssignmentSide.Left) +
	arrReferences.FindByAssignmentSide(CxList.AssignmentSide.Right) -
	arrayCreateDef;
arrReferences2 *= indexerRef;

foreach (CxList arrDef in arrayCreateDef)
{
	try
	{
		CxList arrUseList = arrReferences.FindAllReferences(arrDef);
		CxList arrSize = integers.GetByAncs(arrUseList.GetAncOfType(typeof(AssignExpr)));

		arrUseList += arrReferences2.FindAllReferences(a2.DataInfluencedBy(arrUseList));
		arrUseList *= arrReferences2;
		foreach (CxList arrUse in arrUseList)
		{
			IndexerRef g = arrUse.data.GetByIndex(0) as IndexerRef;
			if (g != null)
			{
				IntegerLiteral defIndex = arrSize.data.GetByIndex(0) as IntegerLiteral;
				if (System.Int32.TryParse(g.Indices[0].Text, out useIndex))
				{
					if (useIndex &gt;= defIndex.Value)
					{
						result += arrSize.Concatenate(arrUse);
					}
				}
				else
				{
					if (g.Indices[0].Text == "UnaryExpr")
					{
						UnaryExpr index = (UnaryExpr) g.Indices[0];
						if (index.Operator.ToString() == "UnaryNegation")
						{
							result += arrUse;
						}
					}
				}
			}
		}
	}
	catch (Exception ex)
	{
		// just in case we've missed something
	}
}


// 3. When the index is a variable, set to a large number
CxList binary = All.FindByType(typeof(BinaryExpr));
CxList ternary = All.FindByType(typeof(TernaryExpr));

CxList fi = Find_Integers();
CxList rf = fi.FindByType("int") + fi.FindByType("short") + fi.FindByType("long");
CxList def = fi.FindDefinition(rf).FindByType(typeof(Declarator));
def -= def.FindByRegex(@"\[");
def -= def.FindByRegex(@"\*\s*\w");

rf = All.FindAllReferences(def);
rf -= rf.FindByFathers(rf.GetAncOfType(typeof(BinaryExpr)));
CxList use = rf.GetAncOfType(typeof(IndexerRef));

rf = rf.GetByAncs(use);
arrayCreateDef = arrayCreate.FindByFathers(All.FindDefinition(use));

a2 = ref1.DataInfluencedBy(arrReferences0);
arrReferences = arrReferences0 + indexerRef.FindAllReferences(a2 - arrReferences0);

integers = All.FindByType(typeof(IntegerLiteral));
CxList sanitize = binary + arrayCreate;
integers = integers * integers.InfluencingOnAndNotSanitized(All.FindAllReferences(rf), sanitize);

foreach (CxList arrDef in arrayCreateDef)
{
	try
	{
		ArrayCreateExpr ace = arrDef.data.GetByIndex(0) as ArrayCreateExpr;
		if ((ace != null) &amp;&amp; (ace.Sizes.Count &gt; 0))
		{
			IntegerLiteral defIndex = ace.Sizes[0] as IntegerLiteral;
			if (defIndex != null)
			{
				CxList arrDefFathers = arrDef.GetFathers();
				CxList arrUseList = arrReferences1.GetByAncs(arrDefFathers);
				arrUseList = arrReferences.FindAllReferences(arrUseList);
				arrUseList += arrReferences.FindAllReferences(a2.DataInfluencedBy(arrUseList));
				arrUseList *= arrReferences * use;
				foreach (CxList arrUse in arrUseList)
				{
					CxList size = rf.GetByAncs(arrUse);
					if (size.Count &gt; 0)
					{
						CxList sizeNumList = integers * integers.InfluencingOnAndNotSanitized(All.FindAllReferences(size), sanitize);
						foreach (CxList sizeNum in sizeNumList)
						{
							IntegerLiteral useIndexLiteral = sizeNum.data.GetByIndex(0) as IntegerLiteral;
							if (useIndex != null)
							{
								if ((useIndexLiteral != null) &amp;&amp; (useIndexLiteral.Value &gt;= defIndex.Value))
								{
									result += arrDefFathers.Concatenate(size);
								}
							}
						}
					}
				}
			}
		}
	}
	catch (Exception ex)
	{
	}
}

// 4. When the array is a member of another object
CxList refHost = All.FindByFathers(indexerRef).GetTargetOfMembers();
CxList defHost = All.FindDefinition(refHost);

CxList typeHost = All.GetByAncs(defHost);
CxList typeHostDef = All.FindDefinition(typeHost);

arrayCreateDef = typeHostDef.FindByType(typeof(TypeDecl));
arrayCreateDef = arrayCreate.GetByAncs(arrayCreateDef);

integers = All.FindByType(typeof(IntegerLiteral)).GetByAncs(arrayCreateDef);

foreach (CxList arrDef in arrayCreateDef)
{
	try
	{
		ArrayCreateExpr ac = arrDef.data.GetByIndex(0) as ArrayCreateExpr;
		if ((ac != null) &amp;&amp; (ac.Sizes.Count &gt;= 1))
		{
			CxList arrUseList = typeHost.FindAllReferences(arrDef.GetAncOfType(typeof(ClassDecl)));
			arrUseList = arrUseList.GetFathers().GetFathers();
			arrUseList = refHost.FindAllReferences(arrUseList).GetMembersOfTarget();
			foreach (CxList au in arrUseList)
			{
				CxList arrUse = au.GetFathers();
				for (int i = ac.Sizes.Count - 1; i &gt;= 0; i--)
				{
					if (arrUse.Count &gt; 0)
					{
						IndexerRef g = arrUse.data.GetByIndex(0) as IndexerRef;
						CSharpGraph acg = arrDef.GetFathers().data.GetByIndex(0) as CSharpGraph;
						if ((g != null) &amp;&amp; (acg != null) &amp;&amp; (g.ShortName.Equals(acg.ShortName)))
						{
							IntegerLiteral defIndex = (IntegerLiteral) ac.Sizes[i];
							if ((defIndex != null)
								&amp;&amp;
								(System.Int32.TryParse(g.Indices[0].Text, out useIndex)))
							{
								if (useIndex &gt;= defIndex.Value)
								{
									result += integers.GetByAncs(arrDef).Concatenate(arrUse);
								}
							}
						}
						arrUse = indexerRef.FindByFathers(arrUse);
					}
				}
			}
		}
	}
	catch (Exception ex)
	{
		// just in case we've missed something
	}
}

// 5. Definition of *(p+n) and not p[n]
integers = All.FindByType(typeof(IntegerLiteral));
CxList pointers = All.FindByType(typeof(UnaryExpr)).FindByName("Pointer");
pointers = pointers.FindByAssignmentSide(CxList.AssignmentSide.Left);
bin = All.FindByType(typeof(BinaryExpr)).FindByFathers(pointers);
CxList plus = All.NewCxList();
foreach (CxList p in bin)
{
	BinaryExpr g = p.data.GetByIndex(0) as BinaryExpr;
	if (g.Operator == BinaryOperator.Add)
	{
		plus += p;
	}
}
CxList useSize = integers.FindByFathers(plus);
use = unknown.FindByFathers(plus) - useSize;
def = All.FindDefinition(use);
CxList defSize = integers.GetByAncs(def);

foreach (CxList u in use)
{
	try
	{
		CxList us = useSize.FindByFathers(u.GetFathers());
		if (us.Count &gt; 0)
		{
			IntegerLiteral ius = us.data.GetByIndex(0) as IntegerLiteral;
			CxList d = def.FindDefinition(u);
			CxList ds = defSize.GetByAncs(d);
			if (ds.Count &gt; 0)
			{
				int dsInt = 1;
				foreach (CxList singleDs in ds)
				{
					IntegerLiteral il = singleDs.data.GetByIndex(0) as IntegerLiteral;
					dsInt *= (int) il.Value;
				}
				if (ius.Value &gt;= dsInt)
				{
					result += d.Concatenate(us);
				}
			}
		}
	}
	catch
	{
		// Just in case we've missed some exception
	}
}

// 6. Arrays inside a loop</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>