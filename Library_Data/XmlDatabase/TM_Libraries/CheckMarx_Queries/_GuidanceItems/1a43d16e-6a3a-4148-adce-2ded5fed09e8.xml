<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>1a43d16e-6a3a-4148-adce-2ded5fed09e8</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1937 - R15 00 02 Throw Pointers</Title>
    <Category>CWE: 10762</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10762</h1>
  <iframe height="500" src="/content/10762" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1937
Cwe : 10762
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /* MISRA CPP RULE 15-0-2
 ------------------------------
 This query finds all throw statements that throw pointers (excluding function pointers)
 
 The Example below shows code with vulnerability:     
		
	 class B{};
     class C
     {
		 B* b;
		 C()
		 {
		    throw &amp;b;                //non-compliant
		 }
		 C(int a)
		 {
		    throw(new B());          //non-compliant  
		    throw b;                 //non-compliant        
		 }		
	 };
		
	 void bar(char * a, int ** c)
     {
		 throw a;                     //non-compliant
		 throw c;                     //non-compliant
	 }
	 int * foo(int a)
     {
		 return &amp;a;                 
	 }
		
	 int main()
     {
		 throw (foo('s'));            //non-compliant
	 }
		
*/

//handle explicit pointers
//finds all pointer declarations
CxList ptrDecl = All.FindByType(typeof(Declarator));
ptrDecl = ptrDecl.FindByRegex(@"[^(]\s*(\*\s*)+\w");
CxList decl = All.FindByType(typeof(ParamDecl));

//finds all method params that are pointers
//for example void foo(int* a){}
CxList tr = All.FindByFathers(decl).FindByType(typeof(TypeRef));
CxList ptrParam = tr.FindByRegex(@"([(]\s*\w+\s*(\*\s*)+\s*\w+)|(,\s*\w+\s*(\*\s*)+\s*\w+)");
CxList ptrAsMethodParam=ptrParam.GetAncOfType(typeof(ParamDecl))+ptrDecl;

//finds all throw associated to the pointers
CxList refToPtr = All.FindAllReferences(ptrAsMethodParam) - ptrAsMethodParam;
CxList throwWithExplicit= refToPtr.GetAncOfType(typeof(ThrowStmt));
CxList throwParams= All.FindByFathers(throwWithExplicit);
CxList ptrAccess = throwParams - throwParams.FindByType(typeof(UnaryExpr));
result=ptrAccess + throwParams.FindByType(typeof(UnaryExpr)).FindByName("Address");

//throw new object
CxList throwObj = All.FindByType(typeof(ThrowStmt));
throwObj=All.FindByFathers(throwObj).FindByType(typeof(ObjectCreateExpr));
result += throwObj;

//handle byAddress pointers
CxList declarators = All.FindByType(typeof(Declarator)) - ptrDecl;
CxList paramNotPtr = decl - ptrAsMethodParam + declarators;
CxList refToParam = All.FindAllReferences(paramNotPtr) - paramNotPtr;
CxList throwWithParams = refToParam.GetAncOfType(typeof(ThrowStmt));
CxList throwParamsImplicit1 = All.FindByFathers(throwWithParams);
result += throwParamsImplicit1.FindByType(typeof(UnaryExpr)).FindByName("Address");

//throw a returned pointer
CxList throwStmt = All.FindByType(typeof(ThrowStmt));
foreach(CxList cur in throwStmt){
	CxList throwCallsMeth = All.FindByFathers(cur).FindByType(typeof(MethodInvokeExpr));
	CxList method = All.FindDefinition(throwCallsMeth);
	CxList retType = All.FindByFathers(method).FindByType(typeof(TypeRef));
	CxList temp = retType.FindByRegex(@"[^(]\s*\*\s*\w");
	if(temp.Count &gt; 0)
	{
		result += cur;
	}
		
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>