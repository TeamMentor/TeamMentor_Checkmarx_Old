<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>c665df3f-6d02-4fad-ad30-1389f267211f</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>574 - Find XSS Sanitize</Title>
    <Category>CWE: 0</Category>
    <Phase>General</Phase>
    <Technology>Java</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 574
Cwe : 0
IsExecutable : false
IsEncrypted : false
Severity : 0
PackageId : 32
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> CxList jspCode = Find_Jsp_Code();
CxList jspTags = Find_Output_Tags();
CxList methods = Find_Methods();
CxList jspMethods = methods * jspCode;

/*CxList jspSanitizers = 
	jspCode.FindByShortName("encode", false) +
	jspCode.FindByShortName("escape", false) +
	jspCode.FindByShortName("escapeAmp", false) +
	jspCode.FindByShortName("escapeHtml", false) +
	jspCode.FindByShortName("escapeXss", false) +
	jspCode.FindByShortName("escapeXml", false) +
	jspCode.FindByShortName("escapeJavaScript", false);
*/

CxList escapeSanitizers = 
	methods.FindByMemberAccess("StringEscapeUtils.escapeXml") +
	methods.FindByMemberAccess("StringEscapeUtils.escapeJavaScript") +
	methods.FindByMemberAccess("StringEscapeUtils.escapeHtml") +
	methods.FindByMemberAccess("HtmlUtils.htmlEscape*");

CxList jspSanitizers = jspCode.GetByAncs(jspTags);

CxList mvcSanitizers = jspCode.FindByMemberAccess("c_out.*") + jspCode.FindByMemberAccess("c_param.value");
mvcSanitizers = mvcSanitizers.GetMembersOfTarget().GetMembersOfTarget().FindByMemberAccess("response.write");
jspSanitizers += jspCode.GetByAncs(mvcSanitizers);

CxList jspEscaped = jspCode.FindByMemberAccess("cx_escFalse.*");;
jspSanitizers -= jspCode.GetByAncs(jspEscaped.GetAncOfType(typeof(MethodInvokeExpr)));

CxList ibatis = Ibatis();
CxList ibatisSanitizers = ibatis - ibatis.FindByShortName("execute*");

// All replaces that contain \r or \n as first parameter should be removed
CxList replace = Find_Methods().FindByShortName("replace*");
CxList replaceEnter = Find_Strings().GetParameters(replace, 0);
replaceEnter = replaceEnter.FindByShortName(@"*[^a-zA-Z]*");
replace = replace.FindByParameters(replaceEnter);
CxList exec = 
	All.FindByMemberAccess("Runtime.exec") + 
	All.FindByMemberAccess("getRuntime.exec") +
	All.FindByMemberAccess("System.exec") +
	All.FindByMemberAccess("Executor.safeExec");

result = Find_XSS_Replace() +  
	Find_Encode() + 
	Find_General_Sanitize() +
	jspSanitizers +
	escapeSanitizers +
	jspCode.GetParameters(jspSanitizers) +
	Find_Replace_Param() +
	ibatisSanitizers +
	Find_Parameters() +
	exec +
	replace;

result -= result.FindByType(typeof(ClassDecl));
result -= result.FindByType(typeof(TypeDecl));
result -= result.FindByType(typeof(MethodDecl));
result -= result.FindByType(typeof(NamespaceDecl));</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>