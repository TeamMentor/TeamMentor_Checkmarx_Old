<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>fefeab7c-a79e-4f53-af45-4709e8eaece6</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1412 - Buffer Overflow AddressOfLocalVarReturned</Title>
    <Category>CWE: 562</Category>
    <Phase>CPP Buffer Overflow</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  562</h1>
  <iframe height="500" src="/content/562" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1412
Cwe : 562
IsExecutable : true
IsEncrypted : false
Severity : 2
PackageId : 15
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> // BufferOverflow_AddressOfLocalVarReturned Query
// ------------------------------
// The purpose of the query is to find methods / functions that returns the address of the 
// local variable
// 
// The Example below shows code with vulnerability
// 
//     	  int * v7(void){
//			int a;
//			int b;
//			int c;
//		
//			b = *(&amp;a + &amp;c); 
//			return &amp;b; 
//		  }
// based on this example comments will be referenced
//
// Additionally, 
//   (1) the statement 
// 		b = foo(&amp;a) 
// Should recognize that b is not infliuenced by a
//   (2) return &amp;b-&gt;x or &amp;b.x 
// will not be recognized as vulnerability



CxList rs = All.FindByType(typeof(ReturnStmt));
CxList paramss = All.FindByType(typeof(Param));
CxList variableAsParam = All.GetByAncs(paramss).FindByType(typeof(UnknownReference));

CxList paramDecl = All.FindByType(typeof(ParamDecl));
CxList variableAsParamDecl = All.FindAllReferences(paramDecl).FindByType(typeof(UnknownReference));

CxList indexerRef = All.FindByType(typeof(IndexerRef));
CxList variableAsIndref = All.GetByAncs(indexerRef).FindByType(typeof(UnknownReference));

CxList decl = All.FindByType(typeof(Declarator)).GetAncOfType(typeof(FieldDecl));
CxList localVariables = All.FindByType(typeof(UnknownReference)) - All.FindAllReferences(decl) - variableAsParam - variableAsParamDecl - variableAsIndref;

// The variablesInRetStmt keeps variable in the return statement
// In example below the return statement has a "b" variable
CxList variablesInRetStmt = All.GetByAncs(rs).FindByType(typeof(UnknownReference));


CxList unaryExprAddress = All.FindByType(typeof(UnaryExpr)).FindByShortName("Address");
CxList unaryExprPointer = All.FindByType(typeof(UnaryExpr)).FindByShortName("Pointer");

// From example above: 	b = *(&amp;a + &amp;c); 
// The variablesAppledByAddress variable will keep: "a" and "c"
CxList variablesAppledByAddress = All.GetByAncs(unaryExprAddress).FindByType(typeof(UnknownReference));

CxList memberAccess = All.FindByType(typeof(MemberAccess));
CxList variablesWithMemberAccess = memberAccess.GetTargetOfMembers().FindByType(typeof(UnknownReference));
variablesAppledByAddress = variablesAppledByAddress - variablesWithMemberAccess;


// localVariablesInRetStmt will keep just variables in return statement that defined as local veriable
CxList localVariablesInRetStmt = variablesInRetStmt * localVariables;
localVariablesInRetStmt = localVariablesInRetStmt - variableAsParam;

variablesAppledByAddress = variablesAppledByAddress * localVariables;


// The result will kept path from "&amp;" operation to the return statement 
// and variable that "&amp;" operation will be applied on the variable in the return statement
result = variablesAppledByAddress.InfluencingOnAndNotSanitized(localVariablesInRetStmt, All.GetByAncs(unaryExprPointer) + variableAsParam) + 
	(variablesAppledByAddress * localVariablesInRetStmt);</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>