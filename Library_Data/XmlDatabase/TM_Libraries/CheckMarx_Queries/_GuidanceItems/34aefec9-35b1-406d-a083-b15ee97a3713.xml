<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>34aefec9-35b1-406d-a083-b15ee97a3713</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1964 - R06 05 01 Single Non Float LC</Title>
    <Category>CWE: 10819</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10819</h1><iframe src='/content/10819' width="100%" height="500"></iframe><h1>Checkmarx Rule</h1>
<div style='padding:10px'><pre>QueryId : 1964
Cwe : 10819
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre></div><h3>Source</h3><div style='padding:10px'><pre> /*
MISRA CPP RULE 6-5-1
------------------------------
This query searches for 'for' loops that have more than one loop counter or that their loop counter is of type float

The Example below shows code with vulnerability: 
                
    
    for(float w=0.0f; w<100; w++); //non-compliant
*/



CxList allFors = All.FindByType(typeof(IterationStmt));

CxList helper = allFors;
foreach(CxList allf in allFors)
{
	IterationStmt i = allf.data.GetByIndex(0) as IterationStmt;
	if(i != null)
	{
		IterationType it = i.IterationType;
		if(!it.ToString().Equals("For"))
			helper -= allf;
	}
}
allFors = helper;

//CxList totalUnknownR = All.FindByType(typeof(UnknownReference)) + All.FindByType(typeof(Declarator)) + All.FindByType(typeof(ParamDecl));
CxList unrf = All.FindByType(typeof(UnknownReference)).GetByAncs(allFors);
CxList totalDecl = All.FindByType(typeof(Declarator)) + All.FindByType(typeof(FieldDecl)) + All.FindByType(typeof(ParamDecl));
CxList declarators = totalDecl.GetByAncs(allFors);
CxList leftSd = All.FindByAssignmentSide(CxList.AssignmentSide.Left);

CxList notRef = unrf.GetMembersOfTarget().GetTargetOfMembers();
unrf -= notRef;



//find float typedefs
CxList typedefs = All.FindByName("CX_TYPEDEF").FindByType(typeof(StringLiteral));
typedefs = typedefs.GetAncOfType(typeof(VariableDeclStmt))
	+ typedefs.GetAncOfType(typeof(FieldDecl));
CxList tpr = All.FindByType(typeof(TypeRef));
typedefs += totalDecl.GetByAncs(typedefs) * All.FindByType(typeof(FieldDecl));


CxList alternativeFloats = All.NewCxList();
foreach(CxList nf in typedefs)
{
	CSharpGraph g = nf.data.GetByIndex(0) as CSharpGraph;
	if(g != null)
	{
		if(g.TypeName == "float")
		{
			alternativeFloats += tpr.FindByShortName(g.ShortName);
		}
	}
                
}

alternativeFloats = totalDecl.GetByAncs(alternativeFloats.GetFathers());






//find the init part of the for statement

foreach(CxList cur in allFors)
{
	CxList init = All.NewCxList();
	IterationStmt iterA = cur.data.GetByIndex(0) as IterationStmt;
	StatementCollection initColl = iterA.Init;
	for(int i = 0; initColl != null && i < initColl.Count; i++)
	{
		if(initColl[i] != null)
		{
			init += All.FindById(initColl[i].NodeId);
		}
	}
	CxList unknownRef = unrf.GetByAncs(init);
	//retrieves the loop counters
	CxList loopCounter = unknownRef.FindByFathers(init.FindByType(typeof(ExprStmt)));

	CxList leftAsn = unknownRef * leftSd;
	loopCounter += (leftAsn + declarators.GetByAncs(init));

               
	CxList increment = All.NewCxList();
	StatementCollection incrementColl = iterA.Increment;
                
	for(int i = 0;  incrementColl != null && i < incrementColl.Count; i++)
	{              
		if(incrementColl[i] != null)
		{
			increment += All.FindById(incrementColl[i].NodeId);
		}
	}
                
	CxList test = All.NewCxList();
	Expression testExp = iterA.Test;
	if(testExp != null)
	{
		test += All.FindById(testExp.NodeId);
	}
                
	CxList testUn = unrf.GetByAncs(test);
	CxList incrUn = unrf.GetByAncs(increment);
	CxList additionalLC = incrUn.FindAllReferences(testUn) + testUn.FindAllReferences(incrUn);
	CxList temp = loopCounter.FindAllReferences(additionalLC);
	additionalLC -= additionalLC.FindAllReferences(temp);
                
	CxList potential = additionalLC * testUn;
	loopCounter += potential;
                
                
	CxList nonCompliant = All.NewCxList();
	if(loopCounter.Count > 1)
	{
		nonCompliant += loopCounter;
		result += cur;
	}
	loopCounter -= nonCompliant;
	CxList lcDef = totalDecl.FindDefinition(loopCounter);
	CxList bad = (lcDef * alternativeFloats);
	if(bad.Count > 0)
	{
		result += cur;
	}
	foreach(CxList t in lcDef)
	{
		CSharpGraph g = t.data.GetByIndex(0) as CSharpGraph;
		if(g != null)
		{
			if(g.TypeName.Equals("float"))
			{
				result += cur;
			}
		}
	}
                
}</pre></div>]]></Data>
  </Content>
</TeamMentor_Article>