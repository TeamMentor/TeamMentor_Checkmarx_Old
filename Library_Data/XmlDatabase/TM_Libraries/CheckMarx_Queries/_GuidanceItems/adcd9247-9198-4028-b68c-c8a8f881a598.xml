<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>adcd9247-9198-4028-b68c-c8a8f881a598</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1933 - R08 04 03 Explicit Return Throw</Title>
    <Category>CWE: 10808</Category>
    <Phase>CPP MISRA CPP</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  10808</h1>
  <iframe height="500" src="/content/10808" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1933
Cwe : 10808
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1289
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA CPP RULE 8-4-3
------------------------------
This query searches for functions with non-void return type and an exit path without an explicit 'return' or 'throw' statement

	The Example below shows code with vulnerability: 

		int foo ( int param ) //non-compliant 
		{
		   if ( param &gt; 5 )
		   {
		      return ( param );
		   }
			
		}

*/


//finds all methods that have non void return type but return void.
CxList returnStmt = All.FindByType(typeof(ReturnStmt));
CxList emptyReturn = returnStmt - All.FindByFathers(returnStmt).GetFathers();
CxList returnType = All.FindByType(typeof(TypeRef)).FindByFathers(emptyReturn.GetAncOfType(typeof(MethodDecl)));
CxList voidRT = returnType.FindByShortName("void");
CxList nonVoidRT = returnType - voidRT;
result = nonVoidRT;


//finds methods that have non void return type but don't have return statements:
CxList allMethodDecl = All.FindByType(typeof(MethodDecl));
//remove all definitions
CxList declared = All.FindByFathers(allMethodDecl).FindByType(typeof(StatementCollection)).GetFathers();
//get non those who have non void return types:
returnType = All.FindByType(typeof(TypeRef)).FindByFathers(declared);
nonVoidRT = returnType - returnType.FindByShortName("void");
CxList backToMeth = nonVoidRT.GetFathers();

foreach(CxList method in backToMeth)
{
	CxList foundRetStmt = returnStmt.GetByAncs(method);
	if(foundRetStmt.Count == 0)
	{
		result += method;
	}
}
result -= allMethodDecl.FindByShortName("main");</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>