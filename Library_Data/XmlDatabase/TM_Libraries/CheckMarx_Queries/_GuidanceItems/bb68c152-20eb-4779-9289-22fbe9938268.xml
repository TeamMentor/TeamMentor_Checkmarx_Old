<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>bb68c152-20eb-4779-9289-22fbe9938268</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1831 - R08 05 Object Function In Header File</Title>
    <Category>CWE: 11019</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11019</h1>
  <iframe height="500" src="/content/11019" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1831
Cwe : 11019
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 8-5
------------------------------
This query searches for definitions of objects or functions in a header file

n_octal_const = 017;                                  
n_octal_const = 00;                          
n_octal_const = 0017;                       
n_octal_escape = '\01';

*/


// header files are defined to be anything used in #include (not just h files)
CxList headerFiles = All.FindByType(typeof(StringLiteral)).GetParameters(Find_Methods()
	.FindByShortName("CX_INCL"));

// add object definitions (assignments)
CxList problemIfInHeader = All.FindByType(typeof(Declarator)) -
	All.FindByType(typeof(ObjectCreateExpr)).GetFathers() -
	All.FindByType(typeof(ArrayCreateExpr)).GetFathers();;
problemIfInHeader += All.FindByType(typeof(AssignExpr));

// Add method definitions
problemIfInHeader += All.FindByType(typeof(StatementCollection)).GetAncOfType(typeof(MethodDecl));

// remove redundent results
problemIfInHeader -= (problemIfInHeader.GetByAncs(problemIfInHeader) - problemIfInHeader);
problemIfInHeader -= problemIfInHeader.FindByShortName("INCLUDEREPLACE*");
problemIfInHeader -= All.FindByType(typeof(StringLiteral)).FindByName("CX_TYPEDEF").GetFathers();


// intersect what is not allowed with the contents of the header files
foreach (CxList cur in headerFiles){
	StringLiteral inclusion = cur.data.GetByIndex(0) as StringLiteral;
	if (inclusion.Value == null) {
		continue;
	}
	string headerFileName = "*" + inclusion.Value;
	result += problemIfInHeader.FindByFileName(headerFileName);
}

foreach (CxList cur in result){
		result -= (result.GetByAncs(cur) - cur);
}</pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>