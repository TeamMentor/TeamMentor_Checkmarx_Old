<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>3974fedb-48fe-4bce-abd9-0076655d2415</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1835 - R10 06 U Suffix Not Applied To Unsigned Const</Title>
    <Category>CWE: 11023</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11023</h1>
  <iframe height="500" src="/content/11023" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1835
Cwe : 11023
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 10-6
------------------------------
This query searches for unsigned constants without the 'U' suffix

	The Example below shows code with vulnerability: 

use_uint64 ( 9223372036854775808 );
use_uint32 ( 0x80000000 );

*/

// System definitions
const int INT_BITS = 32;
const int LONG_BITS = 64;

// The limits on range of int and long, based on system definition
ulong MAX_SIGNED_INT = (ulong)Math.Pow(2, INT_BITS-1)-1;
ulong MAX_UNSIGNED_INT = (ulong)Math.Pow(2, INT_BITS)-1;
ulong MAX_SIGNED_LONG = (ulong) Math.Pow(2, LONG_BITS-1)-1;
ulong MAX_UNSIGNED_LONG = (ulong) Math.Pow(2, LONG_BITS)-1;

// decimal literals with no 'U' or 'u' suffix
CxList decimalLiterals = All.NewCxList();
CxList temp = All.FindByRegex(@"[^\w][1-9][0-9]*(L|l)?[^\wuU]", false, false, false, decimalLiterals);

// octal literals with no 'U' or 'u' suffix
CxList octalLiterals = All.NewCxList();
temp = All.FindByRegex(@"[^\w]0[0-7]*(L|l)?[^\wuU]", false, false, false, octalLiterals);

// hexadecimal literals with no 'U' or 'u' suffix
CxList hexaLiterals = All.NewCxList();
temp = All.FindByRegex(@"[^\w]0[x|X][0-9,a-fA-F]+(L|l)?[^G-Za-z0-9_uU]", false, false, false, hexaLiterals);

hexaLiterals += octalLiterals;

CxList resultsText = All.NewCxList();

// go over the various found numeric literals, check if the underlying type is unsigned.

// add decimals
foreach (CxList cur in decimalLiterals){
	try{
		string str = (cur.data.GetByIndex(0) as CSharpGraph).FullName;
		str = str.Substring(1, str.Length - 2);
		char lastChar = str[str.Length - 1];
		if ((lastChar == 'L') || (lastChar == 'l')){
			str = str.Substring(0, str.Length - 1);
		}
		ulong number = Convert.ToUInt64(str);
		
		if (number &gt; MAX_SIGNED_LONG){
			resultsText += cur;
			continue;
		}
	}
	catch(Exception e){}	
}

// add octals/hexas
foreach (CxList cur in (hexaLiterals)){
	try{
		string str = (cur.data.GetByIndex(0) as CSharpGraph).FullName;
		str = str.Substring(3, str.Length - 4);
		char lastChar = str[str.Length - 1];
		if ((lastChar == 'L') || (lastChar == 'l')){
			str = str.Substring(0, str.Length - 1);
		}
		long numberLong = Int64.Parse(str, System.Globalization.NumberStyles.HexNumber);
		if (numberLong  MAX_SIGNED_INT) &amp;&amp; (number <_3d_ resultstext="" _catch28_exception="" _7d_="" _continue3b_="" _e29_7b_7d_="" _max_unsigned_int29_29_7b_="" result="All.FindByRegexSecondOrder(&quot;.&quot;," _2b_="cur;"></_3d_></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>