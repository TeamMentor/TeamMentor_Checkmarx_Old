<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>80fb7072-4e42-4b64-88f6-2ec66d281d99</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1842 - R13 01 Assignment Operators In Boolean Expressions</Title>
    <Category>CWE: 11030</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11030</h1>
  <iframe height="500" src="/content/11030" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1842
Cwe : 11030
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 13-1
------------------------------
This query searches for assignments inside boolean expressions

	The Example below shows code with vulnerability: 

int a;
if (a=5)
	return 0;

int b = !(a=6);

*/

// this catches boolean expressions that are operands
CxList Exprs = All.FindByType(typeof(BinaryExpr)) + All.FindByType(typeof(UnaryExpr));

// only choose boolean expressions
Exprs = Exprs.FindByName("==") +
	Exprs.FindByName("!=") +
	Exprs.FindByName("Not") + 
	Exprs.FindByName("<_22_29_ _2b_=""></_22_29_><_3d_22_29_ _2b_="" _exprs.findbyname28_22_="">") +
	Exprs.FindByName("&gt;=") +
	Exprs.FindByName("&amp;&amp;") +
	Exprs.FindByName("||") +
	Exprs.FindByName("&amp;") +
	Exprs.FindByName("|") +
	Exprs.FindByName("^");


	CxList potentials = All.FindByFathers(Exprs);

	// now add conditions in control structures
	CxList Iterations = All.FindByType(typeof(IterationStmt));
	CxList Ifs = All.FindByType(typeof(IfStmt));
	CxList sons = All.FindByFathers(Ifs) + All.FindByFathers(Iterations);


foreach (CxList cur in Ifs){
	IfStmt curIf = cur.data.GetByIndex(0) as IfStmt;
	if(curIf != null)
	{
		CSharpGraph curExpr = ((CSharpGraph) curIf.Condition);
		if(curExpr != null)
		{
			potentials += sons.FindById(curExpr.NodeId);
		}
	}
		
}

foreach (CxList cur in Iterations){
	
	IterationStmt curIter = cur.data.GetByIndex(0) as IterationStmt;

	if(curIter != null)
	{
		CSharpGraph curExpr = ((CSharpGraph) curIter.Test);
		if (curExpr != null) 
		{
			potentials += sons.FindById(curExpr.NodeId);
		}
	}
}


	result += potentials.FindByType(typeof(AssignExpr));</_3d_22_29_></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>