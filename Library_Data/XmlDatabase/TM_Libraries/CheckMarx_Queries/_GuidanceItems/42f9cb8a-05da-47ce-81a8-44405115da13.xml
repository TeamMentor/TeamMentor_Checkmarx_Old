<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>42f9cb8a-05da-47ce-81a8-44405115da13</Id>
    <Library_Id>cdfef7b5-715e-4199-91cd-d9c380eb7e6b</Library_Id>
    <Title>1877 - R20 07 Using Setjmp Longjmp Macros From Setjmp H</Title>
    <Category>CWE: 11065</Category>
    <Phase>CPP MISRA C</Phase>
    <Technology>CPP</Technology>
    <Type>No Landing Page</Type>
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Content for CWE ID:  11065</h1>
  <iframe height="500" src="/content/11065" width="100%">
  </iframe>
  <h1>Checkmarx Rule</h1>
  <div style="padding:10px">
    <pre>QueryId : 1877
Cwe : 11065
IsExecutable : true
IsEncrypted : false
Severity : 0
PackageId : 1288
Status : Original
Type : Regular
</pre>
  </div>
  <h3>Source</h3>
  <div style="padding:10px">
    <pre> /*
MISRA C RULE 20-7
------------------------------
This query searches for usage of the macro 'setjmp' macro 'longjmp', in library <setjmp.h>

	The Example below shows code with vulnerability: 

void foo ( void ) 
{
jmp_buf jbuf;
int val = 1;
    
    if ( setjmp ( jbuf ) == 0 ) 
    {
                
    }
    else
    {
                
    }
    
    longjmp ( jbuf, val ) ;

*/

// Safety check for the violating h file
CxList includes = All.FindByType(typeof(StringLiteral)).GetParameters(Find_Methods()
	.FindByShortName("CX_INCL"));
CxList hFile = includes.FindByShortName("setjmp.h");
if (hFile.Count == 0)
	return result;

// Start with all instances of jumps
CxList jmps = All.FindByType(typeof(MethodInvokeExpr)).FindByShortName("setjmp") +
				All.FindByType(typeof(MethodInvokeExpr)).FindByShortName("longjmp");

// Remove all locally defined instances
CxList defs = All.FindDefinition(jmps);
jmps -= jmps.FindAllReferences(defs);

result = jmps;</setjmp.h></pre>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>